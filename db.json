{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/TKL/source/css/all.styl","path":"css/all.styl","modified":1,"renderable":1},{"_id":"themes/TKL/source/css/animate.css","path":"css/animate.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/css/custom.css","path":"css/custom.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/css/animsition.min.css","path":"css/animsition.min.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/css/flexslider.css","path":"css/flexslider.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/css/iconList.css","path":"css/iconList.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/css/ie8.css","path":"css/ie8.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/css/slidebars.min.css","path":"css/slidebars.min.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/ascetic.css","path":"highlightjs/ascetic.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/css/screen.css","path":"css/screen.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/css/syntax.styl","path":"css/syntax.styl","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/brown_paper.css","path":"highlightjs/brown_paper.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/arta.css","path":"highlightjs/arta.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/dark.css","path":"highlightjs/dark.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/brown_papersq.png","path":"highlightjs/brown_papersq.png","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/docco.css","path":"highlightjs/docco.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/default.css","path":"highlightjs/default.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/far.css","path":"highlightjs/far.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/foundation.css","path":"highlightjs/foundation.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/ir_black.css","path":"highlightjs/ir_black.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/mono-blue.css","path":"highlightjs/mono-blue.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/googlecode.css","path":"highlightjs/googlecode.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/magula.css","path":"highlightjs/magula.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/idea.css","path":"highlightjs/idea.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/github.css","path":"highlightjs/github.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/monokai_sublime.css","path":"highlightjs/monokai_sublime.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/monokai.css","path":"highlightjs/monokai.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/pojoaque.css","path":"highlightjs/pojoaque.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/obsidian.css","path":"highlightjs/obsidian.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/rainbow.css","path":"highlightjs/rainbow.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/pojoaque.jpg","path":"highlightjs/pojoaque.jpg","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/school_book.png","path":"highlightjs/school_book.png","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/school_book.css","path":"highlightjs/school_book.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/railscasts.css","path":"highlightjs/railscasts.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/solarized_dark.css","path":"highlightjs/solarized_dark.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/solarized_light.css","path":"highlightjs/solarized_light.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/sunburst.css","path":"highlightjs/sunburst.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/tomorrow-night-eighties.css","path":"highlightjs/tomorrow-night-eighties.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/tomorrow-night-blue.css","path":"highlightjs/tomorrow-night-blue.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/tomorrow-night.css","path":"highlightjs/tomorrow-night.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/tomorrow-night-bright.css","path":"highlightjs/tomorrow-night-bright.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/vs.css","path":"highlightjs/vs.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/tomorrow.css","path":"highlightjs/tomorrow.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/zenburn.css","path":"highlightjs/zenburn.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/highlightjs/xcode.css","path":"highlightjs/xcode.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/js/html5shiv.min.js","path":"js/html5shiv.min.js","modified":1,"renderable":1},{"_id":"themes/TKL/source/js/jquery.flexslider-min.js","path":"js/jquery.flexslider-min.js","modified":1,"renderable":1},{"_id":"themes/TKL/source/js/jquery.ajaxchimp.min.js","path":"js/jquery.ajaxchimp.min.js","modified":1,"renderable":1},{"_id":"themes/TKL/source/fonts/icons.eot","path":"fonts/icons.eot","modified":1,"renderable":1},{"_id":"themes/TKL/source/js/respond.min.js","path":"js/respond.min.js","modified":1,"renderable":1},{"_id":"themes/TKL/source/js/scripts.js","path":"js/scripts.js","modified":1,"renderable":1},{"_id":"themes/TKL/source/fonts/icons.woff","path":"fonts/icons.woff","modified":1,"renderable":1},{"_id":"themes/TKL/source/fonts/icons.ttf","path":"fonts/icons.ttf","modified":1,"renderable":1},{"_id":"themes/TKL/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/TKL/source/img/close.png","path":"img/close.png","modified":1,"renderable":1},{"_id":"themes/TKL/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/TKL/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/TKL/source/js/jquery-1.11.1.min.js","path":"js/jquery-1.11.1.min.js","modified":1,"renderable":1},{"_id":"themes/TKL/source/fonts/icons.svg","path":"fonts/icons.svg","modified":1,"renderable":1},{"_id":"themes/TKL/source/js/plugins.min.js","path":"js/plugins.min.js","modified":1,"renderable":1},{"_id":"themes/TKL/source/img/blog.png","path":"img/blog.png","modified":1,"renderable":1},{"_id":"themes/TKL/source/img/1.jpg","path":"img/1.jpg","modified":1,"renderable":1},{"_id":"themes/TKL/source/img/bg_img.jpg","path":"img/bg_img.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/TKL/README.md","hash":"4fe7e804ea0615508c090697c1654303fdd5c07b","modified":1470715414497},{"_id":"themes/TKL/_config.yml","hash":"1bf561942acaa9bc4c07a64d952fc165918d332a","modified":1479350851510},{"_id":"themes/TKL/LICENSE","hash":"6b8f5769b47147a271f7d5a808b802dcb44fab85","modified":1470715414496},{"_id":"source/_posts/Git-Push-出现错误处理.md","hash":"614260f3c455156f81af7c79b6c8e332fb037c30","modified":1484275108023},{"_id":"source/_posts/15个PHP开发者常用的正则表达式及实例.md","hash":"7bcca7bd1cc139dcdfc118ea5cea6f87791f766c","modified":1469937927363},{"_id":"source/_posts/Git-分支（branch）的使用整理.md","hash":"fb7eb1087ef4fd7f156c28d99fb5e0a1f9c87fd2","modified":1471337749911},{"_id":"source/_posts/Linux-alias-永久生效.md","hash":"3bd2916a854728a2deef13bab9ee76f343bafb5a","modified":1483085893167},{"_id":"source/_posts/Linux-安装supervisor-CentOs-or-RedHat.md","hash":"0a05eb8834c50a50f96c9c158268105867e501d0","modified":1483085455051},{"_id":"source/_posts/Nginx配置虚拟主机.md","hash":"42d1a49fdebb9170b0d8103b5d2e9f8b5417ae88","modified":1471337249771},{"_id":"source/_posts/NodeJs-Error-Can-t-set-headers-after-they-are-sent-怎么解决？.md","hash":"5e95e5105da072906dba610cd2e7865a0766290a","modified":1471337292426},{"_id":"source/_posts/PHP-UTC转GMT时区.md","hash":"012b5dd460f72885bed0fec4b2ce9dd176500a6e","modified":1471951948263},{"_id":"source/_posts/NodeJs-多语言包.md","hash":"17b051b4975fa6d9411c2158dea261a8cbc0be74","modified":1469776696452},{"_id":"source/_posts/Nodejs-使用pm2实现开机自启.md","hash":"a27f3ec9269fad90b645526d297b08794e467b54","modified":1472210087292},{"_id":"source/_posts/PHP-curl传送json数据.md","hash":"74156005e6a8d4f19a5fdb867aba6bb5042333e5","modified":1469618724757},{"_id":"source/_posts/Team-building.md","hash":"c91aa402f72fa1a8f4947ba1e5d3786566dd6c2d","modified":1469798153531},{"_id":"source/_posts/PHP使用fastcgi-finish-request-提高响应.md","hash":"de65068cddebaba221fc5e95e92c20540009ae29","modified":1476705676457},{"_id":"source/_posts/PHP-零散函数（一）.md","hash":"e1d615d558edb54a8036a8c217ed83319e28d308","modified":1474618447688},{"_id":"source/_posts/PHP实现RSA加密、解密操作.md","hash":"3d2cd15f8c4ad5479d179a26ae5b58d3dd2a0a49","modified":1473418291673},{"_id":"source/_posts/Ubuntu搭建lnmp环境.md","hash":"c057f81dcfec6220e85be6b668cd68bdb633a404","modified":1479808288355},{"_id":"source/_posts/SSH和HTTPS互相切换.md","hash":"d0344a97eb2995dddea97c6a93bccbf10a41c1ff","modified":1471337291506},{"_id":"source/_posts/Ubuntu查看版本.md","hash":"c1e0410147c9375536dd28655190149e7d3aaab6","modified":1480313278037},{"_id":"source/_posts/php-创建xml的几种方式.md","hash":"dee630ad27772cace809bc0f6541ca008fd2af63","modified":1479190807837},{"_id":"source/_posts/一些杂谈琐事—-—-———-自我反思.md","hash":"17616c3a4648b35c270bc80b06c918b11b308482","modified":1471337463499},{"_id":"source/_posts/读《代码整洁之道》.md","hash":"d7701726593fbf37767831ba6552d51e8c72e99a","modified":1472817810286},{"_id":"source/categories/index.md","hash":"837f964ec19e629fd781262d15fccafe2d0902c6","modified":1470564565685},{"_id":"themes/TKL/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1470715414486},{"_id":"source/about/index.md","hash":"23125628f97358ca78994d5d3adf1d8bd590e348","modified":1469756787374},{"_id":"source/tags/index.md","hash":"0081f6236acecd224e0ef178db724ef6dc0578e0","modified":1470564548218},{"_id":"source/_posts/关于多个chatbot的调研结果.md","hash":"5966a48b0b2be5260bd97a3775bbb2374d5b41b8","modified":1472210490252},{"_id":"themes/TKL/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1470715403676},{"_id":"themes/TKL/.git/config","hash":"09ca2c38945aae3fa93bbdf02fc1858e5d2b344e","modified":1470715414489},{"_id":"source/_posts/阿里云消息队列和消息服务的使用.md","hash":"5aeebbde12d3db964b686a6991337dd36a6a8e2c","modified":1479463220611},{"_id":"themes/TKL/.git/index","hash":"7e7629ed81495227643c6f3266c2f863f0a65621","modified":1479810100648},{"_id":"themes/TKL/.git/packed-refs","hash":"09574cc51c191d6e20e8ad88c2c0720fc763f0d7","modified":1470715414481},{"_id":"themes/TKL/layout/about.ejs","hash":"9a6da09178130877fa7c6852fe41c714b46b773c","modified":1470715414501},{"_id":"themes/TKL/layout/archive.ejs","hash":"43e2dd0a6f82acba7e8dae563ff358854e63338d","modified":1470715414501},{"_id":"themes/TKL/layout/category.ejs","hash":"7b863018dd9b05f8a1ebabf58e96add0049d7abe","modified":1470715414506},{"_id":"themes/TKL/layout/index.ejs","hash":"13fd753d2b2e82ada96902b13a3e0b6dbafcd3c5","modified":1470715414507},{"_id":"themes/TKL/layout/page.ejs","hash":"e36013572b4f5e4bcd9ebdcf86d4d32854190235","modified":1470715414507},{"_id":"themes/TKL/layout/post.ejs","hash":"12b1d7c22468b220bb8c2c53f75081f9a5443e0c","modified":1470715414508},{"_id":"themes/TKL/layout/tag.ejs","hash":"3e22a8a5281d7648d90b604f95cbdd1790008a70","modified":1470715414510},{"_id":"themes/TKL/layout/layout.ejs","hash":"75930741db6f3b25a15ef77d2f28f88dd50ceefc","modified":1470715414507},{"_id":"themes/TKL/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1470715403691},{"_id":"themes/TKL/.git/logs/HEAD","hash":"5d59882ef2fdf930384dea5df8769fd093282348","modified":1470715414488},{"_id":"themes/TKL/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1470715403683},{"_id":"themes/TKL/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1470715403687},{"_id":"themes/TKL/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1470715403687},{"_id":"themes/TKL/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1470715403689},{"_id":"themes/TKL/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1470715403684},{"_id":"themes/TKL/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1470715403689},{"_id":"themes/TKL/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1470715403688},{"_id":"themes/TKL/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1470715403688},{"_id":"themes/TKL/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1470715403690},{"_id":"themes/TKL/layout/_widget/archive.ejs","hash":"88e191e3d14541299ed03b9a45be70974df51143","modified":1470715414499},{"_id":"themes/TKL/layout/_widget/category.ejs","hash":"4d3f92e3cd652cb69d71e40d1c64b2369922ca26","modified":1470715414500},{"_id":"themes/TKL/layout/_widget/recent_posts.ejs","hash":"d6591c745402fbc600e682830a343f732e336e4f","modified":1470715414500},{"_id":"themes/TKL/layout/_widget/tagcloud.ejs","hash":"9028129dd2e56813197d0c38db5df8110aaeaabb","modified":1470715414500},{"_id":"themes/TKL/layout/_widget/tag.ejs","hash":"7ba10fbd17b83b9b89eaea99bb78158d318c6d75","modified":1470715414500},{"_id":"themes/TKL/layout/casper/about.ejs","hash":"b0127ff072ce3158cc59301da9322c7dd9fd3a7d","modified":1470715414501},{"_id":"themes/TKL/layout/casper/after_all.ejs","hash":"ab29a29ba2988671597248f3c1b4e2cfa6bc595f","modified":1470715414501},{"_id":"themes/TKL/layout/casper/footer.ejs","hash":"e438fc07a507a61207175245b350385f01ce6859","modified":1470715414502},{"_id":"themes/TKL/layout/casper/archive.ejs","hash":"d6378de697a6e3094a745d52d0021239062f2160","modified":1470715414501},{"_id":"themes/TKL/layout/casper/head.ejs","hash":"1e846820ffd670f2f9cabf2aabdd5c228e800e8c","modified":1470715414502},{"_id":"themes/TKL/layout/casper/index.ejs","hash":"24df02e8c5f80010657832bb89784a708f84521a","modified":1479463447937},{"_id":"themes/TKL/layout/casper/header.ejs","hash":"12120770619f6c520374ba4320aa1d24887d5807","modified":1471339913093},{"_id":"themes/TKL/layout/casper/post.ejs","hash":"3701ac937d766fa83a2d3dbdb300afb4b4fbef79","modified":1470715414503},{"_id":"themes/TKL/source/css/all.styl","hash":"ca19553dee39561ef97b4ceb6d2866dad7b6cbcf","modified":1470715414510},{"_id":"themes/TKL/source/css/animate.css","hash":"fd699ba3667af7bbe7a2170982480cb4113fe6e7","modified":1470715414511},{"_id":"themes/TKL/source/css/custom.css","hash":"4180dd1fcba1dd24a8ba517f293282599fe4d58e","modified":1470715414513},{"_id":"themes/TKL/source/css/animsition.min.css","hash":"062812c0c364e3d2372577add1f46da223efcabd","modified":1470715414511},{"_id":"themes/TKL/source/css/flexslider.css","hash":"ced8374af83d974da73268abf1103444207f68e4","modified":1470715414513},{"_id":"themes/TKL/source/css/iconList.css","hash":"ad7cb63acce3237e4975e168a23eb213960a4667","modified":1470715414513},{"_id":"themes/TKL/source/css/ie8.css","hash":"fd202f1fa4850457c07361cd7fb3c8b6591590c5","modified":1470715414514},{"_id":"themes/TKL/source/css/slidebars.min.css","hash":"ee3d7d32bce684d84baab0a19fdd82447339b3c7","modified":1470715414514},{"_id":"themes/TKL/source/highlightjs/ascetic.css","hash":"ce98f249212f426d91f532a5129d2c2f606a6a4a","modified":1470715414521},{"_id":"themes/TKL/source/css/screen.css","hash":"1863cf50647ba44c821592bd8896f7aa3165b901","modified":1470715414514},{"_id":"themes/TKL/source/css/syntax.styl","hash":"98eff1a65d363671039e21e2f9b5965ab0e4fec5","modified":1471339509286},{"_id":"themes/TKL/source/highlightjs/brown_paper.css","hash":"8ab0a5df07fdada618c8d9dea8908183fe642b74","modified":1470715414523},{"_id":"themes/TKL/source/highlightjs/arta.css","hash":"74f644ebeb5144abe227f24a523874449ccabc9d","modified":1470715414521},{"_id":"themes/TKL/source/highlightjs/dark.css","hash":"f02394fdbaca9f15fcccfbdda0b4da742bb82a59","modified":1470715414524},{"_id":"themes/TKL/source/highlightjs/brown_papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1470715414524},{"_id":"themes/TKL/source/highlightjs/docco.css","hash":"9c4e5ef7fcb703430d18b7bcbd54ff17b78bb1ed","modified":1470715414525},{"_id":"themes/TKL/source/highlightjs/default.css","hash":"7cbcf0cd72799792d34eb26304e12c2f93f60f58","modified":1470715414525},{"_id":"themes/TKL/source/highlightjs/far.css","hash":"fd4a8b25728c7a931d334b96cc69cebe8ac9451d","modified":1470715414525},{"_id":"themes/TKL/source/highlightjs/foundation.css","hash":"de4ee2c8b24e23e87e846b333e22fadd189d5c60","modified":1470715414526},{"_id":"themes/TKL/source/highlightjs/ir_black.css","hash":"4463ff416bd324833679db5c9b26006458642645","modified":1470715414529},{"_id":"themes/TKL/source/highlightjs/mono-blue.css","hash":"8579eedecfafb7a9c17b6fbd6599a915b403bce5","modified":1470715414529},{"_id":"themes/TKL/source/highlightjs/googlecode.css","hash":"05b30bf441d099ae1b9f7d112ebd8cd23e146296","modified":1470715414528},{"_id":"themes/TKL/source/highlightjs/magula.css","hash":"e85300b10bb020d7e016c187d3e01a3697fcb7c3","modified":1470715414529},{"_id":"themes/TKL/source/highlightjs/idea.css","hash":"2de53944c5c22116edc6eee8f925e5e783b8073d","modified":1470715414528},{"_id":"themes/TKL/source/highlightjs/github.css","hash":"7be89833c6b84288184e10492154843e742b7e7c","modified":1470715414526},{"_id":"themes/TKL/source/highlightjs/monokai_sublime.css","hash":"3cd30cc8f329731e28c688455b2c699d71ce0b90","modified":1470715414530},{"_id":"themes/TKL/source/highlightjs/monokai.css","hash":"2e62e875d81dec0357f3bfa0ce93ddc2bfcbfe20","modified":1470715414529},{"_id":"themes/TKL/source/highlightjs/pojoaque.css","hash":"37514cdc33b32a7097606f55ec1cc1126dafe000","modified":1470715414530},{"_id":"themes/TKL/source/highlightjs/obsidian.css","hash":"fde4722aba42b797a5c521b8052403670d9eb0aa","modified":1470715414530},{"_id":"themes/TKL/source/highlightjs/rainbow.css","hash":"4fe18519c63be9f95d8ad5d1758d494390634b7d","modified":1470715414531},{"_id":"themes/TKL/source/highlightjs/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1470715414530},{"_id":"themes/TKL/source/highlightjs/school_book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1470715414531},{"_id":"themes/TKL/source/highlightjs/school_book.css","hash":"e5cf5c0f8a35d9283d67eccce6f52138ba6789b5","modified":1470715414531},{"_id":"themes/TKL/source/highlightjs/railscasts.css","hash":"9e9cc71a9afc948dc90d79025fc0732ce109cf8e","modified":1470715414530},{"_id":"themes/TKL/source/highlightjs/solarized_dark.css","hash":"ba304db20da70d69a8d27d05b8fc75edf74bb40e","modified":1470715414531},{"_id":"themes/TKL/source/highlightjs/solarized_light.css","hash":"3e827b41ab1866d05ba85c48c0e3f518f6822f4f","modified":1470715414532},{"_id":"themes/TKL/source/highlightjs/sunburst.css","hash":"499a3aa2b290c22c5eb106b05bcdf2d3d5ed1229","modified":1470715414532},{"_id":"themes/TKL/source/highlightjs/tomorrow-night-eighties.css","hash":"16172139f6cd846983837c9d650e616f57df15e0","modified":1470715414533},{"_id":"themes/TKL/source/highlightjs/tomorrow-night-blue.css","hash":"698c62ba5dcbec5a993c3588420a7b2e9708209e","modified":1470715414532},{"_id":"themes/TKL/source/highlightjs/tomorrow-night.css","hash":"52d47a69b14321ddb009582b9869e4cd389f1051","modified":1470715414533},{"_id":"themes/TKL/source/highlightjs/tomorrow-night-bright.css","hash":"926b4aaeea76de8be818f6cefa4d33c82e527a9d","modified":1470715414532},{"_id":"themes/TKL/source/highlightjs/vs.css","hash":"525fcc362fb0108e394436cc9c2553acaa4b9478","modified":1470715414535},{"_id":"themes/TKL/source/highlightjs/tomorrow.css","hash":"40ba59915e13ac1d188dfc32efb2385adbcb57ff","modified":1470715414535},{"_id":"themes/TKL/source/highlightjs/zenburn.css","hash":"93c9c9e4638cd8826681651e4970df1ce48e8f50","modified":1470715414535},{"_id":"themes/TKL/source/highlightjs/xcode.css","hash":"fb9dba283e9f5eb70a23a2c0cf6033a58da7fe5d","modified":1470715414535},{"_id":"themes/TKL/source/js/html5shiv.min.js","hash":"c6a4cb6f94c76f9d053ef330247358ebdb2d3149","modified":1470715414548},{"_id":"themes/TKL/source/js/jquery.flexslider-min.js","hash":"290cc9dfca28bcda2db8e4445c1ab0baf2715281","modified":1470715414549},{"_id":"themes/TKL/source/js/jquery.ajaxchimp.min.js","hash":"9be17785b0d816e1cd6bc45908e1805e0522fe18","modified":1470715414549},{"_id":"themes/TKL/source/fonts/icons.eot","hash":"e307fc2d61d13bbc3aafc9abd75e727cbebadee1","modified":1470715414518},{"_id":"themes/TKL/source/js/respond.min.js","hash":"4ea901a86ea32d7168a735cf293ca0d82e63c9dd","modified":1470715414551},{"_id":"themes/TKL/source/js/scripts.js","hash":"7220993a530684382f967f7301466393d93fc182","modified":1470715414552},{"_id":"themes/TKL/source/fonts/icons.woff","hash":"af538de6ac19d5da1cada203c7451ce32f5daceb","modified":1470715414520},{"_id":"themes/TKL/source/fonts/icons.ttf","hash":"2169592997f694ffa05b1d4c23d5a1abf35d3203","modified":1470715414520},{"_id":"themes/TKL/source/img/favicon.ico","hash":"70fbd67d92be00781652fed26bda9af8d931fb0a","modified":1470715414546},{"_id":"themes/TKL/source/img/close.png","hash":"e52e6a61877efd98ddad9ca31ece27e8ee977327","modified":1470715414546},{"_id":"themes/TKL/source/img/logo.png","hash":"d40339b65179865c59d99fcbc6cd33618eef9ba3","modified":1470715414547},{"_id":"themes/TKL/source/css/bootstrap.min.css","hash":"d2333a926ae25bbd3056814f13fec0843468e49e","modified":1470715414512},{"_id":"themes/TKL/source/css/style.css","hash":"bc3d6af2b62acb2d7e7f52e89862cea87580016a","modified":1470715414517},{"_id":"themes/TKL/source/js/jquery-1.11.1.min.js","hash":"4fbe0563917d6f6289e4e1b4a0a8758e4e43bda9","modified":1470715414549},{"_id":"themes/TKL/source/fonts/icons.svg","hash":"12bf62bc3a7ba0fa5315a72fbf0bb9b99766a60c","modified":1470715414519},{"_id":"themes/TKL/.git/refs/heads/master","hash":"d723c331deaa96e58af0aa46b7f25a3446bf0d20","modified":1470715414487},{"_id":"themes/TKL/.git/objects/pack/pack-301c1d4592a4777f6925ba752be86d4281ac6ef9.idx","hash":"dd27443f6ebcdf6569742863db308d66f5e6f46d","modified":1470715414430},{"_id":"themes/TKL/layout/casper/post/duoshuo.ejs","hash":"f0d1c874618d5882b6ac218d2c18b4e9216f20b6","modified":1470715414506},{"_id":"themes/TKL/layout/casper/post/meta.ejs","hash":"bb1ad0d2c78f3882c4cf68dafb3d24ba779bf8b6","modified":1470715414506},{"_id":"themes/TKL/layout/casper/post/navigation.ejs","hash":"eea8b316d155217ea06d15e3eaf5c575b6edff9f","modified":1470715414506},{"_id":"themes/TKL/layout/casper/post/comments.ejs","hash":"c40a320cd9e9e8c5a590d7c35810799ccbfc5d96","modified":1470715414505},{"_id":"themes/TKL/source/js/plugins.min.js","hash":"8f245d4dbd289e28973bbec78f1991d40563328c","modified":1470715414551},{"_id":"themes/TKL/.git/logs/refs/heads/master","hash":"5d59882ef2fdf930384dea5df8769fd093282348","modified":1470715414487},{"_id":"themes/TKL/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1470715414486},{"_id":"themes/TKL/.git/logs/refs/remotes/origin/HEAD","hash":"5d59882ef2fdf930384dea5df8769fd093282348","modified":1470715414485},{"_id":"themes/TKL/source/img/blog.png","hash":"cca602b5c4158de6bf79e749511e8ed89b924635","modified":1470715414545},{"_id":"themes/TKL/source/img/1.jpg","hash":"63ce0452832831e46097c7cd400bdcb2d01ad6ef","modified":1470715414539},{"_id":"themes/TKL/source/img/bg_img.jpg","hash":"63ce0452832831e46097c7cd400bdcb2d01ad6ef","modified":1470715414543},{"_id":"themes/TKL/.git/objects/pack/pack-301c1d4592a4777f6925ba752be86d4281ac6ef9.pack","hash":"244d436c9687c5f4d9e2bc50bafce92d874d4021","modified":1470715414437},{"_id":"public/sitemap.xml","hash":"eda9dd678dbd149e153ff0e2cfb474c0f1789b26","modified":1484275136568},{"_id":"public/categories/index.html","hash":"efd957ef5882731926e6decbbebe2ba96857d032","modified":1484275136826},{"_id":"public/about/index.html","hash":"e53a26a09bc032dcb32457d222130e3aaca06670","modified":1484275136827},{"_id":"public/tags/index.html","hash":"246fd2f0943b55153a66011d4ec0739fc229192f","modified":1484275136827},{"_id":"public/2016/12/30/Linux-alias-永久生效/index.html","hash":"e48cd1d1541eb41a7f177be11124c20e2845f7e4","modified":1484275136827},{"_id":"public/2016/11/28/Ubuntu查看版本/index.html","hash":"3248868f47e89ce546e2fb2864f8506ff4006a87","modified":1484275136828},{"_id":"public/2016/11/15/php-创建xml的几种方式/index.html","hash":"58f594ef3666701bea6b1d44919d43801abfe234","modified":1484275136828},{"_id":"public/2016/08/01/NodeJs-Error-Can-t-set-headers-after-they-are-sent-怎么解决？/index.html","hash":"dd6d38d508b5b93b04775367c19cebdb363838e8","modified":1484275136828},{"_id":"public/archives/page/3/index.html","hash":"bc32438a3f4abbd940a41f7a311c42834c842a04","modified":1484275136828},{"_id":"public/archives/2016/page/3/index.html","hash":"4ddb380ab4534cd5f5557cbf426115cd49d19cd1","modified":1484275136828},{"_id":"public/2016/07/26/NodeJs-多语言包/index.html","hash":"495fab3c15d6ed819793a01f1ad0b43b26174bea","modified":1484275136828},{"_id":"public/archives/2016/08/index.html","hash":"6286ff7b3412f67ec09f49debd54ac82f03f34be","modified":1484275136828},{"_id":"public/2016/07/29/Team-building/index.html","hash":"97ca4d370781e799af12cfa6211177241c59a579","modified":1484275136828},{"_id":"public/archives/2016/09/index.html","hash":"9217b3305ac7d911ede16dfe1222db6b73ac7c72","modified":1484275136828},{"_id":"public/archives/2016/10/index.html","hash":"745e1965efbfad0a60236705f0580f287bd5cef0","modified":1484275136828},{"_id":"public/archives/2016/11/index.html","hash":"24b95053161c16fa4bd5481a187d98995071fdab","modified":1484275136828},{"_id":"public/archives/2016/12/index.html","hash":"4ba33b24ab991e710b769380c353f0a81e3d1118","modified":1484275136828},{"_id":"public/categories/Git/index.html","hash":"4274aca74affba6bdfc4d237326b60d5e29faf2f","modified":1484275136828},{"_id":"public/categories/Linux/index.html","hash":"f8dd053e36247ff6137f47e36e94738edbc1aa6a","modified":1484275136828},{"_id":"public/categories/NodeJs/index.html","hash":"d71f0077f085d0cbd58b0864b92e38e9c23967d4","modified":1484275136828},{"_id":"public/categories/Life/index.html","hash":"5206adb6cb1180ccf48fb3ec6ecfd12813c0ad57","modified":1484275136828},{"_id":"public/categories/linux/index.html","hash":"03275e475a067c5511e3b678406b3fbaee439359","modified":1484275136829},{"_id":"public/categories/随笔/index.html","hash":"56ce73da77c8bb57c1230c55773ba81f15fa0cd9","modified":1484275136829},{"_id":"public/tags/Git-Push/index.html","hash":"4159125bbfe27319af5c29643bd6b0f3e524d216","modified":1484275136829},{"_id":"public/tags/正则表达式/index.html","hash":"8f57a85813f3516214d64868d725b91e16c3cd4b","modified":1484275136829},{"_id":"public/categories/自我反思/index.html","hash":"1ae819d09c2b84b1237d6f9cfdd02557dbe6c023","modified":1484275136829},{"_id":"public/tags/Nginx/index.html","hash":"d94c405acc128f284cbbc30df994ee0e0b8cc0b9","modified":1484275136829},{"_id":"public/tags/PHP/index.html","hash":"cbb1be3d6568b9dbe853bf4ea821d1536b197a1e","modified":1484275136829},{"_id":"public/tags/git-branch/index.html","hash":"d8f49106ad0318d573456291aa25aea9ac0c9e43","modified":1484275136829},{"_id":"public/tags/Nodejs/index.html","hash":"3d9d8e009ce739704050b5af2edde18ea7576f7b","modified":1484275136829},{"_id":"public/tags/NodeJs/index.html","hash":"4eee6e5e07d9e80b796237df77847e5de9ed5814","modified":1484275136829},{"_id":"public/tags/Life-Picture/index.html","hash":"2bb3a411cfee33e3627f3aa25ec59ecf9196af20","modified":1484275136830},{"_id":"public/tags/curl-json/index.html","hash":"776624b7055646c05a639cef10c0407ba98f853f","modified":1484275136830},{"_id":"public/tags/git-ssh-https/index.html","hash":"f1c7fe4ded2f53e67d512afab2c8301d1649f69e","modified":1484275136830},{"_id":"public/tags/php-linux-nginx/index.html","hash":"570a9bdfe7e9882c81465b8f66d7ed21a5791d75","modified":1484275136830},{"_id":"public/tags/Linux/index.html","hash":"fd11d516b83a3bdc5565f39ff1653c01977f0659","modified":1484275136830},{"_id":"public/tags/自我反思/index.html","hash":"ce617e9d390811b69685bc84f55e0fc68ef6b86a","modified":1484275136830},{"_id":"public/tags/随笔/index.html","hash":"4f2eca04f4d3c00ceea41598d2c7955a5715825a","modified":1484275136830},{"_id":"public/tags/消息队列-消息服务-阿里云/index.html","hash":"41ac6a6669d5ad7d8369b81a9244ce6f2027b852","modified":1484275136830},{"_id":"public/2016/11/22/Ubuntu搭建lnmp环境/index.html","hash":"5b17ced0bd303bbe36a8d36fea388cac2bc6e6b0","modified":1484275136830},{"_id":"public/2016/11/18/阿里云消息队列和消息服务的使用/index.html","hash":"7c7246769119e9a3453aebedcaee717d02126c5b","modified":1484275136830},{"_id":"public/2016/11/09/Linux-安装supervisor-CentOs-or-RedHat/index.html","hash":"072a8d4d8fab3dc9328a51346995182647c7d8b9","modified":1484275136830},{"_id":"public/2016/10/17/PHP使用fastcgi-finish-request-提高响应/index.html","hash":"a376aca7fc4ea5d36ec72d2c59bf93b0f4294f10","modified":1484275136830},{"_id":"public/2016/09/23/PHP-零散函数（一）/index.html","hash":"c3bb6d30da816acac35c5c72247e09d71ad74513","modified":1484275136830},{"_id":"public/2016/09/02/Git-Push-出现错误处理/index.html","hash":"4c68ccef33519979d73abdc884c137c1d290b896","modified":1484275136830},{"_id":"public/2016/08/26/Nodejs-使用pm2实现开机自启/index.html","hash":"2107cfc9b99239cee880fdb7c622fca394eb757b","modified":1484275136830},{"_id":"public/2016/09/09/PHP实现RSA加密、解密操作/index.html","hash":"390fb08b236d8b78e7ec682dc783fa77abc283db","modified":1484275136830},{"_id":"public/2016/08/23/PHP-UTC转GMT时区/index.html","hash":"4c6644b77c9b997d07990a4c97179f1d24b6f3aa","modified":1484275136830},{"_id":"public/2016/08/26/关于多个chatbot的调研结果/index.html","hash":"28fc99870c2f23e206470c92a3cf0aee9b82dc44","modified":1484275136830},{"_id":"public/2016/07/31/Git-分支（branch）的使用整理/index.html","hash":"7b9371a71102b2653825af03c2cff82959dbbe4c","modified":1484275136830},{"_id":"public/2016/07/31/Nginx配置虚拟主机/index.html","hash":"8e7ac35a503ffafaf2bd2e49b6764127a44eaacb","modified":1484275136830},{"_id":"public/2016/09/02/读《代码整洁之道》/index.html","hash":"097405a1e0a2da58d12231584e91fe2d780a7d79","modified":1484275136830},{"_id":"public/2016/08/03/一些杂谈琐事—-—-———-自我反思/index.html","hash":"cb7f23e2e32207a0a3659e257b1f997ae863dc63","modified":1484275136830},{"_id":"public/2016/07/27/SSH和HTTPS互相切换/index.html","hash":"e4a1324d4957dc8bb2ad0b9c472606996a2e8f90","modified":1484275136831},{"_id":"public/2016/07/25/PHP-curl传送json数据/index.html","hash":"dcc49c84f2a7e86785f1fb61b5be10c234fdb0dd","modified":1484275136831},{"_id":"public/archives/index.html","hash":"01f2800eb38d1a8aa8b54d1a1808f53d3d04c61d","modified":1484275136831},{"_id":"public/archives/page/2/index.html","hash":"e384d5d758ad3cfe8fe3a49a850edd5c0f456050","modified":1484275136831},{"_id":"public/archives/2016/index.html","hash":"f14e66de00996922c376f22c9a1df48a6bd08f9c","modified":1484275136831},{"_id":"public/archives/2016/page/2/index.html","hash":"ffec76afabc16899541dfa1e1f5409e24f5e7fab","modified":1484275136831},{"_id":"public/archives/2016/07/index.html","hash":"048e6f41632400d359bd75d4adcdf3ee6bf559af","modified":1484275136831},{"_id":"public/2016/07/29/15个PHP开发者常用的正则表达式及实例/index.html","hash":"8b8a5aed00679161dae3b3c369321ea0ddee2841","modified":1484275136831},{"_id":"public/categories/PHP/index.html","hash":"667d80c5a8a11320130fedb8fb24b9b262b9429f","modified":1484275136831},{"_id":"public/index.html","hash":"4c0c9e8cd26bcf1c53717d3de55672f8ac9ccbd2","modified":1484275136831},{"_id":"public/page/3/index.html","hash":"edc264dbb4d83be11139a48ae9d95c88c7a734bb","modified":1484275136831},{"_id":"public/page/2/index.html","hash":"7dc5dce5c5b2c7999529ef1ec4c41b9d46418356","modified":1484275136831},{"_id":"public/highlightjs/brown_papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1484275136835},{"_id":"public/highlightjs/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1484275136835},{"_id":"public/highlightjs/school_book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1484275136835},{"_id":"public/fonts/icons.eot","hash":"e307fc2d61d13bbc3aafc9abd75e727cbebadee1","modified":1484275137174},{"_id":"public/fonts/icons.woff","hash":"af538de6ac19d5da1cada203c7451ce32f5daceb","modified":1484275137174},{"_id":"public/fonts/icons.ttf","hash":"2169592997f694ffa05b1d4c23d5a1abf35d3203","modified":1484275137177},{"_id":"public/img/favicon.ico","hash":"70fbd67d92be00781652fed26bda9af8d931fb0a","modified":1484275137177},{"_id":"public/img/logo.png","hash":"d40339b65179865c59d99fcbc6cd33618eef9ba3","modified":1484275137177},{"_id":"public/img/close.png","hash":"e52e6a61877efd98ddad9ca31ece27e8ee977327","modified":1484275137177},{"_id":"public/css/iconList.css","hash":"f78ffffb4be40a6b0eb6ee109c958ccd062d1ae5","modified":1484275137180},{"_id":"public/css/slidebars.min.css","hash":"a802c15d9bf06005b463901be8325d8ce38b5b04","modified":1484275137180},{"_id":"public/css/ie8.css","hash":"cfdfe07ecc9f3afa5bab47155b49f0924f62d2c2","modified":1484275137184},{"_id":"public/highlightjs/ascetic.css","hash":"ef259aecdc8f1367dcf890d6467369300c4c0d07","modified":1484275137184},{"_id":"public/css/screen.css","hash":"a13c2c6fe420f76083df2da6d7b2d765dd8b467e","modified":1484275137184},{"_id":"public/css/flexslider.css","hash":"faebc8c54ca41e3c9936edaffbabbebd512c6d5a","modified":1484275137184},{"_id":"public/css/syntax.css","hash":"98f3ec6235c18c73e8ba8d51e10d628726014c4d","modified":1484275137184},{"_id":"public/highlightjs/brown_paper.css","hash":"2a987d30dd142a5c316ace70e919e3312707ebbd","modified":1484275137184},{"_id":"public/highlightjs/arta.css","hash":"08766ac9d70bde457fea9c553140029f57ace65a","modified":1484275137184},{"_id":"public/highlightjs/dark.css","hash":"2c2b4eb2562d812d95a26da0ffae51371b383713","modified":1484275137184},{"_id":"public/css/custom.css","hash":"02e701a0dddde40f940df04f48aa3b0e27fd9f5b","modified":1484275137184},{"_id":"public/highlightjs/default.css","hash":"108ad8410aa3004eafc452ae60771a2ae24d7988","modified":1484275137184},{"_id":"public/highlightjs/far.css","hash":"8178ac70abe577ae8345f1f6291bf7d489ad384d","modified":1484275137184},{"_id":"public/highlightjs/docco.css","hash":"70199b44d688d0a22851bd5481260f24160a38ee","modified":1484275137184},{"_id":"public/highlightjs/foundation.css","hash":"308c2e0458fc117b323f7d9ce1644f7b4e52d99e","modified":1484275137184},{"_id":"public/highlightjs/idea.css","hash":"fb77c293850c454c1f0c72628c0b301537765ad2","modified":1484275137184},{"_id":"public/highlightjs/ir_black.css","hash":"2da52e8562b412039b5816e1a3a2f59e7dff0c27","modified":1484275137184},{"_id":"public/highlightjs/googlecode.css","hash":"731e74bcdfd1b68aae5b5805540f727c31309ba2","modified":1484275137184},{"_id":"public/highlightjs/github.css","hash":"53f47e65e6e0e6068baf5c4b638b04d2f4e0b0bc","modified":1484275137184},{"_id":"public/highlightjs/mono-blue.css","hash":"c143e9d8c62dc71ca39bc0b6c127464ed2396e4f","modified":1484275137184},{"_id":"public/highlightjs/monokai.css","hash":"a0edb8327c191516a04d456db8aae9044055a5cf","modified":1484275137184},{"_id":"public/highlightjs/magula.css","hash":"9c53982a77259331c1dc3b24ef744dd76b3fe643","modified":1484275137184},{"_id":"public/highlightjs/monokai_sublime.css","hash":"6b4716416b1bba643d3a7926221ce6d83a139141","modified":1484275137184},{"_id":"public/css/animate.css","hash":"fca75b84887199a0ed8e0f056ff30f5a1302f324","modified":1484275137184},{"_id":"public/highlightjs/pojoaque.css","hash":"c9b048dc71c5b45d5cb3daac8f332a7e5d13b20f","modified":1484275137185},{"_id":"public/highlightjs/obsidian.css","hash":"d6c264e1973beb9f20001b9a4013e9983923b34e","modified":1484275137185},{"_id":"public/highlightjs/rainbow.css","hash":"b0e18f0f7fa08d5ad11956e2d9cc5e2ffdd514f3","modified":1484275137185},{"_id":"public/css/animsition.min.css","hash":"59033074f6594a0d87c759e2b8cf9baa3a62ed6a","modified":1484275137185},{"_id":"public/css/all.css","hash":"efd3daed8bbd2bb6cc1a56710053de9b5449278b","modified":1484275137185},{"_id":"public/fonts/icons.svg","hash":"12bf62bc3a7ba0fa5315a72fbf0bb9b99766a60c","modified":1484275137185},{"_id":"public/highlightjs/railscasts.css","hash":"aeb6ecd79552b9611d447fe56de5266954ea055c","modified":1484275137189},{"_id":"public/highlightjs/tomorrow-night-eighties.css","hash":"9603bc778de2dabd0ce1e7ee272a047338a8b99c","modified":1484275137189},{"_id":"public/highlightjs/solarized_dark.css","hash":"007f9f1e7addf7e2040734cd1f733d041432c335","modified":1484275137189},{"_id":"public/highlightjs/tomorrow-night.css","hash":"48cd18ce93daa491d89eb63e5fe3ab640ff56d74","modified":1484275137189},{"_id":"public/highlightjs/tomorrow-night-bright.css","hash":"afdb004743a8d2b52d38c7a1fce32d631a0f3ded","modified":1484275137189},{"_id":"public/highlightjs/school_book.css","hash":"f257d41cdca2609fa4c664df9cc14b48e2bcb09f","modified":1484275137189},{"_id":"public/highlightjs/vs.css","hash":"13e2f7ec2e197d79f4fc36768ea4a0663d41e1c0","modified":1484275137189},{"_id":"public/highlightjs/tomorrow.css","hash":"a184e23b28b6a6401ecfc35e0a94de0bada589e4","modified":1484275137189},{"_id":"public/highlightjs/zenburn.css","hash":"73dafd21563f5fc3bb74856d4abf97c447a27772","modified":1484275137189},{"_id":"public/highlightjs/xcode.css","hash":"78cb5758ce4085aa51edb6c5beb64d8f4511edd7","modified":1484275137189},{"_id":"public/js/html5shiv.min.js","hash":"bb51a5f6c394989bb06e4171179354c6d05ec8f8","modified":1484275137189},{"_id":"public/js/jquery.ajaxchimp.min.js","hash":"9be17785b0d816e1cd6bc45908e1805e0522fe18","modified":1484275137189},{"_id":"public/js/respond.min.js","hash":"b5aba40d65b0d6f85859db47f757ea971a0efd30","modified":1484275137189},{"_id":"public/js/scripts.js","hash":"4e4ebd697d00d3d0fcea7cbf78f5a7312e2f22ed","modified":1484275137189},{"_id":"public/highlightjs/solarized_light.css","hash":"a85878fd70ecd03c71944df1acbbf320bac7979f","modified":1484275137189},{"_id":"public/highlightjs/sunburst.css","hash":"e72bc116795505c1fcae35bc69045043fc34a243","modified":1484275137189},{"_id":"public/highlightjs/tomorrow-night-blue.css","hash":"e2bed22abcdf3f2b8ca3a1a73624751d3edc4e64","modified":1484275137189},{"_id":"public/js/jquery.flexslider-min.js","hash":"51b3a7d882f438d53dc69ca5289e92254160c09a","modified":1484275137189},{"_id":"public/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1484275137189},{"_id":"public/js/jquery-1.11.1.min.js","hash":"d6c1f41972de07b09bfa63d2e50f9ab41ec372bd","modified":1484275137190},{"_id":"public/css/style.css","hash":"6bd4bd6a2f74b1c00f5c485e4712c00cbdc2117b","modified":1484275137190},{"_id":"public/js/plugins.min.js","hash":"5d2edd4ecc4b27af81a3255ca8a253d23fc518e1","modified":1484275137190},{"_id":"public/img/blog.png","hash":"cca602b5c4158de6bf79e749511e8ed89b924635","modified":1484275137195},{"_id":"public/img/1.jpg","hash":"63ce0452832831e46097c7cd400bdcb2d01ad6ef","modified":1484275137197},{"_id":"public/img/bg_img.jpg","hash":"63ce0452832831e46097c7cd400bdcb2d01ad6ef","modified":1484275137198}],"Category":[{"name":"Git","_id":"cixv73clp0003ugqmo90sjfyr"},{"name":"PHP","_id":"cixv73clr0005ugqmbo2x9nyq"},{"name":"Linux","_id":"cixv73cmc000hugqm3rgjbjam"},{"name":"NodeJs","_id":"cixv73cn0000zugqmfuhzng7x"},{"name":"Life","_id":"cixv73cne001kugqm4kq8nfwu"},{"name":"linux","_id":"cixv73cnk001rugqm4nrl0mje"},{"name":"自我反思","_id":"cixv73cns001zugqmms6hai4t"},{"name":"随笔","_id":"cixv73cnu0025ugqmx8rcd7al"}],"Data":[],"Page":[{"title":"categories","date":"2016-08-07T10:09:25.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-08-07 18:09:25\n---\n","updated":"2016-08-07T10:09:25.685Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cixv73cm4000bugqmdagof6u1","content":"","excerpt":"","more":""},{"title":"About","date":"2016-07-28T12:52:37.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: About\ndate: 2016-07-28 20:52:37\n---\n","updated":"2016-07-29T01:46:27.374Z","path":"about/index.html","comments":1,"layout":"page","_id":"cixv73cm7000dugqmv9n1yw2n","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-08-07T10:09:08.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-08-07 18:09:08\n---\n","updated":"2016-08-07T10:09:08.218Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cixv73cma000gugqmloum6p37","content":"","excerpt":"","more":""}],"Post":[{"title":"Git Push 出现错误处理","date":"2016-09-02T06:44:54.000Z","_content":"\n\n#### 这几次一直使用`git push`出现如下错误，百度一直没有找到好的解决办法\n```bash\nremote: error: insufficient permission for adding an object to repository database ./objects\nremote: fatal: failed to write object\nerror: unpack failed: unpack-objects abnormal exit\nTo git@GIT-ADDRESS\n ! [remote rejected] develop -> develop (unpacker error)\nerror: failed to push some refs to 'git@GIT-ADDRESS'\n```\n#### 基本上每次都是绕开：\n```bash\n$ git remote set-url origin HTTPS\n#HTTPS 为https的项目地址\n$ git push\n#输入用户名\n#输入密码\n```\n\n#### 今天终于找到了解决办法：\n```bash\n#切换为ssh\n$ git config --global push.default matching\n$ git push\n```\n\n#### 拓展：\n\n```bash\n$ git push origin master\n```\n上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。\n\n```bash\n$ git push origin\n# git push\n```\n上面命令表示，将当前分支推送到origin主机的对应分支。\n\n不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。\n\n```bash\n$ git config --global push.default matching\n# 或者\n$ git config --global push.default simple\n```\n\n```bash\n$ git push --force origin\n```\n\n上面命令使用–force选项，结果导致在远程主机产生一个”非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用–force选项。","source":"_posts/Git-Push-出现错误处理.md","raw":"---\ntitle: Git Push 出现错误处理\ndate: 2016-09-02 14:44:54\ntags: Git Push\ncategories: Git\n---\n\n\n#### 这几次一直使用`git push`出现如下错误，百度一直没有找到好的解决办法\n```bash\nremote: error: insufficient permission for adding an object to repository database ./objects\nremote: fatal: failed to write object\nerror: unpack failed: unpack-objects abnormal exit\nTo git@GIT-ADDRESS\n ! [remote rejected] develop -> develop (unpacker error)\nerror: failed to push some refs to 'git@GIT-ADDRESS'\n```\n#### 基本上每次都是绕开：\n```bash\n$ git remote set-url origin HTTPS\n#HTTPS 为https的项目地址\n$ git push\n#输入用户名\n#输入密码\n```\n\n#### 今天终于找到了解决办法：\n```bash\n#切换为ssh\n$ git config --global push.default matching\n$ git push\n```\n\n#### 拓展：\n\n```bash\n$ git push origin master\n```\n上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。\n\n```bash\n$ git push origin\n# git push\n```\n上面命令表示，将当前分支推送到origin主机的对应分支。\n\n不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。\n\n```bash\n$ git config --global push.default matching\n# 或者\n$ git config --global push.default simple\n```\n\n```bash\n$ git push --force origin\n```\n\n上面命令使用–force选项，结果导致在远程主机产生一个”非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用–force选项。","slug":"Git-Push-出现错误处理","published":1,"updated":"2017-01-13T02:38:28.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73clf0000ugqm4zd6hcw9","content":"<h4 id=\"这几次一直使用git-push出现如下错误，百度一直没有找到好的解决办法\"><a href=\"#这几次一直使用git-push出现如下错误，百度一直没有找到好的解决办法\" class=\"headerlink\" title=\"这几次一直使用git push出现如下错误，百度一直没有找到好的解决办法\"></a>这几次一直使用<code>git push</code>出现如下错误，百度一直没有找到好的解决办法</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">remote: error: insufficient permission <span class=\"keyword\">for</span> adding an object to repository database ./objects</div><div class=\"line\">remote: fatal: failed to write object</div><div class=\"line\">error: unpack failed: unpack-objects abnormal <span class=\"built_in\">exit</span></div><div class=\"line\">To git@GIT-ADDRESS</div><div class=\"line\"> ! [remote rejected] develop -&gt; develop (unpacker error)</div><div class=\"line\">error: failed to push some refs to <span class=\"string\">'git@GIT-ADDRESS'</span></div></pre></td></tr></table></figure>\n<h4 id=\"基本上每次都是绕开：\"><a href=\"#基本上每次都是绕开：\" class=\"headerlink\" title=\"基本上每次都是绕开：\"></a>基本上每次都是绕开：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote <span class=\"built_in\">set</span>-url origin HTTPS</div><div class=\"line\"><span class=\"comment\">#HTTPS 为https的项目地址</span></div><div class=\"line\">$ git push</div><div class=\"line\"><span class=\"comment\">#输入用户名</span></div><div class=\"line\"><span class=\"comment\">#输入密码</span></div></pre></td></tr></table></figure>\n<h4 id=\"今天终于找到了解决办法：\"><a href=\"#今天终于找到了解决办法：\" class=\"headerlink\" title=\"今天终于找到了解决办法：\"></a>今天终于找到了解决办法：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#切换为ssh</span></div><div class=\"line\">$ git config --global push.default matching</div><div class=\"line\">$ git push</div></pre></td></tr></table></figure>\n<h4 id=\"拓展：\"><a href=\"#拓展：\" class=\"headerlink\" title=\"拓展：\"></a>拓展：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push origin master</div></pre></td></tr></table></figure>\n<p>上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push origin</div><div class=\"line\"><span class=\"comment\"># git push</span></div></pre></td></tr></table></figure>\n<p>上面命令表示，将当前分支推送到origin主机的对应分支。</p>\n<p>不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --global push.default matching</div><div class=\"line\"><span class=\"comment\"># 或者</span></div><div class=\"line\">$ git config --global push.default simple</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push --force origin</div></pre></td></tr></table></figure>\n<p>上面命令使用–force选项，结果导致在远程主机产生一个”非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用–force选项。</p>\n","excerpt":"","more":"<h4 id=\"这几次一直使用git-push出现如下错误，百度一直没有找到好的解决办法\"><a href=\"#这几次一直使用git-push出现如下错误，百度一直没有找到好的解决办法\" class=\"headerlink\" title=\"这几次一直使用git push出现如下错误，百度一直没有找到好的解决办法\"></a>这几次一直使用<code>git push</code>出现如下错误，百度一直没有找到好的解决办法</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">remote: error: insufficient permission <span class=\"keyword\">for</span> adding an object to repository database ./objects</div><div class=\"line\">remote: fatal: failed to write object</div><div class=\"line\">error: unpack failed: unpack-objects abnormal <span class=\"built_in\">exit</span></div><div class=\"line\">To git@GIT-ADDRESS</div><div class=\"line\"> ! [remote rejected] develop -&gt; develop (unpacker error)</div><div class=\"line\">error: failed to push some refs to <span class=\"string\">'git@GIT-ADDRESS'</span></div></pre></td></tr></table></figure>\n<h4 id=\"基本上每次都是绕开：\"><a href=\"#基本上每次都是绕开：\" class=\"headerlink\" title=\"基本上每次都是绕开：\"></a>基本上每次都是绕开：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote <span class=\"built_in\">set</span>-url origin HTTPS</div><div class=\"line\"><span class=\"comment\">#HTTPS 为https的项目地址</span></div><div class=\"line\">$ git push</div><div class=\"line\"><span class=\"comment\">#输入用户名</span></div><div class=\"line\"><span class=\"comment\">#输入密码</span></div></pre></td></tr></table></figure>\n<h4 id=\"今天终于找到了解决办法：\"><a href=\"#今天终于找到了解决办法：\" class=\"headerlink\" title=\"今天终于找到了解决办法：\"></a>今天终于找到了解决办法：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#切换为ssh</span></div><div class=\"line\">$ git config --global push.default matching</div><div class=\"line\">$ git push</div></pre></td></tr></table></figure>\n<h4 id=\"拓展：\"><a href=\"#拓展：\" class=\"headerlink\" title=\"拓展：\"></a>拓展：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push origin master</div></pre></td></tr></table></figure>\n<p>上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push origin</div><div class=\"line\"><span class=\"comment\"># git push</span></div></pre></td></tr></table></figure>\n<p>上面命令表示，将当前分支推送到origin主机的对应分支。</p>\n<p>不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --global push.default matching</div><div class=\"line\"><span class=\"comment\"># 或者</span></div><div class=\"line\">$ git config --global push.default simple</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push --force origin</div></pre></td></tr></table></figure>\n<p>上面命令使用–force选项，结果导致在远程主机产生一个”非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用–force选项。</p>\n"},{"title":"15个PHP开发者常用的正则表达式及实例","date":"2016-07-29T07:17:42.000Z","_content":"\n> 从字符串中删除特定字符\n> 本段代码实现删除字符串中除所有大小写字母及数字以外的字符\n\n```php\n<?php\n$value = \"wWw.UncleToo.Com - 【UncleToo中文网】 - 12345\";\n$value = preg_replace(\"/[^A-Za-z0-9]/\",\"\",$value);\necho $value;\n//输出：wWwUncleTooComUncleToo12345\n?>\n```\n\n> 验证用户名\n> 以下代码验证用户名是否由字母、数字及下划线组成。\n\n```php\n<?php\n$username = \"uncletoo_COM123\";\nif (preg_match('/^[a-z\\d_]{5,20}$/i', $username)) {\n    echo \"用户名可用\";\n} else {\n    echo \"用户名存在特殊字符\";\n}\n?>\n```\n\n> 添加信息到图片alt属性\n> 使用下面函数，可以实现将文章标题添加到图片的alt属性中。\n\n```php\n<?php\nfunction add_alt_tags($content) {\n\tglobal $post;\n\tpreg_match_all('/<img (.*?)\\/ >/', $content, $images);\n\tif(!is_null($images)) {\n\t\tforeach($images[1] as $index => $value) {\n\t\t\tif(!preg_match('/alt=/', $value)) {\n\t\t\t\t$new_img = str_replace('<img', '<img alt=\"'.get_the_title().'\"', $images[0][$index]);\n\t\t\t\t$content = str_replace($images[0][$index], $new_img, $content);\n\t\t\t}\n\t\t}\n\t}\n\treturn $content;\n}\n?>\n```\n\n\n> 将EMail文本自动添加Mailto链接\n\n```php\n<?php\n$text = \"demo@abc.com\";\n$string = eregi_replace('([_\\.0-9a-z-]+@([0-9a-z][0-9a-z-]+\\.)+[a-z]{2,3})','<a href=\"mailto:\\\\1\">\\\\1</ a>', $text);\necho $string;\n?>\n```\n\n> 过滤限制级词语\n\n```php\n<?php\nfunction filtrado($texto, $reemplazo = false) {\n\t$filtradas = 'admin,uncletoo,中文网'; //这里定义需要过滤的词语\n\t$f = explode(',', $filtradas);\n\t$f = array_map('trim', $f);\n\t$filtro = implode('|', $f);\n\treturn ($reemplazo) ? preg_replace(\"#$filtro#i\", $reemplazo, $texto) : preg_match(\"#$filtro#i\", $texto) ;\n}\n?>\n```\n\n> 验证电话号码\n> 这是一个很常见的功能\n\n```php\n<?php\n$string = \"(010) 555-5555\";\nif (preg_match('/^\\(?[0-9]{3}\\)?|[0-9]{3}[-. ]? [0-9]{3}[-. ]?[0-9]{4}$/', $string)) {\n   echo \"successful.\";\n}\n?>\n```\n\n> 替换超链接href属性的内容\n> 在页面上查看源文件，显示为：&lt; a href=\"yes\" &gt;UncleToo中文网&lt; /a&gt;\n\n```php\n<?php\n$html = '<a href=\"http://www.uncletoo.com\">UncleToo中文网</a>';\n$replacement = \"yes\";\n$pattern = '/(?<=href\\=\")[^]]+?(?=\")/';\n$replacedHrefHtml = preg_replace($pattern, $replacement, $html);\necho $replacedHrefHtml ;\n?>\n```\n\n> 验证邮箱正则表达式\n> 此功能在用户注册是经常使用\n\n```php\n<?php\n$regex = \"([a-z0-9_.-]+)\". # name\n\"@\". # at\n\"([a-z0-9.-]+){2,255}\". # domain & possibly subdomains\n\".\". # period\n\"([a-z]+){2,10}\"; # domain extension\n$eregi = eregi_replace($regex, '', $email);\n$valid_email = empty($eregi) ? true : false;\n?>\n```\n\n> IP地址验证\n \n```php\n<?php\n$string = \"255.255.255.255\";\nif (preg_match(\n'/^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:[.](?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$/', $string)) {\n\techo \"IP address is good.\";\n}\n?>\n```\n\n> 邮政编码验证\n\n```php\n<?php\n$string = \"12345-1234\";\nif (preg_match('/^[0-9]{5}([- ]?[0-9]{4})?$/', $string)) {\n\techo \"zip code checks out\";\n}\n?>\n```\n\n> 高亮显示文本\n\n```php\n<?php\n$text = \"UncleToo（www.uncletoo.com）中文网\";\n$text = preg_replace(\"/\\b(www)\\b/i\", '<span style=\"background:#5fc9f6\">\\1</ span>',$text);\necho $text;\n?>\n```\n\n> 从特定的URL中提取域名\n\n```php\n<?php\n$url = \"http://www.uncletoo.com/plug/tags/?tag=PHP\";\npreg_match('@^(?:http://)?([^/]+)@i', $url, $matches);\n$host = $matches[1];\necho $host;\n//输出：www.uncletoo.com\n?>\n```\n\n> 验证域名格式是否正确\n\n```php\n<?php\n$url = \"http://www.uncletoo.com/\";\nif (preg_match('/^(http|https|ftp):\\/\\/([A-Z0-9][A-Z0-9_-]*(?:\\.[A-Z0-9][A-Z0-9_-]*)+):?(\\d+)?\\/?/i', $url)) {\n    echo \"域名格式正确.\";\n} else {\n    echo \"域名格式错误.\";\n}\n?>\n```\n\n> 使用文章标题生成URL\n\n```php\n<?php\nfunction create_slug($string){\n   $slug=preg_replace('/[^A-Za-z0-9-]+/', '-', $string);\n   return $slug;\n}\necho create_slug('my name is uncletoo');\n//输出：my-name-is-uncletoo\n?>\n```\n\n> 添加http://到URL地址\n> 当我们需要用户填写网址时，很多用户往往不填写http://直接输入域名，使用下面代码可将http://添加到网址的前面。\n\n```php\n<?php\nif (!preg_match(\"/^(http|https|ftp):/\", $_POST['url'])) {\n   $_POST['url'] = 'http://'.$_POST['url'];\n}\n?>\n```\n\n> 将URL转换为超链接\n> 这时一个很有用的功能，他可以将url地址或email地址转换为可点击的超链接文本。\n\n```php\n<?php\nfunction makeLinks($text) {\n\t$text = eregi_replace('(((f|ht){1}tp://)[-a-zA-Z0-9@:%_+.~#?&//=]+)','\\1', $text);\n\t$text = eregi_replace('([[:space:]()[{}])(www.[-a-zA-Z0-9@:%_+.~#?&//=]+)','\\1\\2',$text);\n\t$text = eregi_replace('([_.0-9a-z-]+@([0-9a-z][0-9a-z-]+.)+[a-z]{2,3})','\\1', $text);\n\treturn $text;\n}\n?>\n```\n","source":"_posts/15个PHP开发者常用的正则表达式及实例.md","raw":"---\ntitle: 15个PHP开发者常用的正则表达式及实例\ndate: 2016-07-29 15:17:42\ntags: 正则表达式\ncategories: PHP\n---\n\n> 从字符串中删除特定字符\n> 本段代码实现删除字符串中除所有大小写字母及数字以外的字符\n\n```php\n<?php\n$value = \"wWw.UncleToo.Com - 【UncleToo中文网】 - 12345\";\n$value = preg_replace(\"/[^A-Za-z0-9]/\",\"\",$value);\necho $value;\n//输出：wWwUncleTooComUncleToo12345\n?>\n```\n\n> 验证用户名\n> 以下代码验证用户名是否由字母、数字及下划线组成。\n\n```php\n<?php\n$username = \"uncletoo_COM123\";\nif (preg_match('/^[a-z\\d_]{5,20}$/i', $username)) {\n    echo \"用户名可用\";\n} else {\n    echo \"用户名存在特殊字符\";\n}\n?>\n```\n\n> 添加信息到图片alt属性\n> 使用下面函数，可以实现将文章标题添加到图片的alt属性中。\n\n```php\n<?php\nfunction add_alt_tags($content) {\n\tglobal $post;\n\tpreg_match_all('/<img (.*?)\\/ >/', $content, $images);\n\tif(!is_null($images)) {\n\t\tforeach($images[1] as $index => $value) {\n\t\t\tif(!preg_match('/alt=/', $value)) {\n\t\t\t\t$new_img = str_replace('<img', '<img alt=\"'.get_the_title().'\"', $images[0][$index]);\n\t\t\t\t$content = str_replace($images[0][$index], $new_img, $content);\n\t\t\t}\n\t\t}\n\t}\n\treturn $content;\n}\n?>\n```\n\n\n> 将EMail文本自动添加Mailto链接\n\n```php\n<?php\n$text = \"demo@abc.com\";\n$string = eregi_replace('([_\\.0-9a-z-]+@([0-9a-z][0-9a-z-]+\\.)+[a-z]{2,3})','<a href=\"mailto:\\\\1\">\\\\1</ a>', $text);\necho $string;\n?>\n```\n\n> 过滤限制级词语\n\n```php\n<?php\nfunction filtrado($texto, $reemplazo = false) {\n\t$filtradas = 'admin,uncletoo,中文网'; //这里定义需要过滤的词语\n\t$f = explode(',', $filtradas);\n\t$f = array_map('trim', $f);\n\t$filtro = implode('|', $f);\n\treturn ($reemplazo) ? preg_replace(\"#$filtro#i\", $reemplazo, $texto) : preg_match(\"#$filtro#i\", $texto) ;\n}\n?>\n```\n\n> 验证电话号码\n> 这是一个很常见的功能\n\n```php\n<?php\n$string = \"(010) 555-5555\";\nif (preg_match('/^\\(?[0-9]{3}\\)?|[0-9]{3}[-. ]? [0-9]{3}[-. ]?[0-9]{4}$/', $string)) {\n   echo \"successful.\";\n}\n?>\n```\n\n> 替换超链接href属性的内容\n> 在页面上查看源文件，显示为：&lt; a href=\"yes\" &gt;UncleToo中文网&lt; /a&gt;\n\n```php\n<?php\n$html = '<a href=\"http://www.uncletoo.com\">UncleToo中文网</a>';\n$replacement = \"yes\";\n$pattern = '/(?<=href\\=\")[^]]+?(?=\")/';\n$replacedHrefHtml = preg_replace($pattern, $replacement, $html);\necho $replacedHrefHtml ;\n?>\n```\n\n> 验证邮箱正则表达式\n> 此功能在用户注册是经常使用\n\n```php\n<?php\n$regex = \"([a-z0-9_.-]+)\". # name\n\"@\". # at\n\"([a-z0-9.-]+){2,255}\". # domain & possibly subdomains\n\".\". # period\n\"([a-z]+){2,10}\"; # domain extension\n$eregi = eregi_replace($regex, '', $email);\n$valid_email = empty($eregi) ? true : false;\n?>\n```\n\n> IP地址验证\n \n```php\n<?php\n$string = \"255.255.255.255\";\nif (preg_match(\n'/^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:[.](?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$/', $string)) {\n\techo \"IP address is good.\";\n}\n?>\n```\n\n> 邮政编码验证\n\n```php\n<?php\n$string = \"12345-1234\";\nif (preg_match('/^[0-9]{5}([- ]?[0-9]{4})?$/', $string)) {\n\techo \"zip code checks out\";\n}\n?>\n```\n\n> 高亮显示文本\n\n```php\n<?php\n$text = \"UncleToo（www.uncletoo.com）中文网\";\n$text = preg_replace(\"/\\b(www)\\b/i\", '<span style=\"background:#5fc9f6\">\\1</ span>',$text);\necho $text;\n?>\n```\n\n> 从特定的URL中提取域名\n\n```php\n<?php\n$url = \"http://www.uncletoo.com/plug/tags/?tag=PHP\";\npreg_match('@^(?:http://)?([^/]+)@i', $url, $matches);\n$host = $matches[1];\necho $host;\n//输出：www.uncletoo.com\n?>\n```\n\n> 验证域名格式是否正确\n\n```php\n<?php\n$url = \"http://www.uncletoo.com/\";\nif (preg_match('/^(http|https|ftp):\\/\\/([A-Z0-9][A-Z0-9_-]*(?:\\.[A-Z0-9][A-Z0-9_-]*)+):?(\\d+)?\\/?/i', $url)) {\n    echo \"域名格式正确.\";\n} else {\n    echo \"域名格式错误.\";\n}\n?>\n```\n\n> 使用文章标题生成URL\n\n```php\n<?php\nfunction create_slug($string){\n   $slug=preg_replace('/[^A-Za-z0-9-]+/', '-', $string);\n   return $slug;\n}\necho create_slug('my name is uncletoo');\n//输出：my-name-is-uncletoo\n?>\n```\n\n> 添加http://到URL地址\n> 当我们需要用户填写网址时，很多用户往往不填写http://直接输入域名，使用下面代码可将http://添加到网址的前面。\n\n```php\n<?php\nif (!preg_match(\"/^(http|https|ftp):/\", $_POST['url'])) {\n   $_POST['url'] = 'http://'.$_POST['url'];\n}\n?>\n```\n\n> 将URL转换为超链接\n> 这时一个很有用的功能，他可以将url地址或email地址转换为可点击的超链接文本。\n\n```php\n<?php\nfunction makeLinks($text) {\n\t$text = eregi_replace('(((f|ht){1}tp://)[-a-zA-Z0-9@:%_+.~#?&//=]+)','\\1', $text);\n\t$text = eregi_replace('([[:space:]()[{}])(www.[-a-zA-Z0-9@:%_+.~#?&//=]+)','\\1\\2',$text);\n\t$text = eregi_replace('([_.0-9a-z-]+@([0-9a-z][0-9a-z-]+.)+[a-z]{2,3})','\\1', $text);\n\treturn $text;\n}\n?>\n```\n","slug":"15个PHP开发者常用的正则表达式及实例","published":1,"updated":"2016-07-31T04:05:27.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73clk0001ugqmfe1t21gt","content":"<blockquote>\n<p>从字符串中删除特定字符<br>本段代码实现删除字符串中除所有大小写字母及数字以外的字符</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$value = <span class=\"string\">\"wWw.UncleToo.Com - 【UncleToo中文网】 - 12345\"</span>;</div><div class=\"line\">$value = preg_replace(<span class=\"string\">\"/[^A-Za-z0-9]/\"</span>,<span class=\"string\">\"\"</span>,$value);</div><div class=\"line\"><span class=\"keyword\">echo</span> $value;</div><div class=\"line\"><span class=\"comment\">//输出：wWwUncleTooComUncleToo12345</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>验证用户名<br>以下代码验证用户名是否由字母、数字及下划线组成。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$username = <span class=\"string\">\"uncletoo_COM123\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (preg_match(<span class=\"string\">'/^[a-z\\d_]&#123;5,20&#125;$/i'</span>, $username)) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"用户名可用\"</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"用户名存在特殊字符\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>添加信息到图片alt属性<br>使用下面函数，可以实现将文章标题添加到图片的alt属性中。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add_alt_tags</span><span class=\"params\">($content)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">global</span> $post;</div><div class=\"line\">\tpreg_match_all(<span class=\"string\">'/&lt;img (.*?)\\/ &gt;/'</span>, $content, $images);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!is_null($images)) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">foreach</span>($images[<span class=\"number\">1</span>] <span class=\"keyword\">as</span> $index =&gt; $value) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!preg_match(<span class=\"string\">'/alt=/'</span>, $value)) &#123;</div><div class=\"line\">\t\t\t\t$new_img = str_replace(<span class=\"string\">'&lt;img'</span>, <span class=\"string\">'&lt;img alt=\"'</span>.get_the_title().<span class=\"string\">'\"'</span>, $images[<span class=\"number\">0</span>][$index]);</div><div class=\"line\">\t\t\t\t$content = str_replace($images[<span class=\"number\">0</span>][$index], $new_img, $content);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> $content;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>将EMail文本自动添加Mailto链接</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$text = <span class=\"string\">\"demo@abc.com\"</span>;</div><div class=\"line\">$string = eregi_replace(<span class=\"string\">'([_\\.0-9a-z-]+@([0-9a-z][0-9a-z-]+\\.)+[a-z]&#123;2,3&#125;)'</span>,<span class=\"string\">'&lt;a href=\"mailto:\\\\1\"&gt;\\\\1&lt;/ a&gt;'</span>, $text);</div><div class=\"line\"><span class=\"keyword\">echo</span> $string;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>过滤限制级词语</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filtrado</span><span class=\"params\">($texto, $reemplazo = false)</span> </span>&#123;</div><div class=\"line\">\t$filtradas = <span class=\"string\">'admin,uncletoo,中文网'</span>; <span class=\"comment\">//这里定义需要过滤的词语</span></div><div class=\"line\">\t$f = explode(<span class=\"string\">','</span>, $filtradas);</div><div class=\"line\">\t$f = array_map(<span class=\"string\">'trim'</span>, $f);</div><div class=\"line\">\t$filtro = implode(<span class=\"string\">'|'</span>, $f);</div><div class=\"line\">\t<span class=\"keyword\">return</span> ($reemplazo) ? preg_replace(<span class=\"string\">\"#$filtro#i\"</span>, $reemplazo, $texto) : preg_match(<span class=\"string\">\"#$filtro#i\"</span>, $texto) ;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>验证电话号码<br>这是一个很常见的功能</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$string = <span class=\"string\">\"(010) 555-5555\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (preg_match(<span class=\"string\">'/^\\(?[0-9]&#123;3&#125;\\)?|[0-9]&#123;3&#125;[-. ]? [0-9]&#123;3&#125;[-. ]?[0-9]&#123;4&#125;$/'</span>, $string)) &#123;</div><div class=\"line\">   <span class=\"keyword\">echo</span> <span class=\"string\">\"successful.\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>替换超链接href属性的内容<br>在页面上查看源文件，显示为：&lt; a href=”yes” &gt;UncleToo中文网&lt; /a&gt;</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$html = <span class=\"string\">'&lt;a href=\"http://www.uncletoo.com\"&gt;UncleToo中文网&lt;/a&gt;'</span>;</div><div class=\"line\">$replacement = <span class=\"string\">\"yes\"</span>;</div><div class=\"line\">$pattern = <span class=\"string\">'/(?&lt;=href\\=\")[^]]+?(?=\")/'</span>;</div><div class=\"line\">$replacedHrefHtml = preg_replace($pattern, $replacement, $html);</div><div class=\"line\"><span class=\"keyword\">echo</span> $replacedHrefHtml ;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>验证邮箱正则表达式<br>此功能在用户注册是经常使用</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$regex = <span class=\"string\">\"([a-z0-9_.-]+)\"</span>. <span class=\"comment\"># name</span></div><div class=\"line\"><span class=\"string\">\"@\"</span>. <span class=\"comment\"># at</span></div><div class=\"line\"><span class=\"string\">\"([a-z0-9.-]+)&#123;2,255&#125;\"</span>. <span class=\"comment\"># domain &amp; possibly subdomains</span></div><div class=\"line\"><span class=\"string\">\".\"</span>. <span class=\"comment\"># period</span></div><div class=\"line\"><span class=\"string\">\"([a-z]+)&#123;2,10&#125;\"</span>; <span class=\"comment\"># domain extension</span></div><div class=\"line\">$eregi = eregi_replace($regex, <span class=\"string\">''</span>, $email);</div><div class=\"line\">$valid_email = <span class=\"keyword\">empty</span>($eregi) ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>IP地址验证</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$string = <span class=\"string\">\"255.255.255.255\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (preg_match(</div><div class=\"line\"><span class=\"string\">'/^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:[.](?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d))&#123;3&#125;$/'</span>, $string)) &#123;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"IP address is good.\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>邮政编码验证</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$string = <span class=\"string\">\"12345-1234\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (preg_match(<span class=\"string\">'/^[0-9]&#123;5&#125;([- ]?[0-9]&#123;4&#125;)?$/'</span>, $string)) &#123;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"zip code checks out\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>高亮显示文本</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$text = <span class=\"string\">\"UncleToo（www.uncletoo.com）中文网\"</span>;</div><div class=\"line\">$text = preg_replace(<span class=\"string\">\"/\\b(www)\\b/i\"</span>, <span class=\"string\">'&lt;span style=\"background:#5fc9f6\"&gt;\\1&lt;/ span&gt;'</span>,$text);</div><div class=\"line\"><span class=\"keyword\">echo</span> $text;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>从特定的URL中提取域名</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$url = <span class=\"string\">\"http://www.uncletoo.com/plug/tags/?tag=PHP\"</span>;</div><div class=\"line\">preg_match(<span class=\"string\">'@^(?:http://)?([^/]+)@i'</span>, $url, $matches);</div><div class=\"line\">$host = $matches[<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">echo</span> $host;</div><div class=\"line\"><span class=\"comment\">//输出：www.uncletoo.com</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>验证域名格式是否正确</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$url = <span class=\"string\">\"http://www.uncletoo.com/\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (preg_match(<span class=\"string\">'/^(http|https|ftp):\\/\\/([A-Z0-9][A-Z0-9_-]*(?:\\.[A-Z0-9][A-Z0-9_-]*)+):?(\\d+)?\\/?/i'</span>, $url)) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"域名格式正确.\"</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"域名格式错误.\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>使用文章标题生成URL</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create_slug</span><span class=\"params\">($string)</span></span>&#123;</div><div class=\"line\">   $slug=preg_replace(<span class=\"string\">'/[^A-Za-z0-9-]+/'</span>, <span class=\"string\">'-'</span>, $string);</div><div class=\"line\">   <span class=\"keyword\">return</span> $slug;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">echo</span> create_slug(<span class=\"string\">'my name is uncletoo'</span>);</div><div class=\"line\"><span class=\"comment\">//输出：my-name-is-uncletoo</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>添加<a href=\"http://到URL地址\" target=\"_blank\" rel=\"external\">http://到URL地址</a><br>当我们需要用户填写网址时，很多用户往往不填写<a href=\"http://直接输入域名，使用下面代码可将http://添加到网址的前面。\" target=\"_blank\" rel=\"external\">http://直接输入域名，使用下面代码可将http://添加到网址的前面。</a></p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!preg_match(<span class=\"string\">\"/^(http|https|ftp):/\"</span>, $_POST[<span class=\"string\">'url'</span>])) &#123;</div><div class=\"line\">   $_POST[<span class=\"string\">'url'</span>] = <span class=\"string\">'http://'</span>.$_POST[<span class=\"string\">'url'</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>将URL转换为超链接<br>这时一个很有用的功能，他可以将url地址或email地址转换为可点击的超链接文本。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeLinks</span><span class=\"params\">($text)</span> </span>&#123;</div><div class=\"line\">\t$text = eregi_replace(<span class=\"string\">'(((f|ht)&#123;1&#125;tp://)[-a-zA-Z0-9@:%_+.~#?&amp;//=]+)'</span>,<span class=\"string\">'\\1'</span>, $text);</div><div class=\"line\">\t$text = eregi_replace(<span class=\"string\">'([[:space:]()[&#123;&#125;])(www.[-a-zA-Z0-9@:%_+.~#?&amp;//=]+)'</span>,<span class=\"string\">'\\1\\2'</span>,$text);</div><div class=\"line\">\t$text = eregi_replace(<span class=\"string\">'([_.0-9a-z-]+@([0-9a-z][0-9a-z-]+.)+[a-z]&#123;2,3&#125;)'</span>,<span class=\"string\">'\\1'</span>, $text);</div><div class=\"line\">\t<span class=\"keyword\">return</span> $text;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>从字符串中删除特定字符<br>本段代码实现删除字符串中除所有大小写字母及数字以外的字符</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$value = <span class=\"string\">\"wWw.UncleToo.Com - 【UncleToo中文网】 - 12345\"</span>;</div><div class=\"line\">$value = preg_replace(<span class=\"string\">\"/[^A-Za-z0-9]/\"</span>,<span class=\"string\">\"\"</span>,$value);</div><div class=\"line\"><span class=\"keyword\">echo</span> $value;</div><div class=\"line\"><span class=\"comment\">//输出：wWwUncleTooComUncleToo12345</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>验证用户名<br>以下代码验证用户名是否由字母、数字及下划线组成。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$username = <span class=\"string\">\"uncletoo_COM123\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (preg_match(<span class=\"string\">'/^[a-z\\d_]&#123;5,20&#125;$/i'</span>, $username)) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"用户名可用\"</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"用户名存在特殊字符\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>添加信息到图片alt属性<br>使用下面函数，可以实现将文章标题添加到图片的alt属性中。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add_alt_tags</span><span class=\"params\">($content)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">global</span> $post;</div><div class=\"line\">\tpreg_match_all(<span class=\"string\">'/&lt;img (.*?)\\/ &gt;/'</span>, $content, $images);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!is_null($images)) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">foreach</span>($images[<span class=\"number\">1</span>] <span class=\"keyword\">as</span> $index =&gt; $value) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!preg_match(<span class=\"string\">'/alt=/'</span>, $value)) &#123;</div><div class=\"line\">\t\t\t\t$new_img = str_replace(<span class=\"string\">'&lt;img'</span>, <span class=\"string\">'&lt;img alt=\"'</span>.get_the_title().<span class=\"string\">'\"'</span>, $images[<span class=\"number\">0</span>][$index]);</div><div class=\"line\">\t\t\t\t$content = str_replace($images[<span class=\"number\">0</span>][$index], $new_img, $content);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> $content;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>将EMail文本自动添加Mailto链接</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$text = <span class=\"string\">\"demo@abc.com\"</span>;</div><div class=\"line\">$string = eregi_replace(<span class=\"string\">'([_\\.0-9a-z-]+@([0-9a-z][0-9a-z-]+\\.)+[a-z]&#123;2,3&#125;)'</span>,<span class=\"string\">'&lt;a href=\"mailto:\\\\1\"&gt;\\\\1&lt;/ a&gt;'</span>, $text);</div><div class=\"line\"><span class=\"keyword\">echo</span> $string;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>过滤限制级词语</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filtrado</span><span class=\"params\">($texto, $reemplazo = false)</span> </span>&#123;</div><div class=\"line\">\t$filtradas = <span class=\"string\">'admin,uncletoo,中文网'</span>; <span class=\"comment\">//这里定义需要过滤的词语</span></div><div class=\"line\">\t$f = explode(<span class=\"string\">','</span>, $filtradas);</div><div class=\"line\">\t$f = array_map(<span class=\"string\">'trim'</span>, $f);</div><div class=\"line\">\t$filtro = implode(<span class=\"string\">'|'</span>, $f);</div><div class=\"line\">\t<span class=\"keyword\">return</span> ($reemplazo) ? preg_replace(<span class=\"string\">\"#$filtro#i\"</span>, $reemplazo, $texto) : preg_match(<span class=\"string\">\"#$filtro#i\"</span>, $texto) ;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>验证电话号码<br>这是一个很常见的功能</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$string = <span class=\"string\">\"(010) 555-5555\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (preg_match(<span class=\"string\">'/^\\(?[0-9]&#123;3&#125;\\)?|[0-9]&#123;3&#125;[-. ]? [0-9]&#123;3&#125;[-. ]?[0-9]&#123;4&#125;$/'</span>, $string)) &#123;</div><div class=\"line\">   <span class=\"keyword\">echo</span> <span class=\"string\">\"successful.\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>替换超链接href属性的内容<br>在页面上查看源文件，显示为：&lt; a href=”yes” &gt;UncleToo中文网&lt; /a&gt;</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$html = <span class=\"string\">'&lt;a href=\"http://www.uncletoo.com\"&gt;UncleToo中文网&lt;/a&gt;'</span>;</div><div class=\"line\">$replacement = <span class=\"string\">\"yes\"</span>;</div><div class=\"line\">$pattern = <span class=\"string\">'/(?&lt;=href\\=\")[^]]+?(?=\")/'</span>;</div><div class=\"line\">$replacedHrefHtml = preg_replace($pattern, $replacement, $html);</div><div class=\"line\"><span class=\"keyword\">echo</span> $replacedHrefHtml ;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>验证邮箱正则表达式<br>此功能在用户注册是经常使用</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$regex = <span class=\"string\">\"([a-z0-9_.-]+)\"</span>. <span class=\"comment\"># name</span></div><div class=\"line\"><span class=\"string\">\"@\"</span>. <span class=\"comment\"># at</span></div><div class=\"line\"><span class=\"string\">\"([a-z0-9.-]+)&#123;2,255&#125;\"</span>. <span class=\"comment\"># domain &amp; possibly subdomains</span></div><div class=\"line\"><span class=\"string\">\".\"</span>. <span class=\"comment\"># period</span></div><div class=\"line\"><span class=\"string\">\"([a-z]+)&#123;2,10&#125;\"</span>; <span class=\"comment\"># domain extension</span></div><div class=\"line\">$eregi = eregi_replace($regex, <span class=\"string\">''</span>, $email);</div><div class=\"line\">$valid_email = <span class=\"keyword\">empty</span>($eregi) ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>IP地址验证</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$string = <span class=\"string\">\"255.255.255.255\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (preg_match(</div><div class=\"line\"><span class=\"string\">'/^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:[.](?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d))&#123;3&#125;$/'</span>, $string)) &#123;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"IP address is good.\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>邮政编码验证</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$string = <span class=\"string\">\"12345-1234\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (preg_match(<span class=\"string\">'/^[0-9]&#123;5&#125;([- ]?[0-9]&#123;4&#125;)?$/'</span>, $string)) &#123;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">\"zip code checks out\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>高亮显示文本</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$text = <span class=\"string\">\"UncleToo（www.uncletoo.com）中文网\"</span>;</div><div class=\"line\">$text = preg_replace(<span class=\"string\">\"/\\b(www)\\b/i\"</span>, <span class=\"string\">'&lt;span style=\"background:#5fc9f6\"&gt;\\1&lt;/ span&gt;'</span>,$text);</div><div class=\"line\"><span class=\"keyword\">echo</span> $text;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>从特定的URL中提取域名</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$url = <span class=\"string\">\"http://www.uncletoo.com/plug/tags/?tag=PHP\"</span>;</div><div class=\"line\">preg_match(<span class=\"string\">'@^(?:http://)?([^/]+)@i'</span>, $url, $matches);</div><div class=\"line\">$host = $matches[<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">echo</span> $host;</div><div class=\"line\"><span class=\"comment\">//输出：www.uncletoo.com</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>验证域名格式是否正确</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$url = <span class=\"string\">\"http://www.uncletoo.com/\"</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (preg_match(<span class=\"string\">'/^(http|https|ftp):\\/\\/([A-Z0-9][A-Z0-9_-]*(?:\\.[A-Z0-9][A-Z0-9_-]*)+):?(\\d+)?\\/?/i'</span>, $url)) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"域名格式正确.\"</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"域名格式错误.\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>使用文章标题生成URL</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create_slug</span><span class=\"params\">($string)</span></span>&#123;</div><div class=\"line\">   $slug=preg_replace(<span class=\"string\">'/[^A-Za-z0-9-]+/'</span>, <span class=\"string\">'-'</span>, $string);</div><div class=\"line\">   <span class=\"keyword\">return</span> $slug;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">echo</span> create_slug(<span class=\"string\">'my name is uncletoo'</span>);</div><div class=\"line\"><span class=\"comment\">//输出：my-name-is-uncletoo</span></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>添加<a href=\"http://到URL地址\">http://到URL地址</a><br>当我们需要用户填写网址时，很多用户往往不填写<a href=\"http://直接输入域名，使用下面代码可将http://添加到网址的前面。\">http://直接输入域名，使用下面代码可将http://添加到网址的前面。</a></p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!preg_match(<span class=\"string\">\"/^(http|https|ftp):/\"</span>, $_POST[<span class=\"string\">'url'</span>])) &#123;</div><div class=\"line\">   $_POST[<span class=\"string\">'url'</span>] = <span class=\"string\">'http://'</span>.$_POST[<span class=\"string\">'url'</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>将URL转换为超链接<br>这时一个很有用的功能，他可以将url地址或email地址转换为可点击的超链接文本。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeLinks</span><span class=\"params\">($text)</span> </span>&#123;</div><div class=\"line\">\t$text = eregi_replace(<span class=\"string\">'(((f|ht)&#123;1&#125;tp://)[-a-zA-Z0-9@:%_+.~#?&amp;//=]+)'</span>,<span class=\"string\">'\\1'</span>, $text);</div><div class=\"line\">\t$text = eregi_replace(<span class=\"string\">'([[:space:]()[&#123;&#125;])(www.[-a-zA-Z0-9@:%_+.~#?&amp;//=]+)'</span>,<span class=\"string\">'\\1\\2'</span>,$text);</div><div class=\"line\">\t$text = eregi_replace(<span class=\"string\">'([_.0-9a-z-]+@([0-9a-z][0-9a-z-]+.)+[a-z]&#123;2,3&#125;)'</span>,<span class=\"string\">'\\1'</span>, $text);</div><div class=\"line\">\t<span class=\"keyword\">return</span> $text;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n"},{"title":"Git 分支（branch）的使用整理","date":"2016-07-31T08:18:37.000Z","_content":"\n> 平时git branch用的比较少，大多数用的git add/commit/pull/push用的比较多，不过也特意找了一些资料\n> 完整资料请点击[这里](http://blog.jobbole.com/78960/)或者[这里](http://www.open-open.com/lib/view/open1328069889514.html)\n\n> 每次提交版本的时候，git会形成一个时间线，上面会有各种操作，git管这个“时间线”叫做分支，也就是我们常见的master，我们也可以根据需要创建各种分支，但是git只是识别master分支，所以每次创建分支后，需要合并才行。\n\n#### 1）我们在github创建一个test的项目，创建过程自行操作\n\n![Alt text](/img/1469950279275.png)\n\n#### 2）我们把项目``git clone``到本地\n\n```bash\n $ git clone https://github.com/tyl569/test.git ./\n Cloning into '.'...\n warning: You appear to have cloned an empty repository.\n Checking connectivity... done.\n```\n\n#### 3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test.txt，然后在里面写句：hello ,world.  当做项目好了。\n\n```tex\nhello ,world.\n```\n\n#### 4）ok，接下来就是套路操作了。\n\n```bash\n$ git status\nOn branch master\n\nInitial commit\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        test.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n$ git add .\n$ git commit -m 初次提交项目\n[master (root-commit) 97b26e5] 初次提交项目\n 1 file changed, 1 insertion(+)\n create mode 100644 test.txt\n\n$ git push\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nUsername for 'https://github.com': tyl569\nPassword for 'https://tyl569@github.com':\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 240 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/tyl569/test.git\n * [new branch]      master -> master\n```\n\n#### 5）可以从``git push``结果看到，这是一个新的分支。\n\n#### 6）创建一个新的分支，并且切换到新的分支上面。\n\n```bash\n$ git branch new\n$ git checkout new\nSwitched to branch 'new'\n## 提示已经切换到new分支\n```\n\n#### 7）此时在本地项目做一些改动，然后提交到github上面。\n\n```bash\n# git add/commit等操作省略\n$ git push\nfatal: The current branch new has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin new\n```\n\n####  在``git push``的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。\n\n```bash\n$ git push --set-upstream origin new\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nUsername for 'https://github.com': tyl569\nPassword for 'https://tyl569@github.com':\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 283 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/tyl569/test.git\n * [new branch]      new -> new\nBranch new set up to track remote branch new from origin.\n```\n\n#### 8）查看github，会看到合并分支的请求\n![Alt text](/img/1469951539710.png)\n\n#### 查看一下test.txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户``pull``或者``clone``的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。\n\n![Alt text](/img/1469951597308.png)\n![Alt text](/img/1469951611981.png)\n\n#### 9）如果功能在new分支上面开发完之后，合并分支。\n\n```bash\n$  git checkout master\n$ git merge new\nUpdating 97b26e5..96d3fe8\nFast-forward\n test.txt | 5 ++++-\n 1 file changed, 4 insertions(+), 1 deletion(-)\n```\n\n#### 10）这个时候，就会把new分支的改动，合并到master分支了，然后``push``\n\n```bash\ngit push\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nUsername for 'https://github.com': tyl569\nPassword for 'https://tyl569@github.com':\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nTotal 0 (delta 0), reused 0 (delta 0)\nTo https://github.com/tyl569/test.git\n   97b26e5..96d3fe8  master -> master\n```\n\n![Alt text](/img/1469952187908.png)\n![Alt text](/img/1469952201409.png)\n\n-------\n\n### 分支合并的作用：\n\n> * 可以独立开发某个功能或者模块\n> * 如果功能没有搞完，也可以``push``，对项目没有影响\n\n\n","source":"_posts/Git-分支（branch）的使用整理.md","raw":"---\ntitle: Git 分支（branch）的使用整理\ndate: 2016-07-31 16:18:37\ntags: git branch\ncategories: Git\n---\n\n> 平时git branch用的比较少，大多数用的git add/commit/pull/push用的比较多，不过也特意找了一些资料\n> 完整资料请点击[这里](http://blog.jobbole.com/78960/)或者[这里](http://www.open-open.com/lib/view/open1328069889514.html)\n\n> 每次提交版本的时候，git会形成一个时间线，上面会有各种操作，git管这个“时间线”叫做分支，也就是我们常见的master，我们也可以根据需要创建各种分支，但是git只是识别master分支，所以每次创建分支后，需要合并才行。\n\n#### 1）我们在github创建一个test的项目，创建过程自行操作\n\n![Alt text](/img/1469950279275.png)\n\n#### 2）我们把项目``git clone``到本地\n\n```bash\n $ git clone https://github.com/tyl569/test.git ./\n Cloning into '.'...\n warning: You appear to have cloned an empty repository.\n Checking connectivity... done.\n```\n\n#### 3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test.txt，然后在里面写句：hello ,world.  当做项目好了。\n\n```tex\nhello ,world.\n```\n\n#### 4）ok，接下来就是套路操作了。\n\n```bash\n$ git status\nOn branch master\n\nInitial commit\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        test.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n$ git add .\n$ git commit -m 初次提交项目\n[master (root-commit) 97b26e5] 初次提交项目\n 1 file changed, 1 insertion(+)\n create mode 100644 test.txt\n\n$ git push\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nUsername for 'https://github.com': tyl569\nPassword for 'https://tyl569@github.com':\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 240 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/tyl569/test.git\n * [new branch]      master -> master\n```\n\n#### 5）可以从``git push``结果看到，这是一个新的分支。\n\n#### 6）创建一个新的分支，并且切换到新的分支上面。\n\n```bash\n$ git branch new\n$ git checkout new\nSwitched to branch 'new'\n## 提示已经切换到new分支\n```\n\n#### 7）此时在本地项目做一些改动，然后提交到github上面。\n\n```bash\n# git add/commit等操作省略\n$ git push\nfatal: The current branch new has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin new\n```\n\n####  在``git push``的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。\n\n```bash\n$ git push --set-upstream origin new\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nUsername for 'https://github.com': tyl569\nPassword for 'https://tyl569@github.com':\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 283 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/tyl569/test.git\n * [new branch]      new -> new\nBranch new set up to track remote branch new from origin.\n```\n\n#### 8）查看github，会看到合并分支的请求\n![Alt text](/img/1469951539710.png)\n\n#### 查看一下test.txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户``pull``或者``clone``的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。\n\n![Alt text](/img/1469951597308.png)\n![Alt text](/img/1469951611981.png)\n\n#### 9）如果功能在new分支上面开发完之后，合并分支。\n\n```bash\n$  git checkout master\n$ git merge new\nUpdating 97b26e5..96d3fe8\nFast-forward\n test.txt | 5 ++++-\n 1 file changed, 4 insertions(+), 1 deletion(-)\n```\n\n#### 10）这个时候，就会把new分支的改动，合并到master分支了，然后``push``\n\n```bash\ngit push\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nUsername for 'https://github.com': tyl569\nPassword for 'https://tyl569@github.com':\ngit: 'credential-osxkeychain' is not a git command. See 'git --help'.\nTotal 0 (delta 0), reused 0 (delta 0)\nTo https://github.com/tyl569/test.git\n   97b26e5..96d3fe8  master -> master\n```\n\n![Alt text](/img/1469952187908.png)\n![Alt text](/img/1469952201409.png)\n\n-------\n\n### 分支合并的作用：\n\n> * 可以独立开发某个功能或者模块\n> * 如果功能没有搞完，也可以``push``，对项目没有影响\n\n\n","slug":"Git-分支（branch）的使用整理","published":1,"updated":"2016-08-16T08:55:49.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cm3000augqmvc0yyu6u","content":"<blockquote>\n<p>平时git branch用的比较少，大多数用的git add/commit/pull/push用的比较多，不过也特意找了一些资料<br>完整资料请点击<a href=\"http://blog.jobbole.com/78960/\" target=\"_blank\" rel=\"external\">这里</a>或者<a href=\"http://www.open-open.com/lib/view/open1328069889514.html\" target=\"_blank\" rel=\"external\">这里</a></p>\n<p>每次提交版本的时候，git会形成一个时间线，上面会有各种操作，git管这个“时间线”叫做分支，也就是我们常见的master，我们也可以根据需要创建各种分支，但是git只是识别master分支，所以每次创建分支后，需要合并才行。</p>\n</blockquote>\n<h4 id=\"1）我们在github创建一个test的项目，创建过程自行操作\"><a href=\"#1）我们在github创建一个test的项目，创建过程自行操作\" class=\"headerlink\" title=\"1）我们在github创建一个test的项目，创建过程自行操作\"></a>1）我们在github创建一个test的项目，创建过程自行操作</h4><p><img src=\"/img/1469950279275.png\" alt=\"Alt text\"></p>\n<h4 id=\"2）我们把项目git-clone到本地\"><a href=\"#2）我们把项目git-clone到本地\" class=\"headerlink\" title=\"2）我们把项目git clone到本地\"></a>2）我们把项目<code>git clone</code>到本地</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/tyl569/test.git ./</div><div class=\"line\">Cloning into <span class=\"string\">'.'</span>...</div><div class=\"line\">warning: You appear to have cloned an empty repository.</div><div class=\"line\">Checking connectivity... done.</div></pre></td></tr></table></figure>\n<h4 id=\"3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test-txt，然后在里面写句：hello-world-当做项目好了。\"><a href=\"#3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test-txt，然后在里面写句：hello-world-当做项目好了。\" class=\"headerlink\" title=\"3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test.txt，然后在里面写句：hello ,world.  当做项目好了。\"></a>3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test.txt，然后在里面写句：hello ,world.  当做项目好了。</h4><figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><div class=\"line\">hello ,world.</div></pre></td></tr></table></figure>\n<h4 id=\"4）ok，接下来就是套路操作了。\"><a href=\"#4）ok，接下来就是套路操作了。\" class=\"headerlink\" title=\"4）ok，接下来就是套路操作了。\"></a>4）ok，接下来就是套路操作了。</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\"></div><div class=\"line\">Initial commit</div><div class=\"line\"></div><div class=\"line\">Untracked files:</div><div class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to include <span class=\"keyword\">in</span> what will be committed)</div><div class=\"line\"></div><div class=\"line\">        test.txt</div><div class=\"line\"></div><div class=\"line\">nothing added to commit but untracked files present (use <span class=\"string\">\"git add\"</span> to track)</div><div class=\"line\"></div><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m 初次提交项目</div><div class=\"line\">[master (root-commit) 97b26e5] 初次提交项目</div><div class=\"line\"> 1 file changed, 1 insertion(+)</div><div class=\"line\"> create mode 100644 test.txt</div><div class=\"line\"></div><div class=\"line\">$ git push</div><div class=\"line\">git: <span class=\"string\">'credential-osxkeychain'</span> is not a git command. See <span class=\"string\">'git --help'</span>.</div><div class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">'https://github.com'</span>: tyl569</div><div class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">'https://tyl569@github.com'</span>:</div><div class=\"line\">git: <span class=\"string\">'credential-osxkeychain'</span> is not a git command. See <span class=\"string\">'git --help'</span>.</div><div class=\"line\">Counting objects: 3, done.</div><div class=\"line\">Writing objects: 100% (3/3), 240 bytes | 0 bytes/s, done.</div><div class=\"line\">Total 3 (delta 0), reused 0 (delta 0)</div><div class=\"line\">To https://github.com/tyl569/test.git</div><div class=\"line\"> * [new branch]      master -&gt; master</div></pre></td></tr></table></figure>\n<h4 id=\"5）可以从git-push结果看到，这是一个新的分支。\"><a href=\"#5）可以从git-push结果看到，这是一个新的分支。\" class=\"headerlink\" title=\"5）可以从git push结果看到，这是一个新的分支。\"></a>5）可以从<code>git push</code>结果看到，这是一个新的分支。</h4><h4 id=\"6）创建一个新的分支，并且切换到新的分支上面。\"><a href=\"#6）创建一个新的分支，并且切换到新的分支上面。\" class=\"headerlink\" title=\"6）创建一个新的分支，并且切换到新的分支上面。\"></a>6）创建一个新的分支，并且切换到新的分支上面。</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch new</div><div class=\"line\">$ git checkout new</div><div class=\"line\">Switched to branch <span class=\"string\">'new'</span></div><div class=\"line\"><span class=\"comment\">## 提示已经切换到new分支</span></div></pre></td></tr></table></figure>\n<h4 id=\"7）此时在本地项目做一些改动，然后提交到github上面。\"><a href=\"#7）此时在本地项目做一些改动，然后提交到github上面。\" class=\"headerlink\" title=\"7）此时在本地项目做一些改动，然后提交到github上面。\"></a>7）此时在本地项目做一些改动，然后提交到github上面。</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># git add/commit等操作省略</span></div><div class=\"line\">$ git push</div><div class=\"line\">fatal: The current branch new has no upstream branch.</div><div class=\"line\">To push the current branch and <span class=\"built_in\">set</span> the remote as upstream, use</div><div class=\"line\"></div><div class=\"line\">    git push --set-upstream origin new</div></pre></td></tr></table></figure>\n<h4 id=\"在git-push的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。\"><a href=\"#在git-push的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。\" class=\"headerlink\" title=\"在git push的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。\"></a>在<code>git push</code>的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push --set-upstream origin new</div><div class=\"line\">git: <span class=\"string\">'credential-osxkeychain'</span> is not a git command. See <span class=\"string\">'git --help'</span>.</div><div class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">'https://github.com'</span>: tyl569</div><div class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">'https://tyl569@github.com'</span>:</div><div class=\"line\">git: <span class=\"string\">'credential-osxkeychain'</span> is not a git command. See <span class=\"string\">'git --help'</span>.</div><div class=\"line\">Counting objects: 3, done.</div><div class=\"line\">Writing objects: 100% (3/3), 283 bytes | 0 bytes/s, done.</div><div class=\"line\">Total 3 (delta 0), reused 0 (delta 0)</div><div class=\"line\">To https://github.com/tyl569/test.git</div><div class=\"line\"> * [new branch]      new -&gt; new</div><div class=\"line\">Branch new <span class=\"built_in\">set</span> up to track remote branch new from origin.</div></pre></td></tr></table></figure>\n<h4 id=\"8）查看github，会看到合并分支的请求\"><a href=\"#8）查看github，会看到合并分支的请求\" class=\"headerlink\" title=\"8）查看github，会看到合并分支的请求\"></a>8）查看github，会看到合并分支的请求</h4><p><img src=\"/img/1469951539710.png\" alt=\"Alt text\"></p>\n<h4 id=\"查看一下test-txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户pull或者clone的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。\"><a href=\"#查看一下test-txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户pull或者clone的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。\" class=\"headerlink\" title=\"查看一下test.txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户pull或者clone的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。\"></a>查看一下test.txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户<code>pull</code>或者<code>clone</code>的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。</h4><p><img src=\"/img/1469951597308.png\" alt=\"Alt text\"><br><img src=\"/img/1469951611981.png\" alt=\"Alt text\"></p>\n<h4 id=\"9）如果功能在new分支上面开发完之后，合并分支。\"><a href=\"#9）如果功能在new分支上面开发完之后，合并分支。\" class=\"headerlink\" title=\"9）如果功能在new分支上面开发完之后，合并分支。\"></a>9）如果功能在new分支上面开发完之后，合并分支。</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$  git checkout master</div><div class=\"line\">$ git merge new</div><div class=\"line\">Updating 97b26e5..96d3fe8</div><div class=\"line\">Fast-forward</div><div class=\"line\"> test.txt | 5 ++++-</div><div class=\"line\"> 1 file changed, 4 insertions(+), 1 deletion(-)</div></pre></td></tr></table></figure>\n<h4 id=\"10）这个时候，就会把new分支的改动，合并到master分支了，然后push\"><a href=\"#10）这个时候，就会把new分支的改动，合并到master分支了，然后push\" class=\"headerlink\" title=\"10）这个时候，就会把new分支的改动，合并到master分支了，然后push\"></a>10）这个时候，就会把new分支的改动，合并到master分支了，然后<code>push</code></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">git push</div><div class=\"line\">git: <span class=\"string\">'credential-osxkeychain'</span> is not a git command. See <span class=\"string\">'git --help'</span>.</div><div class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">'https://github.com'</span>: tyl569</div><div class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">'https://tyl569@github.com'</span>:</div><div class=\"line\">git: <span class=\"string\">'credential-osxkeychain'</span> is not a git command. See <span class=\"string\">'git --help'</span>.</div><div class=\"line\">Total 0 (delta 0), reused 0 (delta 0)</div><div class=\"line\">To https://github.com/tyl569/test.git</div><div class=\"line\">   97b26e5..96d3fe8  master -&gt; master</div></pre></td></tr></table></figure>\n<p><img src=\"/img/1469952187908.png\" alt=\"Alt text\"><br><img src=\"/img/1469952201409.png\" alt=\"Alt text\"></p>\n<hr>\n<h3 id=\"分支合并的作用：\"><a href=\"#分支合并的作用：\" class=\"headerlink\" title=\"分支合并的作用：\"></a>分支合并的作用：</h3><blockquote>\n<ul>\n<li>可以独立开发某个功能或者模块</li>\n<li>如果功能没有搞完，也可以<code>push</code>，对项目没有影响</li>\n</ul>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>平时git branch用的比较少，大多数用的git add/commit/pull/push用的比较多，不过也特意找了一些资料<br>完整资料请点击<a href=\"http://blog.jobbole.com/78960/\">这里</a>或者<a href=\"http://www.open-open.com/lib/view/open1328069889514.html\">这里</a></p>\n<p>每次提交版本的时候，git会形成一个时间线，上面会有各种操作，git管这个“时间线”叫做分支，也就是我们常见的master，我们也可以根据需要创建各种分支，但是git只是识别master分支，所以每次创建分支后，需要合并才行。</p>\n</blockquote>\n<h4 id=\"1）我们在github创建一个test的项目，创建过程自行操作\"><a href=\"#1）我们在github创建一个test的项目，创建过程自行操作\" class=\"headerlink\" title=\"1）我们在github创建一个test的项目，创建过程自行操作\"></a>1）我们在github创建一个test的项目，创建过程自行操作</h4><p><img src=\"/img/1469950279275.png\" alt=\"Alt text\"></p>\n<h4 id=\"2）我们把项目git-clone到本地\"><a href=\"#2）我们把项目git-clone到本地\" class=\"headerlink\" title=\"2）我们把项目git clone到本地\"></a>2）我们把项目<code>git clone</code>到本地</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/tyl569/test.git ./</div><div class=\"line\">Cloning into <span class=\"string\">'.'</span>...</div><div class=\"line\">warning: You appear to have cloned an empty repository.</div><div class=\"line\">Checking connectivity... done.</div></pre></td></tr></table></figure>\n<h4 id=\"3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test-txt，然后在里面写句：hello-world-当做项目好了。\"><a href=\"#3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test-txt，然后在里面写句：hello-world-当做项目好了。\" class=\"headerlink\" title=\"3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test.txt，然后在里面写句：hello ,world.  当做项目好了。\"></a>3）yes，这里肯定是个empty的库，按照常理操作，我们会把项目放在版本库，咱们就姑且创建一个test.txt，然后在里面写句：hello ,world.  当做项目好了。</h4><figure class=\"highlight tex\"><table><tr><td class=\"code\"><pre><div class=\"line\">hello ,world.</div></pre></td></tr></table></figure>\n<h4 id=\"4）ok，接下来就是套路操作了。\"><a href=\"#4）ok，接下来就是套路操作了。\" class=\"headerlink\" title=\"4）ok，接下来就是套路操作了。\"></a>4）ok，接下来就是套路操作了。</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\"></div><div class=\"line\">Initial commit</div><div class=\"line\"></div><div class=\"line\">Untracked files:</div><div class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to include <span class=\"keyword\">in</span> what will be committed)</div><div class=\"line\"></div><div class=\"line\">        test.txt</div><div class=\"line\"></div><div class=\"line\">nothing added to commit but untracked files present (use <span class=\"string\">\"git add\"</span> to track)</div><div class=\"line\"></div><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m 初次提交项目</div><div class=\"line\">[master (root-commit) 97b26e5] 初次提交项目</div><div class=\"line\"> 1 file changed, 1 insertion(+)</div><div class=\"line\"> create mode 100644 test.txt</div><div class=\"line\"></div><div class=\"line\">$ git push</div><div class=\"line\">git: <span class=\"string\">'credential-osxkeychain'</span> is not a git command. See <span class=\"string\">'git --help'</span>.</div><div class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">'https://github.com'</span>: tyl569</div><div class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">'https://tyl569@github.com'</span>:</div><div class=\"line\">git: <span class=\"string\">'credential-osxkeychain'</span> is not a git command. See <span class=\"string\">'git --help'</span>.</div><div class=\"line\">Counting objects: 3, done.</div><div class=\"line\">Writing objects: 100% (3/3), 240 bytes | 0 bytes/s, done.</div><div class=\"line\">Total 3 (delta 0), reused 0 (delta 0)</div><div class=\"line\">To https://github.com/tyl569/test.git</div><div class=\"line\"> * [new branch]      master -&gt; master</div></pre></td></tr></table></figure>\n<h4 id=\"5）可以从git-push结果看到，这是一个新的分支。\"><a href=\"#5）可以从git-push结果看到，这是一个新的分支。\" class=\"headerlink\" title=\"5）可以从git push结果看到，这是一个新的分支。\"></a>5）可以从<code>git push</code>结果看到，这是一个新的分支。</h4><h4 id=\"6）创建一个新的分支，并且切换到新的分支上面。\"><a href=\"#6）创建一个新的分支，并且切换到新的分支上面。\" class=\"headerlink\" title=\"6）创建一个新的分支，并且切换到新的分支上面。\"></a>6）创建一个新的分支，并且切换到新的分支上面。</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch new</div><div class=\"line\">$ git checkout new</div><div class=\"line\">Switched to branch <span class=\"string\">'new'</span></div><div class=\"line\"><span class=\"comment\">## 提示已经切换到new分支</span></div></pre></td></tr></table></figure>\n<h4 id=\"7）此时在本地项目做一些改动，然后提交到github上面。\"><a href=\"#7）此时在本地项目做一些改动，然后提交到github上面。\" class=\"headerlink\" title=\"7）此时在本地项目做一些改动，然后提交到github上面。\"></a>7）此时在本地项目做一些改动，然后提交到github上面。</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># git add/commit等操作省略</span></div><div class=\"line\">$ git push</div><div class=\"line\">fatal: The current branch new has no upstream branch.</div><div class=\"line\">To push the current branch and <span class=\"built_in\">set</span> the remote as upstream, use</div><div class=\"line\"></div><div class=\"line\">    git push --set-upstream origin new</div></pre></td></tr></table></figure>\n<h4 id=\"在git-push的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。\"><a href=\"#在git-push的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。\" class=\"headerlink\" title=\"在git push的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。\"></a>在<code>git push</code>的时候会提示新的分支没有添加到分支流中，然后使用提示的命令push一下。然后输入用户名和密码。</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push --set-upstream origin new</div><div class=\"line\">git: <span class=\"string\">'credential-osxkeychain'</span> is not a git command. See <span class=\"string\">'git --help'</span>.</div><div class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">'https://github.com'</span>: tyl569</div><div class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">'https://tyl569@github.com'</span>:</div><div class=\"line\">git: <span class=\"string\">'credential-osxkeychain'</span> is not a git command. See <span class=\"string\">'git --help'</span>.</div><div class=\"line\">Counting objects: 3, done.</div><div class=\"line\">Writing objects: 100% (3/3), 283 bytes | 0 bytes/s, done.</div><div class=\"line\">Total 3 (delta 0), reused 0 (delta 0)</div><div class=\"line\">To https://github.com/tyl569/test.git</div><div class=\"line\"> * [new branch]      new -&gt; new</div><div class=\"line\">Branch new <span class=\"built_in\">set</span> up to track remote branch new from origin.</div></pre></td></tr></table></figure>\n<h4 id=\"8）查看github，会看到合并分支的请求\"><a href=\"#8）查看github，会看到合并分支的请求\" class=\"headerlink\" title=\"8）查看github，会看到合并分支的请求\"></a>8）查看github，会看到合并分支的请求</h4><p><img src=\"/img/1469951539710.png\" alt=\"Alt text\"></p>\n<h4 id=\"查看一下test-txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户pull或者clone的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。\"><a href=\"#查看一下test-txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户pull或者clone的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。\" class=\"headerlink\" title=\"查看一下test.txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户pull或者clone的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。\"></a>查看一下test.txt文件，发现内容并没有改变，这是因为github把master作为主分支，如果两个分支不合并的话，另外的用户<code>pull</code>或者<code>clone</code>的时候，只会得到master分支的项目，这样如果用户随意搞new分支的内容，都不会影响master分支。</h4><p><img src=\"/img/1469951597308.png\" alt=\"Alt text\"><br><img src=\"/img/1469951611981.png\" alt=\"Alt text\"></p>\n<h4 id=\"9）如果功能在new分支上面开发完之后，合并分支。\"><a href=\"#9）如果功能在new分支上面开发完之后，合并分支。\" class=\"headerlink\" title=\"9）如果功能在new分支上面开发完之后，合并分支。\"></a>9）如果功能在new分支上面开发完之后，合并分支。</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$  git checkout master</div><div class=\"line\">$ git merge new</div><div class=\"line\">Updating 97b26e5..96d3fe8</div><div class=\"line\">Fast-forward</div><div class=\"line\"> test.txt | 5 ++++-</div><div class=\"line\"> 1 file changed, 4 insertions(+), 1 deletion(-)</div></pre></td></tr></table></figure>\n<h4 id=\"10）这个时候，就会把new分支的改动，合并到master分支了，然后push\"><a href=\"#10）这个时候，就会把new分支的改动，合并到master分支了，然后push\" class=\"headerlink\" title=\"10）这个时候，就会把new分支的改动，合并到master分支了，然后push\"></a>10）这个时候，就会把new分支的改动，合并到master分支了，然后<code>push</code></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">git push</div><div class=\"line\">git: <span class=\"string\">'credential-osxkeychain'</span> is not a git command. See <span class=\"string\">'git --help'</span>.</div><div class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">'https://github.com'</span>: tyl569</div><div class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">'https://tyl569@github.com'</span>:</div><div class=\"line\">git: <span class=\"string\">'credential-osxkeychain'</span> is not a git command. See <span class=\"string\">'git --help'</span>.</div><div class=\"line\">Total 0 (delta 0), reused 0 (delta 0)</div><div class=\"line\">To https://github.com/tyl569/test.git</div><div class=\"line\">   97b26e5..96d3fe8  master -&gt; master</div></pre></td></tr></table></figure>\n<p><img src=\"/img/1469952187908.png\" alt=\"Alt text\"><br><img src=\"/img/1469952201409.png\" alt=\"Alt text\"></p>\n<hr>\n<h3 id=\"分支合并的作用：\"><a href=\"#分支合并的作用：\" class=\"headerlink\" title=\"分支合并的作用：\"></a>分支合并的作用：</h3><blockquote>\n<ul>\n<li>可以独立开发某个功能或者模块</li>\n<li>如果功能没有搞完，也可以<code>push</code>，对项目没有影响</li>\n</ul>\n</blockquote>\n"},{"title":"Linux alias 永久生效","date":"2016-12-30T08:09:45.000Z","_content":"\n#### alias 是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间\n\n#### 比如设置 `alias db='mysql -uroot -proot'`,设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。\n\n#### alias永久生效\n\n#### 在`/home`用户目录下面有个隐藏文件*`.bashrc`*, 使用vim打开，然后在文档后面追加alias命令即可\n\n```bash\n$ vim /home/ubuntu/.bashrc\n\n##在结尾追加alias命令，如alias db = 'mysql -uroot -proot'\n\n$ source ~/.bashrc ##使alias生效\n\n```\n\n","source":"_posts/Linux-alias-永久生效.md","raw":"---\ntitle: Linux alias 永久生效\ndate: 2016-12-30 16:09:45\ntags:\ncategories: Linux\n---\n\n#### alias 是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间\n\n#### 比如设置 `alias db='mysql -uroot -proot'`,设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。\n\n#### alias永久生效\n\n#### 在`/home`用户目录下面有个隐藏文件*`.bashrc`*, 使用vim打开，然后在文档后面追加alias命令即可\n\n```bash\n$ vim /home/ubuntu/.bashrc\n\n##在结尾追加alias命令，如alias db = 'mysql -uroot -proot'\n\n$ source ~/.bashrc ##使alias生效\n\n```\n\n","slug":"Linux-alias-永久生效","published":1,"updated":"2016-12-30T08:18:13.167Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cm6000cugqmlwc7c7bk","content":"<h4 id=\"alias-是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间\"><a href=\"#alias-是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间\" class=\"headerlink\" title=\"alias 是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间\"></a>alias 是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间</h4><h4 id=\"比如设置-alias-db-39-mysql-uroot-proot-39-设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。\"><a href=\"#比如设置-alias-db-39-mysql-uroot-proot-39-设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。\" class=\"headerlink\" title=\"比如设置 alias db=&#39;mysql -uroot -proot&#39;,设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。\"></a>比如设置 <code>alias db=&#39;mysql -uroot -proot&#39;</code>,设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。</h4><h4 id=\"alias永久生效\"><a href=\"#alias永久生效\" class=\"headerlink\" title=\"alias永久生效\"></a>alias永久生效</h4><h4 id=\"在-home用户目录下面有个隐藏文件-bashrc-使用vim打开，然后在文档后面追加alias命令即可\"><a href=\"#在-home用户目录下面有个隐藏文件-bashrc-使用vim打开，然后在文档后面追加alias命令即可\" class=\"headerlink\" title=\"在/home用户目录下面有个隐藏文件.bashrc, 使用vim打开，然后在文档后面追加alias命令即可\"></a>在<code>/home</code>用户目录下面有个隐藏文件<em><code>.bashrc</code></em>, 使用vim打开，然后在文档后面追加alias命令即可</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ vim /home/ubuntu/.bashrc</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">##在结尾追加alias命令，如alias db = 'mysql -uroot -proot'</span></div><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">source</span> ~/.bashrc <span class=\"comment\">##使alias生效</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h4 id=\"alias-是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间\"><a href=\"#alias-是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间\" class=\"headerlink\" title=\"alias 是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间\"></a>alias 是用来设置命令别名的，使用这个命令，可以极大的节省我们的时间</h4><h4 id=\"比如设置-alias-db-39-mysql-uroot-proot-39-设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。\"><a href=\"#比如设置-alias-db-39-mysql-uroot-proot-39-设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。\" class=\"headerlink\" title=\"比如设置 alias db=&#39;mysql -uroot -proot&#39;,设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。\"></a>比如设置 <code>alias db=&#39;mysql -uroot -proot&#39;</code>,设置之后，可以直接使用db命令登录mysql了，但是当关闭控制台的时候，alias就会失效。</h4><h4 id=\"alias永久生效\"><a href=\"#alias永久生效\" class=\"headerlink\" title=\"alias永久生效\"></a>alias永久生效</h4><h4 id=\"在-home用户目录下面有个隐藏文件-bashrc-使用vim打开，然后在文档后面追加alias命令即可\"><a href=\"#在-home用户目录下面有个隐藏文件-bashrc-使用vim打开，然后在文档后面追加alias命令即可\" class=\"headerlink\" title=\"在/home用户目录下面有个隐藏文件.bashrc, 使用vim打开，然后在文档后面追加alias命令即可\"></a>在<code>/home</code>用户目录下面有个隐藏文件<em><code>.bashrc</code></em>, 使用vim打开，然后在文档后面追加alias命令即可</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ vim /home/ubuntu/.bashrc</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">##在结尾追加alias命令，如alias db = 'mysql -uroot -proot'</span></div><div class=\"line\"></div><div class=\"line\">$ <span class=\"built_in\">source</span> ~/.bashrc <span class=\"comment\">##使alias生效</span></div></pre></td></tr></table></figure>\n"},{"title":"Nginx根据端口配置虚拟主机","date":"2016-07-31T07:01:48.000Z","_content":"\n#### 1)  打开nginx的配置文件，为了方便日后对虚拟主机进行管理，我们可以创建一个文件夹 vhost，专门存放虚拟主机的配置文件 \n\n```nginx\n...\ninclude vhost/*.conf;\n}\n```\n\n#### 2) 在vhost文件夹，创建blog.conf\n\n> 我们根据端口进行配置\n> 配置8080端口，指向 blog文件夹\n\n```nginx \nserver {\n        listen       8080;\n        server_name  localhost:8080 ;\n        root   \"D:/blog\";\n        location / {\n            index  index.html index.htm index.php;\n        }\n        location ~ \\.php(.*)$ {\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_split_path_info  ^((?U).+\\.php)(/?.+)$;\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            fastcgi_param  PATH_INFO  $fastcgi_path_info;\n            fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;\n            include        fastcgi_params;\n        }\n}\n```\n\n#### 3) 重启nginx服务，浏览器访问 http://localhost:8080","source":"_posts/Nginx配置虚拟主机.md","raw":"---\ntitle: Nginx根据端口配置虚拟主机\ndate: 2016-07-31 15:01:48\ntags: Nginx \ncategories: Linux\n---\n\n#### 1)  打开nginx的配置文件，为了方便日后对虚拟主机进行管理，我们可以创建一个文件夹 vhost，专门存放虚拟主机的配置文件 \n\n```nginx\n...\ninclude vhost/*.conf;\n}\n```\n\n#### 2) 在vhost文件夹，创建blog.conf\n\n> 我们根据端口进行配置\n> 配置8080端口，指向 blog文件夹\n\n```nginx \nserver {\n        listen       8080;\n        server_name  localhost:8080 ;\n        root   \"D:/blog\";\n        location / {\n            index  index.html index.htm index.php;\n        }\n        location ~ \\.php(.*)$ {\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_split_path_info  ^((?U).+\\.php)(/?.+)$;\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            fastcgi_param  PATH_INFO  $fastcgi_path_info;\n            fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;\n            include        fastcgi_params;\n        }\n}\n```\n\n#### 3) 重启nginx服务，浏览器访问 http://localhost:8080","slug":"Nginx配置虚拟主机","published":1,"updated":"2016-08-16T08:47:29.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cm8000fugqmbyjtud9h","content":"<h4 id=\"1-打开nginx的配置文件，为了方便日后对虚拟主机进行管理，我们可以创建一个文件夹-vhost，专门存放虚拟主机的配置文件\"><a href=\"#1-打开nginx的配置文件，为了方便日后对虚拟主机进行管理，我们可以创建一个文件夹-vhost，专门存放虚拟主机的配置文件\" class=\"headerlink\" title=\"1)  打开nginx的配置文件，为了方便日后对虚拟主机进行管理，我们可以创建一个文件夹 vhost，专门存放虚拟主机的配置文件\"></a>1)  打开nginx的配置文件，为了方便日后对虚拟主机进行管理，我们可以创建一个文件夹 vhost，专门存放虚拟主机的配置文件</h4><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">include vhost/*.conf;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-在vhost文件夹，创建blog-conf\"><a href=\"#2-在vhost文件夹，创建blog-conf\" class=\"headerlink\" title=\"2) 在vhost文件夹，创建blog.conf\"></a>2) 在vhost文件夹，创建blog.conf</h4><blockquote>\n<p>我们根据端口进行配置<br>配置8080端口，指向 blog文件夹</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">8080</span>;</div><div class=\"line\">        <span class=\"attribute\">server_name</span>  localhost:<span class=\"number\">8080</span> ;</div><div class=\"line\">        <span class=\"attribute\">root</span>   <span class=\"string\">\"D:/blog\"</span>;</div><div class=\"line\">        <span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">            <span class=\"attribute\">index</span>  index.html index.htm index.php;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.php(.*)$</span> &#123;</div><div class=\"line\">            <span class=\"attribute\">fastcgi_pass</span>   <span class=\"number\">127.0.0.1:9000</span>;</div><div class=\"line\">            <span class=\"attribute\">fastcgi_index</span>  index.php;</div><div class=\"line\">            <span class=\"attribute\">fastcgi_split_path_info</span> <span class=\"regexp\"> ^((?U).+\\.php)(/?.+)$</span>;</div><div class=\"line\">            <span class=\"attribute\">fastcgi_param</span>  SCRIPT_FILENAME  <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</div><div class=\"line\">            <span class=\"attribute\">fastcgi_param</span>  PATH_INFO  <span class=\"variable\">$fastcgi_path_info</span>;</div><div class=\"line\">            <span class=\"attribute\">fastcgi_param</span>  PATH_TRANSLATED  <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_path_info</span>;</div><div class=\"line\">            <span class=\"attribute\">include</span>        fastcgi_params;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-重启nginx服务，浏览器访问-http-localhost-8080\"><a href=\"#3-重启nginx服务，浏览器访问-http-localhost-8080\" class=\"headerlink\" title=\"3) 重启nginx服务，浏览器访问 http://localhost:8080\"></a>3) 重启nginx服务，浏览器访问 <a href=\"http://localhost:8080\">http://localhost:8080</a></h4>","excerpt":"","more":"<h4 id=\"1-打开nginx的配置文件，为了方便日后对虚拟主机进行管理，我们可以创建一个文件夹-vhost，专门存放虚拟主机的配置文件\"><a href=\"#1-打开nginx的配置文件，为了方便日后对虚拟主机进行管理，我们可以创建一个文件夹-vhost，专门存放虚拟主机的配置文件\" class=\"headerlink\" title=\"1)  打开nginx的配置文件，为了方便日后对虚拟主机进行管理，我们可以创建一个文件夹 vhost，专门存放虚拟主机的配置文件\"></a>1)  打开nginx的配置文件，为了方便日后对虚拟主机进行管理，我们可以创建一个文件夹 vhost，专门存放虚拟主机的配置文件</h4><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">include vhost/*.conf;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-在vhost文件夹，创建blog-conf\"><a href=\"#2-在vhost文件夹，创建blog-conf\" class=\"headerlink\" title=\"2) 在vhost文件夹，创建blog.conf\"></a>2) 在vhost文件夹，创建blog.conf</h4><blockquote>\n<p>我们根据端口进行配置<br>配置8080端口，指向 blog文件夹</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">8080</span>;</div><div class=\"line\">        <span class=\"attribute\">server_name</span>  localhost:<span class=\"number\">8080</span> ;</div><div class=\"line\">        <span class=\"attribute\">root</span>   <span class=\"string\">\"D:/blog\"</span>;</div><div class=\"line\">        <span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">            <span class=\"attribute\">index</span>  index.html index.htm index.php;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.php(.*)$</span> &#123;</div><div class=\"line\">            <span class=\"attribute\">fastcgi_pass</span>   <span class=\"number\">127.0.0.1:9000</span>;</div><div class=\"line\">            <span class=\"attribute\">fastcgi_index</span>  index.php;</div><div class=\"line\">            <span class=\"attribute\">fastcgi_split_path_info</span> <span class=\"regexp\"> ^((?U).+\\.php)(/?.+)$</span>;</div><div class=\"line\">            <span class=\"attribute\">fastcgi_param</span>  SCRIPT_FILENAME  <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</div><div class=\"line\">            <span class=\"attribute\">fastcgi_param</span>  PATH_INFO  <span class=\"variable\">$fastcgi_path_info</span>;</div><div class=\"line\">            <span class=\"attribute\">fastcgi_param</span>  PATH_TRANSLATED  <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_path_info</span>;</div><div class=\"line\">            <span class=\"attribute\">include</span>        fastcgi_params;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-重启nginx服务，浏览器访问-http-localhost-8080\"><a href=\"#3-重启nginx服务，浏览器访问-http-localhost-8080\" class=\"headerlink\" title=\"3) 重启nginx服务，浏览器访问 http://localhost:8080\"></a>3) 重启nginx服务，浏览器访问 <a href=\"http://localhost:8080\">http://localhost:8080</a></h4>"},{"title":"Linux 安装supervisor (CentOs or RedHat)","date":"2016-11-09T10:38:07.000Z","_content":"\n-----------------------\n\n#### supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。\n\n#### supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。\n\n#### 安装supervisor\n\n```bash\n$ yum install python-setuptools\n```\n![Alt text](/img/QQ截图20161108151312.png)\n\n```bash\n$ easy_install supervisor\n```\n![Alt text](/img/QQ截图20161108151521.png)\n\n#### 测试是否安装成功\n\n```bash\n$ echo_supervisord_conf\n```\n![Alt text](/img/QQ截图20161108151708.png)\n\n#### 创建配置文件\n\n##### 创建主配置文件\n\n```bash\n$ mkdir -m 755 -p /etc/supervisor/\n$ echo_supervisord_conf > /etc/supervisor/supervisord.conf\n```\n\n##### 创建项目配置目录\n\n```bash\n$ mkdir -m 755 conf.d\n```\n\n![Alt text](/img/QQ截图20161108152106.png)\n\n#### 创建测试\n\n##### 在/home/tengyunlong/supervisor_simple目录下创建test.c\n\n```cpp\n#include<stdio.h>\n#include<string.h>\n#include <unistd.h>\nint main() {\n\tFILE *fp = fopen(\"/home/slightech/supervisor_simple/a.txt\", \"a+\");\n\tif (fp == 0) {\n\t\tprintf(\"Can not open file \\n\");\n\t\treturn 0;\n\t}\n\tint ix = 0;\n\tfor (;; ix++) {\n\t\tfseek(fp, 0, SEEK_END);\n\t\tchar s_add_arr[10];\n\t\tmemset(s_add_arr, '\\0', 10);\n\t\tsprintf(s_add_arr, \"%i\\n\", ix);\n\t\tfwrite(s_add_arr, strlen(s_add_arr), 1, fp);\n\t\tsleep(1);\n\t}\n\tfclose(fp);\n\treturn 0;\n}\n```\n\n##### 编译为test\n\n```bash\n$ gcc -o test test.c\n```\n\n#### 更改主配置文件，去掉最后两行的分号(;)，我习惯设置项目配置文件为.conf 格式\n\n![Alt text](/img/QQ图片20161108153215.png)\n\n#### 在/etc/supervisor/conf.d 创建test.conf文件\n\n```bash\n[program:test]\ncommand=/home/slightech/supervisor_simple/test\n;directory= ;directory to cwd to before exec (def no cwd)\nautostart=true ; start at supervisord start (default: true)\nautorestart=unexpected ; whether/when to restart (default: unexpected)\nstartsecs=1 ; number of secs prog must stay running (def. 1)\nredirect_stderr=true ; redirect proc stderr to stdout (default false) 错误重定向\nstdout_logfile=/var/log/supervisor/test.log ; stout log path, NONE of none ;default AUTO,log输出\n```\n\n#### 启动supervisor服务\n\n```bash\n$ supervisord -c /etc/supervisor/supervisord.conf\n```\n\n#### 使用pstree查看进程\n\n```bash\n$ pstree | grep supervisor\n```\n![Alt text](/img/QQ截图20161108153954.png)\n\n#### 查看监控的进程，发现test running\n\n```bash\n$ supervisorctl -c /etc/supervisor/supervisord.conf\n```\n\n![Alt text](/img/QQ截图20161108154215.png)\n\n#### 命令\n\n```bash\n$ supervisorctl [-c /etc/supervisor/supervisor.conf ] stop|start|restart all #停止|启动|重启 所有进程\n$ supervisorctl [-c /etc/supervisor/supervisor.conf ] #登录控制台\n```\n\n#### 参见[supervisor初体验](http://www.jianshu.com/p/9abffc905645)\n","source":"_posts/Linux-安装supervisor-CentOs-or-RedHat.md","raw":"---\ntitle: Linux 安装supervisor (CentOs or RedHat)\ndate: 2016-11-09 18:38:07\ntags:\ncategories: Linux\n---\n\n-----------------------\n\n#### supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。\n\n#### supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。\n\n#### 安装supervisor\n\n```bash\n$ yum install python-setuptools\n```\n![Alt text](/img/QQ截图20161108151312.png)\n\n```bash\n$ easy_install supervisor\n```\n![Alt text](/img/QQ截图20161108151521.png)\n\n#### 测试是否安装成功\n\n```bash\n$ echo_supervisord_conf\n```\n![Alt text](/img/QQ截图20161108151708.png)\n\n#### 创建配置文件\n\n##### 创建主配置文件\n\n```bash\n$ mkdir -m 755 -p /etc/supervisor/\n$ echo_supervisord_conf > /etc/supervisor/supervisord.conf\n```\n\n##### 创建项目配置目录\n\n```bash\n$ mkdir -m 755 conf.d\n```\n\n![Alt text](/img/QQ截图20161108152106.png)\n\n#### 创建测试\n\n##### 在/home/tengyunlong/supervisor_simple目录下创建test.c\n\n```cpp\n#include<stdio.h>\n#include<string.h>\n#include <unistd.h>\nint main() {\n\tFILE *fp = fopen(\"/home/slightech/supervisor_simple/a.txt\", \"a+\");\n\tif (fp == 0) {\n\t\tprintf(\"Can not open file \\n\");\n\t\treturn 0;\n\t}\n\tint ix = 0;\n\tfor (;; ix++) {\n\t\tfseek(fp, 0, SEEK_END);\n\t\tchar s_add_arr[10];\n\t\tmemset(s_add_arr, '\\0', 10);\n\t\tsprintf(s_add_arr, \"%i\\n\", ix);\n\t\tfwrite(s_add_arr, strlen(s_add_arr), 1, fp);\n\t\tsleep(1);\n\t}\n\tfclose(fp);\n\treturn 0;\n}\n```\n\n##### 编译为test\n\n```bash\n$ gcc -o test test.c\n```\n\n#### 更改主配置文件，去掉最后两行的分号(;)，我习惯设置项目配置文件为.conf 格式\n\n![Alt text](/img/QQ图片20161108153215.png)\n\n#### 在/etc/supervisor/conf.d 创建test.conf文件\n\n```bash\n[program:test]\ncommand=/home/slightech/supervisor_simple/test\n;directory= ;directory to cwd to before exec (def no cwd)\nautostart=true ; start at supervisord start (default: true)\nautorestart=unexpected ; whether/when to restart (default: unexpected)\nstartsecs=1 ; number of secs prog must stay running (def. 1)\nredirect_stderr=true ; redirect proc stderr to stdout (default false) 错误重定向\nstdout_logfile=/var/log/supervisor/test.log ; stout log path, NONE of none ;default AUTO,log输出\n```\n\n#### 启动supervisor服务\n\n```bash\n$ supervisord -c /etc/supervisor/supervisord.conf\n```\n\n#### 使用pstree查看进程\n\n```bash\n$ pstree | grep supervisor\n```\n![Alt text](/img/QQ截图20161108153954.png)\n\n#### 查看监控的进程，发现test running\n\n```bash\n$ supervisorctl -c /etc/supervisor/supervisord.conf\n```\n\n![Alt text](/img/QQ截图20161108154215.png)\n\n#### 命令\n\n```bash\n$ supervisorctl [-c /etc/supervisor/supervisor.conf ] stop|start|restart all #停止|启动|重启 所有进程\n$ supervisorctl [-c /etc/supervisor/supervisor.conf ] #登录控制台\n```\n\n#### 参见[supervisor初体验](http://www.jianshu.com/p/9abffc905645)\n","slug":"Linux-安装supervisor-CentOs-or-RedHat","published":1,"updated":"2016-12-30T08:10:55.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cmc000jugqmctkbgi1z","content":"<hr>\n<h4 id=\"supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。\"><a href=\"#supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。\" class=\"headerlink\" title=\"supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。\"></a>supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。</h4><h4 id=\"supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。\"><a href=\"#supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。\" class=\"headerlink\" title=\"supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。\"></a>supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。</h4><h4 id=\"安装supervisor\"><a href=\"#安装supervisor\" class=\"headerlink\" title=\"安装supervisor\"></a>安装supervisor</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ yum install python-setuptools</div></pre></td></tr></table></figure>\n<p><img src=\"/img/QQ截图20161108151312.png\" alt=\"Alt text\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ easy_install supervisor</div></pre></td></tr></table></figure>\n<p><img src=\"/img/QQ截图20161108151521.png\" alt=\"Alt text\"></p>\n<h4 id=\"测试是否安装成功\"><a href=\"#测试是否安装成功\" class=\"headerlink\" title=\"测试是否安装成功\"></a>测试是否安装成功</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">echo</span>_supervisord_conf</div></pre></td></tr></table></figure>\n<p><img src=\"/img/QQ截图20161108151708.png\" alt=\"Alt text\"></p>\n<h4 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h4><h5 id=\"创建主配置文件\"><a href=\"#创建主配置文件\" class=\"headerlink\" title=\"创建主配置文件\"></a>创建主配置文件</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ mkdir -m 755 -p /etc/supervisor/</div><div class=\"line\">$ <span class=\"built_in\">echo</span>_supervisord_conf &gt; /etc/supervisor/supervisord.conf</div></pre></td></tr></table></figure>\n<h5 id=\"创建项目配置目录\"><a href=\"#创建项目配置目录\" class=\"headerlink\" title=\"创建项目配置目录\"></a>创建项目配置目录</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ mkdir -m 755 conf.d</div></pre></td></tr></table></figure>\n<p><img src=\"/img/QQ截图20161108152106.png\" alt=\"Alt text\"></p>\n<h4 id=\"创建测试\"><a href=\"#创建测试\" class=\"headerlink\" title=\"创建测试\"></a>创建测试</h4><h5 id=\"在-home-tengyunlong-supervisor-simple目录下创建test-c\"><a href=\"#在-home-tengyunlong-supervisor-simple目录下创建test-c\" class=\"headerlink\" title=\"在/home/tengyunlong/supervisor_simple目录下创建test.c\"></a>在/home/tengyunlong/supervisor_simple目录下创建test.c</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tFILE *fp = fopen(<span class=\"string\">\"/home/slightech/supervisor_simple/a.txt\"</span>, <span class=\"string\">\"a+\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (fp == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Can not open file \\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">int</span> ix = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (;; ix++) &#123;</div><div class=\"line\">\t\tfseek(fp, <span class=\"number\">0</span>, SEEK_END);</div><div class=\"line\">\t\t<span class=\"keyword\">char</span> s_add_arr[<span class=\"number\">10</span>];</div><div class=\"line\">\t\t<span class=\"built_in\">memset</span>(s_add_arr, <span class=\"string\">'\\0'</span>, <span class=\"number\">10</span>);</div><div class=\"line\">\t\t<span class=\"built_in\">sprintf</span>(s_add_arr, <span class=\"string\">\"%i\\n\"</span>, ix);</div><div class=\"line\">\t\tfwrite(s_add_arr, <span class=\"built_in\">strlen</span>(s_add_arr), <span class=\"number\">1</span>, fp);</div><div class=\"line\">\t\tsleep(<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfclose(fp);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"编译为test\"><a href=\"#编译为test\" class=\"headerlink\" title=\"编译为test\"></a>编译为test</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ gcc -o <span class=\"built_in\">test</span> test.c</div></pre></td></tr></table></figure>\n<h4 id=\"更改主配置文件，去掉最后两行的分号-，我习惯设置项目配置文件为-conf-格式\"><a href=\"#更改主配置文件，去掉最后两行的分号-，我习惯设置项目配置文件为-conf-格式\" class=\"headerlink\" title=\"更改主配置文件，去掉最后两行的分号(;)，我习惯设置项目配置文件为.conf 格式\"></a>更改主配置文件，去掉最后两行的分号(;)，我习惯设置项目配置文件为.conf 格式</h4><p><img src=\"/img/QQ图片20161108153215.png\" alt=\"Alt text\"></p>\n<h4 id=\"在-etc-supervisor-conf-d-创建test-conf文件\"><a href=\"#在-etc-supervisor-conf-d-创建test-conf文件\" class=\"headerlink\" title=\"在/etc/supervisor/conf.d 创建test.conf文件\"></a>在/etc/supervisor/conf.d 创建test.conf文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">[program:<span class=\"built_in\">test</span>]</div><div class=\"line\"><span class=\"built_in\">command</span>=/home/slightech/supervisor_simple/<span class=\"built_in\">test</span></div><div class=\"line\">;directory= ;directory to cwd to before <span class=\"built_in\">exec</span> (def no cwd)</div><div class=\"line\">autostart=<span class=\"literal\">true</span> ; start at supervisord start (default: <span class=\"literal\">true</span>)</div><div class=\"line\">autorestart=unexpected ; whether/when to restart (default: unexpected)</div><div class=\"line\">startsecs=1 ; number of secs prog must stay running (def. 1)</div><div class=\"line\">redirect_stderr=<span class=\"literal\">true</span> ; redirect proc stderr to stdout (default <span class=\"literal\">false</span>) 错误重定向</div><div class=\"line\">stdout_logfile=/var/<span class=\"built_in\">log</span>/supervisor/test.log ; stout <span class=\"built_in\">log</span> path, NONE of none ;default AUTO,<span class=\"built_in\">log</span>输出</div></pre></td></tr></table></figure>\n<h4 id=\"启动supervisor服务\"><a href=\"#启动supervisor服务\" class=\"headerlink\" title=\"启动supervisor服务\"></a>启动supervisor服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ supervisord -c /etc/supervisor/supervisord.conf</div></pre></td></tr></table></figure>\n<h4 id=\"使用pstree查看进程\"><a href=\"#使用pstree查看进程\" class=\"headerlink\" title=\"使用pstree查看进程\"></a>使用pstree查看进程</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ pstree | grep supervisor</div></pre></td></tr></table></figure>\n<p><img src=\"/img/QQ截图20161108153954.png\" alt=\"Alt text\"></p>\n<h4 id=\"查看监控的进程，发现test-running\"><a href=\"#查看监控的进程，发现test-running\" class=\"headerlink\" title=\"查看监控的进程，发现test running\"></a>查看监控的进程，发现test running</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ supervisorctl -c /etc/supervisor/supervisord.conf</div></pre></td></tr></table></figure>\n<p><img src=\"/img/QQ截图20161108154215.png\" alt=\"Alt text\"></p>\n<h4 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ supervisorctl [-c /etc/supervisor/supervisor.conf ] stop|start|restart all <span class=\"comment\">#停止|启动|重启 所有进程</span></div><div class=\"line\">$ supervisorctl [-c /etc/supervisor/supervisor.conf ] <span class=\"comment\">#登录控制台</span></div></pre></td></tr></table></figure>\n<h4 id=\"参见supervisor初体验\"><a href=\"#参见supervisor初体验\" class=\"headerlink\" title=\"参见supervisor初体验\"></a>参见<a href=\"http://www.jianshu.com/p/9abffc905645\" target=\"_blank\" rel=\"external\">supervisor初体验</a></h4>","excerpt":"","more":"<hr>\n<h4 id=\"supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。\"><a href=\"#supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。\" class=\"headerlink\" title=\"supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。\"></a>supervisor是linux进程管理利器。如果是一个服务程序，要可靠地在后台运行，我们就需要把它做成daemon，最好还能监控进程状态，在意外结束时能自动重启。</h4><h4 id=\"supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。\"><a href=\"#supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。\" class=\"headerlink\" title=\"supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。\"></a>supervisor就是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。</h4><h4 id=\"安装supervisor\"><a href=\"#安装supervisor\" class=\"headerlink\" title=\"安装supervisor\"></a>安装supervisor</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ yum install python-setuptools</div></pre></td></tr></table></figure>\n<p><img src=\"/img/QQ截图20161108151312.png\" alt=\"Alt text\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ easy_install supervisor</div></pre></td></tr></table></figure>\n<p><img src=\"/img/QQ截图20161108151521.png\" alt=\"Alt text\"></p>\n<h4 id=\"测试是否安装成功\"><a href=\"#测试是否安装成功\" class=\"headerlink\" title=\"测试是否安装成功\"></a>测试是否安装成功</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">echo</span>_supervisord_conf</div></pre></td></tr></table></figure>\n<p><img src=\"/img/QQ截图20161108151708.png\" alt=\"Alt text\"></p>\n<h4 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h4><h5 id=\"创建主配置文件\"><a href=\"#创建主配置文件\" class=\"headerlink\" title=\"创建主配置文件\"></a>创建主配置文件</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ mkdir -m 755 -p /etc/supervisor/</div><div class=\"line\">$ <span class=\"built_in\">echo</span>_supervisord_conf &gt; /etc/supervisor/supervisord.conf</div></pre></td></tr></table></figure>\n<h5 id=\"创建项目配置目录\"><a href=\"#创建项目配置目录\" class=\"headerlink\" title=\"创建项目配置目录\"></a>创建项目配置目录</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ mkdir -m 755 conf.d</div></pre></td></tr></table></figure>\n<p><img src=\"/img/QQ截图20161108152106.png\" alt=\"Alt text\"></p>\n<h4 id=\"创建测试\"><a href=\"#创建测试\" class=\"headerlink\" title=\"创建测试\"></a>创建测试</h4><h5 id=\"在-home-tengyunlong-supervisor-simple目录下创建test-c\"><a href=\"#在-home-tengyunlong-supervisor-simple目录下创建test-c\" class=\"headerlink\" title=\"在/home/tengyunlong/supervisor_simple目录下创建test.c\"></a>在/home/tengyunlong/supervisor_simple目录下创建test.c</h5><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\tFILE *fp = fopen(<span class=\"string\">\"/home/slightech/supervisor_simple/a.txt\"</span>, <span class=\"string\">\"a+\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (fp == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Can not open file \\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">int</span> ix = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (;; ix++) &#123;</div><div class=\"line\">\t\tfseek(fp, <span class=\"number\">0</span>, SEEK_END);</div><div class=\"line\">\t\t<span class=\"keyword\">char</span> s_add_arr[<span class=\"number\">10</span>];</div><div class=\"line\">\t\t<span class=\"built_in\">memset</span>(s_add_arr, <span class=\"string\">'\\0'</span>, <span class=\"number\">10</span>);</div><div class=\"line\">\t\t<span class=\"built_in\">sprintf</span>(s_add_arr, <span class=\"string\">\"%i\\n\"</span>, ix);</div><div class=\"line\">\t\tfwrite(s_add_arr, <span class=\"built_in\">strlen</span>(s_add_arr), <span class=\"number\">1</span>, fp);</div><div class=\"line\">\t\tsleep(<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfclose(fp);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"编译为test\"><a href=\"#编译为test\" class=\"headerlink\" title=\"编译为test\"></a>编译为test</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ gcc -o <span class=\"built_in\">test</span> test.c</div></pre></td></tr></table></figure>\n<h4 id=\"更改主配置文件，去掉最后两行的分号-，我习惯设置项目配置文件为-conf-格式\"><a href=\"#更改主配置文件，去掉最后两行的分号-，我习惯设置项目配置文件为-conf-格式\" class=\"headerlink\" title=\"更改主配置文件，去掉最后两行的分号(;)，我习惯设置项目配置文件为.conf 格式\"></a>更改主配置文件，去掉最后两行的分号(;)，我习惯设置项目配置文件为.conf 格式</h4><p><img src=\"/img/QQ图片20161108153215.png\" alt=\"Alt text\"></p>\n<h4 id=\"在-etc-supervisor-conf-d-创建test-conf文件\"><a href=\"#在-etc-supervisor-conf-d-创建test-conf文件\" class=\"headerlink\" title=\"在/etc/supervisor/conf.d 创建test.conf文件\"></a>在/etc/supervisor/conf.d 创建test.conf文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">[program:<span class=\"built_in\">test</span>]</div><div class=\"line\"><span class=\"built_in\">command</span>=/home/slightech/supervisor_simple/<span class=\"built_in\">test</span></div><div class=\"line\">;directory= ;directory to cwd to before <span class=\"built_in\">exec</span> (def no cwd)</div><div class=\"line\">autostart=<span class=\"literal\">true</span> ; start at supervisord start (default: <span class=\"literal\">true</span>)</div><div class=\"line\">autorestart=unexpected ; whether/when to restart (default: unexpected)</div><div class=\"line\">startsecs=1 ; number of secs prog must stay running (def. 1)</div><div class=\"line\">redirect_stderr=<span class=\"literal\">true</span> ; redirect proc stderr to stdout (default <span class=\"literal\">false</span>) 错误重定向</div><div class=\"line\">stdout_logfile=/var/<span class=\"built_in\">log</span>/supervisor/test.log ; stout <span class=\"built_in\">log</span> path, NONE of none ;default AUTO,<span class=\"built_in\">log</span>输出</div></pre></td></tr></table></figure>\n<h4 id=\"启动supervisor服务\"><a href=\"#启动supervisor服务\" class=\"headerlink\" title=\"启动supervisor服务\"></a>启动supervisor服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ supervisord -c /etc/supervisor/supervisord.conf</div></pre></td></tr></table></figure>\n<h4 id=\"使用pstree查看进程\"><a href=\"#使用pstree查看进程\" class=\"headerlink\" title=\"使用pstree查看进程\"></a>使用pstree查看进程</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ pstree | grep supervisor</div></pre></td></tr></table></figure>\n<p><img src=\"/img/QQ截图20161108153954.png\" alt=\"Alt text\"></p>\n<h4 id=\"查看监控的进程，发现test-running\"><a href=\"#查看监控的进程，发现test-running\" class=\"headerlink\" title=\"查看监控的进程，发现test running\"></a>查看监控的进程，发现test running</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ supervisorctl -c /etc/supervisor/supervisord.conf</div></pre></td></tr></table></figure>\n<p><img src=\"/img/QQ截图20161108154215.png\" alt=\"Alt text\"></p>\n<h4 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ supervisorctl [-c /etc/supervisor/supervisor.conf ] stop|start|restart all <span class=\"comment\">#停止|启动|重启 所有进程</span></div><div class=\"line\">$ supervisorctl [-c /etc/supervisor/supervisor.conf ] <span class=\"comment\">#登录控制台</span></div></pre></td></tr></table></figure>\n<h4 id=\"参见supervisor初体验\"><a href=\"#参见supervisor初体验\" class=\"headerlink\" title=\"参见supervisor初体验\"></a>参见<a href=\"http://www.jianshu.com/p/9abffc905645\">supervisor初体验</a></h4>"},{"title":"PHP UTC转GMT时区","date":"2016-08-23T11:29:56.000Z","_content":"\n> 很长时间没有写blog了，并不是因为我偷懒了，而是最近没什么好写的东西，今天就费劲挤出一些东西，写一篇blog。\n\n> 背景：公司的项目海外市场比较多，所以需要兼容多时区问题。这块也是一个比较头疼的问题。\n\n#### 公司主要的云端开发是PHP ci框架，用过ci的都知道，`index.php`的第一句话就是\n\n```php\ndate_default_timezone_set('UTC');\n```\n#### 这就决定了，整个项目的时区是UTC时区。\n\n#### 但是客户端传上来的时区基本上是GMT开头，例如`GMT+8(北京时间)`\n\n#### 所以要把UTC时区转换成GMT时区\n\n#### Code如下\n```php\n$time_zone = \"GMT+8\";\n$time = time();\n$date = date_create(date(\"Y-m-d H:i\", $time), timezone_open('UTC'));\n$date = date_timezone_set($date, timezone_open($time_zone));\n$date = date_format($date, 'Y-m-d H:i');\n```\n\n#### 或者参照[php时区转换转换函数](http://www.poluoluo.com/jzxy/201401/258989.html):\n```php\nfunction toTimeZone($src, $from_tz = 'America/Denver', $to_tz = 'Asia/Shanghai', $fm = 'Y-m-d H:i:s') {\n    $datetime = new DateTime($src, new DateTimeZone($from_tz));\n    $datetime->setTimezone(new DateTimeZone($to_tz));\n    return $datetime->format($fm);\n}\n```\n\n","source":"_posts/PHP-UTC转GMT时区.md","raw":"---\ntitle: PHP UTC转GMT时区\ndate: 2016-08-23 19:29:56\ntags: PHP\n---\n\n> 很长时间没有写blog了，并不是因为我偷懒了，而是最近没什么好写的东西，今天就费劲挤出一些东西，写一篇blog。\n\n> 背景：公司的项目海外市场比较多，所以需要兼容多时区问题。这块也是一个比较头疼的问题。\n\n#### 公司主要的云端开发是PHP ci框架，用过ci的都知道，`index.php`的第一句话就是\n\n```php\ndate_default_timezone_set('UTC');\n```\n#### 这就决定了，整个项目的时区是UTC时区。\n\n#### 但是客户端传上来的时区基本上是GMT开头，例如`GMT+8(北京时间)`\n\n#### 所以要把UTC时区转换成GMT时区\n\n#### Code如下\n```php\n$time_zone = \"GMT+8\";\n$time = time();\n$date = date_create(date(\"Y-m-d H:i\", $time), timezone_open('UTC'));\n$date = date_timezone_set($date, timezone_open($time_zone));\n$date = date_format($date, 'Y-m-d H:i');\n```\n\n#### 或者参照[php时区转换转换函数](http://www.poluoluo.com/jzxy/201401/258989.html):\n```php\nfunction toTimeZone($src, $from_tz = 'America/Denver', $to_tz = 'Asia/Shanghai', $fm = 'Y-m-d H:i:s') {\n    $datetime = new DateTime($src, new DateTimeZone($from_tz));\n    $datetime->setTimezone(new DateTimeZone($to_tz));\n    return $datetime->format($fm);\n}\n```\n\n","slug":"PHP-UTC转GMT时区","published":1,"updated":"2016-08-23T11:32:28.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cme000lugqm3c4n93pc","content":"<blockquote>\n<p>很长时间没有写blog了，并不是因为我偷懒了，而是最近没什么好写的东西，今天就费劲挤出一些东西，写一篇blog。</p>\n<p>背景：公司的项目海外市场比较多，所以需要兼容多时区问题。这块也是一个比较头疼的问题。</p>\n</blockquote>\n<h4 id=\"公司主要的云端开发是PHP-ci框架，用过ci的都知道，index-php的第一句话就是\"><a href=\"#公司主要的云端开发是PHP-ci框架，用过ci的都知道，index-php的第一句话就是\" class=\"headerlink\" title=\"公司主要的云端开发是PHP ci框架，用过ci的都知道，index.php的第一句话就是\"></a>公司主要的云端开发是PHP ci框架，用过ci的都知道，<code>index.php</code>的第一句话就是</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">date_default_timezone_set(<span class=\"string\">'UTC'</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"这就决定了，整个项目的时区是UTC时区。\"><a href=\"#这就决定了，整个项目的时区是UTC时区。\" class=\"headerlink\" title=\"这就决定了，整个项目的时区是UTC时区。\"></a>这就决定了，整个项目的时区是UTC时区。</h4><h4 id=\"但是客户端传上来的时区基本上是GMT开头，例如GMT-8-北京时间\"><a href=\"#但是客户端传上来的时区基本上是GMT开头，例如GMT-8-北京时间\" class=\"headerlink\" title=\"但是客户端传上来的时区基本上是GMT开头，例如GMT+8(北京时间)\"></a>但是客户端传上来的时区基本上是GMT开头，例如<code>GMT+8(北京时间)</code></h4><h4 id=\"所以要把UTC时区转换成GMT时区\"><a href=\"#所以要把UTC时区转换成GMT时区\" class=\"headerlink\" title=\"所以要把UTC时区转换成GMT时区\"></a>所以要把UTC时区转换成GMT时区</h4><h4 id=\"Code如下\"><a href=\"#Code如下\" class=\"headerlink\" title=\"Code如下\"></a>Code如下</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">$time_zone = <span class=\"string\">\"GMT+8\"</span>;</div><div class=\"line\">$time = time();</div><div class=\"line\">$date = date_create(date(<span class=\"string\">\"Y-m-d H:i\"</span>, $time), timezone_open(<span class=\"string\">'UTC'</span>));</div><div class=\"line\">$date = date_timezone_set($date, timezone_open($time_zone));</div><div class=\"line\">$date = date_format($date, <span class=\"string\">'Y-m-d H:i'</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"或者参照php时区转换转换函数\"><a href=\"#或者参照php时区转换转换函数\" class=\"headerlink\" title=\"或者参照php时区转换转换函数:\"></a>或者参照<a href=\"http://www.poluoluo.com/jzxy/201401/258989.html\" target=\"_blank\" rel=\"external\">php时区转换转换函数</a>:</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toTimeZone</span><span class=\"params\">($src, $from_tz = <span class=\"string\">'America/Denver'</span>, $to_tz = <span class=\"string\">'Asia/Shanghai'</span>, $fm = <span class=\"string\">'Y-m-d H:i:s'</span>)</span> </span>&#123;</div><div class=\"line\">    $datetime = <span class=\"keyword\">new</span> DateTime($src, <span class=\"keyword\">new</span> DateTimeZone($from_tz));</div><div class=\"line\">    $datetime-&gt;setTimezone(<span class=\"keyword\">new</span> DateTimeZone($to_tz));</div><div class=\"line\">    <span class=\"keyword\">return</span> $datetime-&gt;format($fm);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<blockquote>\n<p>很长时间没有写blog了，并不是因为我偷懒了，而是最近没什么好写的东西，今天就费劲挤出一些东西，写一篇blog。</p>\n<p>背景：公司的项目海外市场比较多，所以需要兼容多时区问题。这块也是一个比较头疼的问题。</p>\n</blockquote>\n<h4 id=\"公司主要的云端开发是PHP-ci框架，用过ci的都知道，index-php的第一句话就是\"><a href=\"#公司主要的云端开发是PHP-ci框架，用过ci的都知道，index-php的第一句话就是\" class=\"headerlink\" title=\"公司主要的云端开发是PHP ci框架，用过ci的都知道，index.php的第一句话就是\"></a>公司主要的云端开发是PHP ci框架，用过ci的都知道，<code>index.php</code>的第一句话就是</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">date_default_timezone_set(<span class=\"string\">'UTC'</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"这就决定了，整个项目的时区是UTC时区。\"><a href=\"#这就决定了，整个项目的时区是UTC时区。\" class=\"headerlink\" title=\"这就决定了，整个项目的时区是UTC时区。\"></a>这就决定了，整个项目的时区是UTC时区。</h4><h4 id=\"但是客户端传上来的时区基本上是GMT开头，例如GMT-8-北京时间\"><a href=\"#但是客户端传上来的时区基本上是GMT开头，例如GMT-8-北京时间\" class=\"headerlink\" title=\"但是客户端传上来的时区基本上是GMT开头，例如GMT+8(北京时间)\"></a>但是客户端传上来的时区基本上是GMT开头，例如<code>GMT+8(北京时间)</code></h4><h4 id=\"所以要把UTC时区转换成GMT时区\"><a href=\"#所以要把UTC时区转换成GMT时区\" class=\"headerlink\" title=\"所以要把UTC时区转换成GMT时区\"></a>所以要把UTC时区转换成GMT时区</h4><h4 id=\"Code如下\"><a href=\"#Code如下\" class=\"headerlink\" title=\"Code如下\"></a>Code如下</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">$time_zone = <span class=\"string\">\"GMT+8\"</span>;</div><div class=\"line\">$time = time();</div><div class=\"line\">$date = date_create(date(<span class=\"string\">\"Y-m-d H:i\"</span>, $time), timezone_open(<span class=\"string\">'UTC'</span>));</div><div class=\"line\">$date = date_timezone_set($date, timezone_open($time_zone));</div><div class=\"line\">$date = date_format($date, <span class=\"string\">'Y-m-d H:i'</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"或者参照php时区转换转换函数\"><a href=\"#或者参照php时区转换转换函数\" class=\"headerlink\" title=\"或者参照php时区转换转换函数:\"></a>或者参照<a href=\"http://www.poluoluo.com/jzxy/201401/258989.html\">php时区转换转换函数</a>:</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toTimeZone</span><span class=\"params\">($src, $from_tz = <span class=\"string\">'America/Denver'</span>, $to_tz = <span class=\"string\">'Asia/Shanghai'</span>, $fm = <span class=\"string\">'Y-m-d H:i:s'</span>)</span> </span>&#123;</div><div class=\"line\">    $datetime = <span class=\"keyword\">new</span> DateTime($src, <span class=\"keyword\">new</span> DateTimeZone($from_tz));</div><div class=\"line\">    $datetime-&gt;setTimezone(<span class=\"keyword\">new</span> DateTimeZone($to_tz));</div><div class=\"line\">    <span class=\"keyword\">return</span> $datetime-&gt;format($fm);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"Nodejs 使用pm2实现开机自启","date":"2016-08-26T07:28:23.000Z","_content":"\n#### 公司有个nodejs的云服务，但是没在开机自启的进程中，如果服务器因为某种原因 `reboot` 的话，服务就挂掉了。这肯定是不允许的。so 想要写个脚本，来实现开机自启。奈何 `shell` 太渣渣，搞不定。所以在社区找到了`pm2`，可以把`nodejs`加到自启服务中。\n\n#### pm2有一些优势:\n> * 自带负载均衡功能的node应用进程管理器\n> * 可以监控应用CPU和内存情况\n> * 操作简单\n> * 非常适合IaaS结构\n\n#### pm2也有劣势:\n> * 不适合PaaS结构\n\n#### 拓展:\n> * SaaS: Software-as-a-Service 软件即服务，例如Google的Gmail，把软件做成服务\n> * IaaS: Infrastructure-as-a-Service 基础设施即服务，这是我们最常见的云端接口，网站等\n> * PaaS: Platform-as-a-Service 平台即服务，专门做平台服务，例如新浪云等\n> 详细了解参见[云服务模式：SaaS、PaaS和IaaS，哪一种适合你？](http://cloud.51cto.com/art/201107/278903.htm)\n\n#### 1、全局安装pm2\n\n```bash\n$ npm install pm2 -g\n```\n#### 2、找到项目的目录，并使用pm2启动node服务\n\n```bash\n$ cd /usr/share/nginx/wechat-iot\n$ pm2 start app.js\n[PM2] Starting app.js in fork_mode (1 instance)\n[PM2] Done.\n┌──────────┬────┬──────┬───────┬────────┬─────────┬────────┬─────────────┬──────────┐\n│ App name │ id │ mode │ pid   │ status │ restart │ uptime │ memory      │ watching │\n├──────────┼────┼──────┼───────┼────────┼─────────┼────────┼─────────────┼──────────┤\n│ app      │ 0  │ fork │ 12120 │ online │ 0       │ 0s     │ 15.863 MB   │ disabled │\n└──────────┴────┴──────┴───────┴────────┴─────────┴────────┴─────────────┴──────────┘\n Use `pm2 show <id|name>` to get more details about an app\n```\n\n#### 3、把node服务加到进程\n\n```bash\n$ pm2 startup centos #pm2 startup ubuntu\n$ pm2 save \n```\n\n#### 其他命令\n\n```bash\n$ pm2 stop app.js #停止node服务\n$ pm2 restart app.js #重启node服务\n$ pm2 delete app.js #在进程中删除\n$ pm2 status #查看状态\n$ pm2 monit #查看占用的CPU和内存\n```\n\n","source":"_posts/Nodejs-使用pm2实现开机自启.md","raw":"---\ntitle: Nodejs 使用pm2实现开机自启\ndate: 2016-08-26 15:28:23\ntags: Nodejs\ncategories: NodeJs\n---\n\n#### 公司有个nodejs的云服务，但是没在开机自启的进程中，如果服务器因为某种原因 `reboot` 的话，服务就挂掉了。这肯定是不允许的。so 想要写个脚本，来实现开机自启。奈何 `shell` 太渣渣，搞不定。所以在社区找到了`pm2`，可以把`nodejs`加到自启服务中。\n\n#### pm2有一些优势:\n> * 自带负载均衡功能的node应用进程管理器\n> * 可以监控应用CPU和内存情况\n> * 操作简单\n> * 非常适合IaaS结构\n\n#### pm2也有劣势:\n> * 不适合PaaS结构\n\n#### 拓展:\n> * SaaS: Software-as-a-Service 软件即服务，例如Google的Gmail，把软件做成服务\n> * IaaS: Infrastructure-as-a-Service 基础设施即服务，这是我们最常见的云端接口，网站等\n> * PaaS: Platform-as-a-Service 平台即服务，专门做平台服务，例如新浪云等\n> 详细了解参见[云服务模式：SaaS、PaaS和IaaS，哪一种适合你？](http://cloud.51cto.com/art/201107/278903.htm)\n\n#### 1、全局安装pm2\n\n```bash\n$ npm install pm2 -g\n```\n#### 2、找到项目的目录，并使用pm2启动node服务\n\n```bash\n$ cd /usr/share/nginx/wechat-iot\n$ pm2 start app.js\n[PM2] Starting app.js in fork_mode (1 instance)\n[PM2] Done.\n┌──────────┬────┬──────┬───────┬────────┬─────────┬────────┬─────────────┬──────────┐\n│ App name │ id │ mode │ pid   │ status │ restart │ uptime │ memory      │ watching │\n├──────────┼────┼──────┼───────┼────────┼─────────┼────────┼─────────────┼──────────┤\n│ app      │ 0  │ fork │ 12120 │ online │ 0       │ 0s     │ 15.863 MB   │ disabled │\n└──────────┴────┴──────┴───────┴────────┴─────────┴────────┴─────────────┴──────────┘\n Use `pm2 show <id|name>` to get more details about an app\n```\n\n#### 3、把node服务加到进程\n\n```bash\n$ pm2 startup centos #pm2 startup ubuntu\n$ pm2 save \n```\n\n#### 其他命令\n\n```bash\n$ pm2 stop app.js #停止node服务\n$ pm2 restart app.js #重启node服务\n$ pm2 delete app.js #在进程中删除\n$ pm2 status #查看状态\n$ pm2 monit #查看占用的CPU和内存\n```\n\n","slug":"Nodejs-使用pm2实现开机自启","published":1,"updated":"2016-08-26T11:14:47.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cmq000nugqmthv3rum6","content":"<h4 id=\"公司有个nodejs的云服务，但是没在开机自启的进程中，如果服务器因为某种原因-reboot-的话，服务就挂掉了。这肯定是不允许的。so-想要写个脚本，来实现开机自启。奈何-shell-太渣渣，搞不定。所以在社区找到了pm2，可以把nodejs加到自启服务中。\"><a href=\"#公司有个nodejs的云服务，但是没在开机自启的进程中，如果服务器因为某种原因-reboot-的话，服务就挂掉了。这肯定是不允许的。so-想要写个脚本，来实现开机自启。奈何-shell-太渣渣，搞不定。所以在社区找到了pm2，可以把nodejs加到自启服务中。\" class=\"headerlink\" title=\"公司有个nodejs的云服务，但是没在开机自启的进程中，如果服务器因为某种原因 reboot 的话，服务就挂掉了。这肯定是不允许的。so 想要写个脚本，来实现开机自启。奈何 shell 太渣渣，搞不定。所以在社区找到了pm2，可以把nodejs加到自启服务中。\"></a>公司有个nodejs的云服务，但是没在开机自启的进程中，如果服务器因为某种原因 <code>reboot</code> 的话，服务就挂掉了。这肯定是不允许的。so 想要写个脚本，来实现开机自启。奈何 <code>shell</code> 太渣渣，搞不定。所以在社区找到了<code>pm2</code>，可以把<code>nodejs</code>加到自启服务中。</h4><h4 id=\"pm2有一些优势\"><a href=\"#pm2有一些优势\" class=\"headerlink\" title=\"pm2有一些优势:\"></a>pm2有一些优势:</h4><blockquote>\n<ul>\n<li>自带负载均衡功能的node应用进程管理器</li>\n<li>可以监控应用CPU和内存情况</li>\n<li>操作简单</li>\n<li>非常适合IaaS结构</li>\n</ul>\n</blockquote>\n<h4 id=\"pm2也有劣势\"><a href=\"#pm2也有劣势\" class=\"headerlink\" title=\"pm2也有劣势:\"></a>pm2也有劣势:</h4><blockquote>\n<ul>\n<li>不适合PaaS结构</li>\n</ul>\n</blockquote>\n<h4 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展:\"></a>拓展:</h4><blockquote>\n<ul>\n<li>SaaS: Software-as-a-Service 软件即服务，例如Google的Gmail，把软件做成服务</li>\n<li>IaaS: Infrastructure-as-a-Service 基础设施即服务，这是我们最常见的云端接口，网站等</li>\n<li>PaaS: Platform-as-a-Service 平台即服务，专门做平台服务，例如新浪云等<br>详细了解参见<a href=\"http://cloud.51cto.com/art/201107/278903.htm\" target=\"_blank\" rel=\"external\">云服务模式：SaaS、PaaS和IaaS，哪一种适合你？</a></li>\n</ul>\n</blockquote>\n<h4 id=\"1、全局安装pm2\"><a href=\"#1、全局安装pm2\" class=\"headerlink\" title=\"1、全局安装pm2\"></a>1、全局安装pm2</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ npm install pm2 -g</div></pre></td></tr></table></figure>\n<h4 id=\"2、找到项目的目录，并使用pm2启动node服务\"><a href=\"#2、找到项目的目录，并使用pm2启动node服务\" class=\"headerlink\" title=\"2、找到项目的目录，并使用pm2启动node服务\"></a>2、找到项目的目录，并使用pm2启动node服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /usr/share/nginx/wechat-iot</div><div class=\"line\">$ pm2 start app.js</div><div class=\"line\">[PM2] Starting app.js <span class=\"keyword\">in</span> fork_mode (1 instance)</div><div class=\"line\">[PM2] Done.</div><div class=\"line\">┌──────────┬────┬──────┬───────┬────────┬─────────┬────────┬─────────────┬──────────┐</div><div class=\"line\">│ App name │ id │ mode │ pid   │ status │ restart │ uptime │ memory      │ watching │</div><div class=\"line\">├──────────┼────┼──────┼───────┼────────┼─────────┼────────┼─────────────┼──────────┤</div><div class=\"line\">│ app      │ 0  │ fork │ 12120 │ online │ 0       │ 0s     │ 15.863 MB   │ disabled │</div><div class=\"line\">└──────────┴────┴──────┴───────┴────────┴─────────┴────────┴─────────────┴──────────┘</div><div class=\"line\"> Use `pm2 show &lt;id|name&gt;` to get more details about an app</div></pre></td></tr></table></figure>\n<h4 id=\"3、把node服务加到进程\"><a href=\"#3、把node服务加到进程\" class=\"headerlink\" title=\"3、把node服务加到进程\"></a>3、把node服务加到进程</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ pm2 startup centos <span class=\"comment\">#pm2 startup ubuntu</span></div><div class=\"line\">$ pm2 save</div></pre></td></tr></table></figure>\n<h4 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ pm2 stop app.js <span class=\"comment\">#停止node服务</span></div><div class=\"line\">$ pm2 restart app.js <span class=\"comment\">#重启node服务</span></div><div class=\"line\">$ pm2 delete app.js <span class=\"comment\">#在进程中删除</span></div><div class=\"line\">$ pm2 status <span class=\"comment\">#查看状态</span></div><div class=\"line\">$ pm2 monit <span class=\"comment\">#查看占用的CPU和内存</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h4 id=\"公司有个nodejs的云服务，但是没在开机自启的进程中，如果服务器因为某种原因-reboot-的话，服务就挂掉了。这肯定是不允许的。so-想要写个脚本，来实现开机自启。奈何-shell-太渣渣，搞不定。所以在社区找到了pm2，可以把nodejs加到自启服务中。\"><a href=\"#公司有个nodejs的云服务，但是没在开机自启的进程中，如果服务器因为某种原因-reboot-的话，服务就挂掉了。这肯定是不允许的。so-想要写个脚本，来实现开机自启。奈何-shell-太渣渣，搞不定。所以在社区找到了pm2，可以把nodejs加到自启服务中。\" class=\"headerlink\" title=\"公司有个nodejs的云服务，但是没在开机自启的进程中，如果服务器因为某种原因 reboot 的话，服务就挂掉了。这肯定是不允许的。so 想要写个脚本，来实现开机自启。奈何 shell 太渣渣，搞不定。所以在社区找到了pm2，可以把nodejs加到自启服务中。\"></a>公司有个nodejs的云服务，但是没在开机自启的进程中，如果服务器因为某种原因 <code>reboot</code> 的话，服务就挂掉了。这肯定是不允许的。so 想要写个脚本，来实现开机自启。奈何 <code>shell</code> 太渣渣，搞不定。所以在社区找到了<code>pm2</code>，可以把<code>nodejs</code>加到自启服务中。</h4><h4 id=\"pm2有一些优势\"><a href=\"#pm2有一些优势\" class=\"headerlink\" title=\"pm2有一些优势:\"></a>pm2有一些优势:</h4><blockquote>\n<ul>\n<li>自带负载均衡功能的node应用进程管理器</li>\n<li>可以监控应用CPU和内存情况</li>\n<li>操作简单</li>\n<li>非常适合IaaS结构</li>\n</ul>\n</blockquote>\n<h4 id=\"pm2也有劣势\"><a href=\"#pm2也有劣势\" class=\"headerlink\" title=\"pm2也有劣势:\"></a>pm2也有劣势:</h4><blockquote>\n<ul>\n<li>不适合PaaS结构</li>\n</ul>\n</blockquote>\n<h4 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展:\"></a>拓展:</h4><blockquote>\n<ul>\n<li>SaaS: Software-as-a-Service 软件即服务，例如Google的Gmail，把软件做成服务</li>\n<li>IaaS: Infrastructure-as-a-Service 基础设施即服务，这是我们最常见的云端接口，网站等</li>\n<li>PaaS: Platform-as-a-Service 平台即服务，专门做平台服务，例如新浪云等<br>详细了解参见<a href=\"http://cloud.51cto.com/art/201107/278903.htm\">云服务模式：SaaS、PaaS和IaaS，哪一种适合你？</a></li>\n</ul>\n</blockquote>\n<h4 id=\"1、全局安装pm2\"><a href=\"#1、全局安装pm2\" class=\"headerlink\" title=\"1、全局安装pm2\"></a>1、全局安装pm2</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ npm install pm2 -g</div></pre></td></tr></table></figure>\n<h4 id=\"2、找到项目的目录，并使用pm2启动node服务\"><a href=\"#2、找到项目的目录，并使用pm2启动node服务\" class=\"headerlink\" title=\"2、找到项目的目录，并使用pm2启动node服务\"></a>2、找到项目的目录，并使用pm2启动node服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /usr/share/nginx/wechat-iot</div><div class=\"line\">$ pm2 start app.js</div><div class=\"line\">[PM2] Starting app.js <span class=\"keyword\">in</span> fork_mode (1 instance)</div><div class=\"line\">[PM2] Done.</div><div class=\"line\">┌──────────┬────┬──────┬───────┬────────┬─────────┬────────┬─────────────┬──────────┐</div><div class=\"line\">│ App name │ id │ mode │ pid   │ status │ restart │ uptime │ memory      │ watching │</div><div class=\"line\">├──────────┼────┼──────┼───────┼────────┼─────────┼────────┼─────────────┼──────────┤</div><div class=\"line\">│ app      │ 0  │ fork │ 12120 │ online │ 0       │ 0s     │ 15.863 MB   │ disabled │</div><div class=\"line\">└──────────┴────┴──────┴───────┴────────┴─────────┴────────┴─────────────┴──────────┘</div><div class=\"line\"> Use `pm2 show &lt;id|name&gt;` to get more details about an app</div></pre></td></tr></table></figure>\n<h4 id=\"3、把node服务加到进程\"><a href=\"#3、把node服务加到进程\" class=\"headerlink\" title=\"3、把node服务加到进程\"></a>3、把node服务加到进程</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ pm2 startup centos <span class=\"comment\">#pm2 startup ubuntu</span></div><div class=\"line\">$ pm2 save</div></pre></td></tr></table></figure>\n<h4 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ pm2 stop app.js <span class=\"comment\">#停止node服务</span></div><div class=\"line\">$ pm2 restart app.js <span class=\"comment\">#重启node服务</span></div><div class=\"line\">$ pm2 delete app.js <span class=\"comment\">#在进程中删除</span></div><div class=\"line\">$ pm2 status <span class=\"comment\">#查看状态</span></div><div class=\"line\">$ pm2 monit <span class=\"comment\">#查看占用的CPU和内存</span></div></pre></td></tr></table></figure>\n"},{"title":"NodeJs 多语言包","date":"2016-07-26T11:00:00.000Z","_content":"### NodeJs实现多语言包\n\n公司的项目是PHP CI ( CodeIgniter ) 框架，框架有很多功能，可以切换多种语言包，Chinese/English。今天接到新需求，原有的Nodejs项目，也要实现多语言问题，在网上找到好多资料，也没有找到有用的。后来就在[Github](https://github.com)找了找资源，废了九牛二虎之力终于找到了。\n\n#### 1) 安装语言包langs\n\n命令和安装express差不多：\n\n```bash\n$ npm install langs --save\n```\n\n#### 2) 引入拓展\n\n```bash\nvar langs = require('langs');\n```\n\n#### 3) 获取url参数，根据参数判断语言类别\n\n```bash\nexports.index = function (req, res, next) { \n\tvar query = req.query;\n\tvar lang = query.lang;\n\tvar user_id = query.user_id;\n\tvar token = query.token;\n\tif (lang == 'chinese') {\n\t\tvar lang = langs.where(\"name\", \"Chinese\");\n\t} else {\n\t\tvar lang = langs.where(\"name\", \"English\");\n\t}\n\tres.render('index', {json_data});\n}\n```\n\n#### 4) 具体语言配置在 node_modules/langs/data.json 中配置\n\n#### 5) 拓展位置[nodejs-langs](https://github.com/adlawson/nodejs-langs)\n","source":"_posts/NodeJs-多语言包.md","raw":"---\ntitle: NodeJs 多语言包\ndate: 2016-07-26 19:00:00\ntags: Nodejs\ncategories: NodeJs\n---\n### NodeJs实现多语言包\n\n公司的项目是PHP CI ( CodeIgniter ) 框架，框架有很多功能，可以切换多种语言包，Chinese/English。今天接到新需求，原有的Nodejs项目，也要实现多语言问题，在网上找到好多资料，也没有找到有用的。后来就在[Github](https://github.com)找了找资源，废了九牛二虎之力终于找到了。\n\n#### 1) 安装语言包langs\n\n命令和安装express差不多：\n\n```bash\n$ npm install langs --save\n```\n\n#### 2) 引入拓展\n\n```bash\nvar langs = require('langs');\n```\n\n#### 3) 获取url参数，根据参数判断语言类别\n\n```bash\nexports.index = function (req, res, next) { \n\tvar query = req.query;\n\tvar lang = query.lang;\n\tvar user_id = query.user_id;\n\tvar token = query.token;\n\tif (lang == 'chinese') {\n\t\tvar lang = langs.where(\"name\", \"Chinese\");\n\t} else {\n\t\tvar lang = langs.where(\"name\", \"English\");\n\t}\n\tres.render('index', {json_data});\n}\n```\n\n#### 4) 具体语言配置在 node_modules/langs/data.json 中配置\n\n#### 5) 拓展位置[nodejs-langs](https://github.com/adlawson/nodejs-langs)\n","slug":"NodeJs-多语言包","published":1,"updated":"2016-07-29T07:18:16.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cmt000pugqmdtr6x3fc","content":"<h3 id=\"NodeJs实现多语言包\"><a href=\"#NodeJs实现多语言包\" class=\"headerlink\" title=\"NodeJs实现多语言包\"></a>NodeJs实现多语言包</h3><p>公司的项目是PHP CI ( CodeIgniter ) 框架，框架有很多功能，可以切换多种语言包，Chinese/English。今天接到新需求，原有的Nodejs项目，也要实现多语言问题，在网上找到好多资料，也没有找到有用的。后来就在<a href=\"https://github.com\" target=\"_blank\" rel=\"external\">Github</a>找了找资源，废了九牛二虎之力终于找到了。</p>\n<h4 id=\"1-安装语言包langs\"><a href=\"#1-安装语言包langs\" class=\"headerlink\" title=\"1) 安装语言包langs\"></a>1) 安装语言包langs</h4><p>命令和安装express差不多：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ npm install langs --save</div></pre></td></tr></table></figure>\n<h4 id=\"2-引入拓展\"><a href=\"#2-引入拓展\" class=\"headerlink\" title=\"2) 引入拓展\"></a>2) 引入拓展</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var langs = require(<span class=\"string\">'langs'</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"3-获取url参数，根据参数判断语言类别\"><a href=\"#3-获取url参数，根据参数判断语言类别\" class=\"headerlink\" title=\"3) 获取url参数，根据参数判断语言类别\"></a>3) 获取url参数，根据参数判断语言类别</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">exports.index = <span class=\"keyword\">function</span> (req, res, next) &#123; </div><div class=\"line\">\tvar query = req.query;</div><div class=\"line\">\tvar lang = query.lang;</div><div class=\"line\">\tvar user_id = query.user_id;</div><div class=\"line\">\tvar token = query.token;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (lang == <span class=\"string\">'chinese'</span>) &#123;</div><div class=\"line\">\t\tvar lang = langs.where(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"Chinese\"</span>);</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tvar lang = langs.where(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"English\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tres.render(<span class=\"string\">'index'</span>, &#123;json_data&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-具体语言配置在-node-modules-langs-data-json-中配置\"><a href=\"#4-具体语言配置在-node-modules-langs-data-json-中配置\" class=\"headerlink\" title=\"4) 具体语言配置在 node_modules/langs/data.json 中配置\"></a>4) 具体语言配置在 node_modules/langs/data.json 中配置</h4><h4 id=\"5-拓展位置nodejs-langs\"><a href=\"#5-拓展位置nodejs-langs\" class=\"headerlink\" title=\"5) 拓展位置nodejs-langs\"></a>5) 拓展位置<a href=\"https://github.com/adlawson/nodejs-langs\" target=\"_blank\" rel=\"external\">nodejs-langs</a></h4>","excerpt":"","more":"<h3 id=\"NodeJs实现多语言包\"><a href=\"#NodeJs实现多语言包\" class=\"headerlink\" title=\"NodeJs实现多语言包\"></a>NodeJs实现多语言包</h3><p>公司的项目是PHP CI ( CodeIgniter ) 框架，框架有很多功能，可以切换多种语言包，Chinese/English。今天接到新需求，原有的Nodejs项目，也要实现多语言问题，在网上找到好多资料，也没有找到有用的。后来就在<a href=\"https://github.com\">Github</a>找了找资源，废了九牛二虎之力终于找到了。</p>\n<h4 id=\"1-安装语言包langs\"><a href=\"#1-安装语言包langs\" class=\"headerlink\" title=\"1) 安装语言包langs\"></a>1) 安装语言包langs</h4><p>命令和安装express差不多：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ npm install langs --save</div></pre></td></tr></table></figure>\n<h4 id=\"2-引入拓展\"><a href=\"#2-引入拓展\" class=\"headerlink\" title=\"2) 引入拓展\"></a>2) 引入拓展</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var langs = require(<span class=\"string\">'langs'</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"3-获取url参数，根据参数判断语言类别\"><a href=\"#3-获取url参数，根据参数判断语言类别\" class=\"headerlink\" title=\"3) 获取url参数，根据参数判断语言类别\"></a>3) 获取url参数，根据参数判断语言类别</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">exports.index = <span class=\"keyword\">function</span> (req, res, next) &#123; </div><div class=\"line\">\tvar query = req.query;</div><div class=\"line\">\tvar lang = query.lang;</div><div class=\"line\">\tvar user_id = query.user_id;</div><div class=\"line\">\tvar token = query.token;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (lang == <span class=\"string\">'chinese'</span>) &#123;</div><div class=\"line\">\t\tvar lang = langs.where(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"Chinese\"</span>);</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tvar lang = langs.where(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"English\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tres.render(<span class=\"string\">'index'</span>, &#123;json_data&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-具体语言配置在-node-modules-langs-data-json-中配置\"><a href=\"#4-具体语言配置在-node-modules-langs-data-json-中配置\" class=\"headerlink\" title=\"4) 具体语言配置在 node_modules/langs/data.json 中配置\"></a>4) 具体语言配置在 node_modules/langs/data.json 中配置</h4><h4 id=\"5-拓展位置nodejs-langs\"><a href=\"#5-拓展位置nodejs-langs\" class=\"headerlink\" title=\"5) 拓展位置nodejs-langs\"></a>5) 拓展位置<a href=\"https://github.com/adlawson/nodejs-langs\">nodejs-langs</a></h4>"},{"title":"PHP curl传送json数据","date":"2016-07-25T12:28:01.000Z","_content":"### PHP curl传送json数据\n#### 说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）\n#### 今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file_get_contents()和json_decode()。\n\n#### 1)定义数据格式\n\n```php\n$params = array(\n\t'name' => 'Tyler Teng',\n\t'sex'  => 'male'\n);\n$params = json_encode($params);\n```\n\n#### 2)创建curl句柄，并且采用post方式进行传输\n\n```php\n$url    =  'http://localhost/get.php';\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $params);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n$out = curl_exec($ch);\ncurl_close($ch);\n```\n\n#### 3) 一般情况下，我们会在get.php使用\n```php\nprint_r($_POST);\n//string 'Array()' (length=10)\n```\n这个时候一定是空的，因为现在的数据不是以键值对传输的，而是使用数据流进行传输。所以应该使用\n```php\nprint_r(file_get_contents('php://input'));\n//string '{\"name\":\"Tyler Teng\",\"sex\":\"male\"}' (length=34)\n```\n来检验一下是不是有数据。\n\n#### 4)使用json_decode()函数进行解析。\n```php\n$json = file_get_contents('php://input');\n$array = json_decode($json, true);\n```\n\n#### 5)解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了\n```php\necho $array['name'];\n//string 'Tyler Teng' (length=10)\n```","source":"_posts/PHP-curl传送json数据.md","raw":"---\ntitle: PHP curl传送json数据\ndate: 2016-07-25 20:28:01\ntags: curl json\ncategories: PHP\n---\n### PHP curl传送json数据\n#### 说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）\n#### 今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file_get_contents()和json_decode()。\n\n#### 1)定义数据格式\n\n```php\n$params = array(\n\t'name' => 'Tyler Teng',\n\t'sex'  => 'male'\n);\n$params = json_encode($params);\n```\n\n#### 2)创建curl句柄，并且采用post方式进行传输\n\n```php\n$url    =  'http://localhost/get.php';\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $params);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n$out = curl_exec($ch);\ncurl_close($ch);\n```\n\n#### 3) 一般情况下，我们会在get.php使用\n```php\nprint_r($_POST);\n//string 'Array()' (length=10)\n```\n这个时候一定是空的，因为现在的数据不是以键值对传输的，而是使用数据流进行传输。所以应该使用\n```php\nprint_r(file_get_contents('php://input'));\n//string '{\"name\":\"Tyler Teng\",\"sex\":\"male\"}' (length=34)\n```\n来检验一下是不是有数据。\n\n#### 4)使用json_decode()函数进行解析。\n```php\n$json = file_get_contents('php://input');\n$array = json_decode($json, true);\n```\n\n#### 5)解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了\n```php\necho $array['name'];\n//string 'Tyler Teng' (length=10)\n```","slug":"PHP-curl传送json数据","published":1,"updated":"2016-07-27T11:25:24.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cmv000tugqmsr9xlwjq","content":"<h3 id=\"PHP-curl传送json数据\"><a href=\"#PHP-curl传送json数据\" class=\"headerlink\" title=\"PHP curl传送json数据\"></a>PHP curl传送json数据</h3><h4 id=\"说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）\"><a href=\"#说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）\" class=\"headerlink\" title=\"说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）\"></a>说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）</h4><h4 id=\"今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file-get-contents-和json-decode-。\"><a href=\"#今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file-get-contents-和json-decode-。\" class=\"headerlink\" title=\"今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file_get_contents()和json_decode()。\"></a>今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file_get_contents()和json_decode()。</h4><h4 id=\"1-定义数据格式\"><a href=\"#1-定义数据格式\" class=\"headerlink\" title=\"1)定义数据格式\"></a>1)定义数据格式</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">$params = <span class=\"keyword\">array</span>(</div><div class=\"line\">\t<span class=\"string\">'name'</span> =&gt; <span class=\"string\">'Tyler Teng'</span>,</div><div class=\"line\">\t<span class=\"string\">'sex'</span>  =&gt; <span class=\"string\">'male'</span></div><div class=\"line\">);</div><div class=\"line\">$params = json_encode($params);</div></pre></td></tr></table></figure>\n<h4 id=\"2-创建curl句柄，并且采用post方式进行传输\"><a href=\"#2-创建curl句柄，并且采用post方式进行传输\" class=\"headerlink\" title=\"2)创建curl句柄，并且采用post方式进行传输\"></a>2)创建curl句柄，并且采用post方式进行传输</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">$url    =  <span class=\"string\">'http://localhost/get.php'</span>;</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch, CURLOPT_URL, $url);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POST, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POSTFIELDS, $params);</div><div class=\"line\">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"number\">0</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"number\">0</span>);</div><div class=\"line\">$out = curl_exec($ch);</div><div class=\"line\">curl_close($ch);</div></pre></td></tr></table></figure>\n<h4 id=\"3-一般情况下，我们会在get-php使用\"><a href=\"#3-一般情况下，我们会在get-php使用\" class=\"headerlink\" title=\"3) 一般情况下，我们会在get.php使用\"></a>3) 一般情况下，我们会在get.php使用</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">print_r($_POST);</div><div class=\"line\"><span class=\"comment\">//string 'Array()' (length=10)</span></div></pre></td></tr></table></figure>\n<p>这个时候一定是空的，因为现在的数据不是以键值对传输的，而是使用数据流进行传输。所以应该使用<br><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">print_r(file_get_contents(<span class=\"string\">'php://input'</span>));</div><div class=\"line\"><span class=\"comment\">//string '&#123;\"name\":\"Tyler Teng\",\"sex\":\"male\"&#125;' (length=34)</span></div></pre></td></tr></table></figure></p>\n<p>来检验一下是不是有数据。</p>\n<h4 id=\"4-使用json-decode-函数进行解析。\"><a href=\"#4-使用json-decode-函数进行解析。\" class=\"headerlink\" title=\"4)使用json_decode()函数进行解析。\"></a>4)使用json_decode()函数进行解析。</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">$json = file_get_contents(<span class=\"string\">'php://input'</span>);</div><div class=\"line\">$array = json_decode($json, <span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"5-解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了\"><a href=\"#5-解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了\" class=\"headerlink\" title=\"5)解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了\"></a>5)解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> $array[<span class=\"string\">'name'</span>];</div><div class=\"line\"><span class=\"comment\">//string 'Tyler Teng' (length=10)</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<h3 id=\"PHP-curl传送json数据\"><a href=\"#PHP-curl传送json数据\" class=\"headerlink\" title=\"PHP curl传送json数据\"></a>PHP curl传送json数据</h3><h4 id=\"说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）\"><a href=\"#说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）\" class=\"headerlink\" title=\"说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）\"></a>说句实话，写PHP也有几年了，不过感觉技术还是渣的不行。前段时间给公司的机器人写接口，客户端的哥哥打算用json上报数据。这可憋闷死我了，因为以前都是直接使用form表单的形式，也就是键值对。没办法，只能双方商量一下，改用键值对的方式了。（大写的尴尬）</h4><h4 id=\"今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file-get-contents-和json-decode-。\"><a href=\"#今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file-get-contents-和json-decode-。\" class=\"headerlink\" title=\"今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file_get_contents()和json_decode()。\"></a>今天终于找到了使用json互传数据的办法了。用到的主要函数是curl，file_get_contents()和json_decode()。</h4><h4 id=\"1-定义数据格式\"><a href=\"#1-定义数据格式\" class=\"headerlink\" title=\"1)定义数据格式\"></a>1)定义数据格式</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">$params = <span class=\"keyword\">array</span>(</div><div class=\"line\">\t<span class=\"string\">'name'</span> =&gt; <span class=\"string\">'Tyler Teng'</span>,</div><div class=\"line\">\t<span class=\"string\">'sex'</span>  =&gt; <span class=\"string\">'male'</span></div><div class=\"line\">);</div><div class=\"line\">$params = json_encode($params);</div></pre></td></tr></table></figure>\n<h4 id=\"2-创建curl句柄，并且采用post方式进行传输\"><a href=\"#2-创建curl句柄，并且采用post方式进行传输\" class=\"headerlink\" title=\"2)创建curl句柄，并且采用post方式进行传输\"></a>2)创建curl句柄，并且采用post方式进行传输</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">$url    =  <span class=\"string\">'http://localhost/get.php'</span>;</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch, CURLOPT_URL, $url);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POST, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POSTFIELDS, $params);</div><div class=\"line\">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"number\">0</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"number\">0</span>);</div><div class=\"line\">$out = curl_exec($ch);</div><div class=\"line\">curl_close($ch);</div></pre></td></tr></table></figure>\n<h4 id=\"3-一般情况下，我们会在get-php使用\"><a href=\"#3-一般情况下，我们会在get-php使用\" class=\"headerlink\" title=\"3) 一般情况下，我们会在get.php使用\"></a>3) 一般情况下，我们会在get.php使用</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">print_r($_POST);</div><div class=\"line\"><span class=\"comment\">//string 'Array()' (length=10)</span></div></pre></td></tr></table></figure>\n<p>这个时候一定是空的，因为现在的数据不是以键值对传输的，而是使用数据流进行传输。所以应该使用<br><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">print_r(file_get_contents(<span class=\"string\">'php://input'</span>));</div><div class=\"line\"><span class=\"comment\">//string '&#123;\"name\":\"Tyler Teng\",\"sex\":\"male\"&#125;' (length=34)</span></div></pre></td></tr></table></figure></p>\n<p>来检验一下是不是有数据。</p>\n<h4 id=\"4-使用json-decode-函数进行解析。\"><a href=\"#4-使用json-decode-函数进行解析。\" class=\"headerlink\" title=\"4)使用json_decode()函数进行解析。\"></a>4)使用json_decode()函数进行解析。</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">$json = file_get_contents(<span class=\"string\">'php://input'</span>);</div><div class=\"line\">$array = json_decode($json, <span class=\"keyword\">true</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"5-解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了\"><a href=\"#5-解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了\" class=\"headerlink\" title=\"5)解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了\"></a>5)解析后的json就是数组了，我们只需要按照数组方式进行获取数值就好了</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> $array[<span class=\"string\">'name'</span>];</div><div class=\"line\"><span class=\"comment\">//string 'Tyler Teng' (length=10)</span></div></pre></td></tr></table></figure>"},{"title":"NodeJs Error: Can't set headers after they are sent.怎么解决？","date":"2016-08-01T13:19:27.000Z","_content":"\n#### 从字面的意思来说：不能发送header，因为已经发送过一次了。\n\n\n#### 我的程序之所以出现这种情况，是因为多次使用`res.sent()`\n\n\n#### 原因：在处理HTTP请求时，服务器会先输出响应头，然后再输出主体内容，而一旦输出过一次响应头（比如执行过 `res.writeHead()` 或 `res.write()` 或 `res.end()`），你再尝试通过 `res.setHeader()` 或 `res.writeHead()` 来设置响应头时（有些方法比如 `res.redirect()` 会调用 `res.writeHead()`），就会报这个错误。\n\n\n#### 解决办法：在调用函数后面加上`return;` 终止，这样就搞定了。\n","source":"_posts/NodeJs-Error-Can-t-set-headers-after-they-are-sent-怎么解决？.md","raw":"---\ntitle: 'NodeJs Error: Can''t set headers after they are sent.怎么解决？'\ndate: 2016-08-01 21:19:27\ntags: NodeJs\ncategories: NodeJs\n---\n\n#### 从字面的意思来说：不能发送header，因为已经发送过一次了。\n\n\n#### 我的程序之所以出现这种情况，是因为多次使用`res.sent()`\n\n\n#### 原因：在处理HTTP请求时，服务器会先输出响应头，然后再输出主体内容，而一旦输出过一次响应头（比如执行过 `res.writeHead()` 或 `res.write()` 或 `res.end()`），你再尝试通过 `res.setHeader()` 或 `res.writeHead()` 来设置响应头时（有些方法比如 `res.redirect()` 会调用 `res.writeHead()`），就会报这个错误。\n\n\n#### 解决办法：在调用函数后面加上`return;` 终止，这样就搞定了。\n","slug":"NodeJs-Error-Can-t-set-headers-after-they-are-sent-怎么解决？","published":1,"updated":"2016-08-16T08:48:12.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cmw000vugqm47aux5gn","content":"<h4 id=\"从字面的意思来说：不能发送header，因为已经发送过一次了。\"><a href=\"#从字面的意思来说：不能发送header，因为已经发送过一次了。\" class=\"headerlink\" title=\"从字面的意思来说：不能发送header，因为已经发送过一次了。\"></a>从字面的意思来说：不能发送header，因为已经发送过一次了。</h4><h4 id=\"我的程序之所以出现这种情况，是因为多次使用res-sent\"><a href=\"#我的程序之所以出现这种情况，是因为多次使用res-sent\" class=\"headerlink\" title=\"我的程序之所以出现这种情况，是因为多次使用res.sent()\"></a>我的程序之所以出现这种情况，是因为多次使用<code>res.sent()</code></h4><h4 id=\"原因：在处理HTTP请求时，服务器会先输出响应头，然后再输出主体内容，而一旦输出过一次响应头（比如执行过-res-writeHead-或-res-write-或-res-end-），你再尝试通过-res-setHeader-或-res-writeHead-来设置响应头时（有些方法比如-res-redirect-会调用-res-writeHead-），就会报这个错误。\"><a href=\"#原因：在处理HTTP请求时，服务器会先输出响应头，然后再输出主体内容，而一旦输出过一次响应头（比如执行过-res-writeHead-或-res-write-或-res-end-），你再尝试通过-res-setHeader-或-res-writeHead-来设置响应头时（有些方法比如-res-redirect-会调用-res-writeHead-），就会报这个错误。\" class=\"headerlink\" title=\"原因：在处理HTTP请求时，服务器会先输出响应头，然后再输出主体内容，而一旦输出过一次响应头（比如执行过 res.writeHead() 或 res.write() 或 res.end()），你再尝试通过 res.setHeader() 或 res.writeHead() 来设置响应头时（有些方法比如 res.redirect() 会调用 res.writeHead()），就会报这个错误。\"></a>原因：在处理HTTP请求时，服务器会先输出响应头，然后再输出主体内容，而一旦输出过一次响应头（比如执行过 <code>res.writeHead()</code> 或 <code>res.write()</code> 或 <code>res.end()</code>），你再尝试通过 <code>res.setHeader()</code> 或 <code>res.writeHead()</code> 来设置响应头时（有些方法比如 <code>res.redirect()</code> 会调用 <code>res.writeHead()</code>），就会报这个错误。</h4><h4 id=\"解决办法：在调用函数后面加上return-终止，这样就搞定了。\"><a href=\"#解决办法：在调用函数后面加上return-终止，这样就搞定了。\" class=\"headerlink\" title=\"解决办法：在调用函数后面加上return; 终止，这样就搞定了。\"></a>解决办法：在调用函数后面加上<code>return;</code> 终止，这样就搞定了。</h4>","excerpt":"","more":"<h4 id=\"从字面的意思来说：不能发送header，因为已经发送过一次了。\"><a href=\"#从字面的意思来说：不能发送header，因为已经发送过一次了。\" class=\"headerlink\" title=\"从字面的意思来说：不能发送header，因为已经发送过一次了。\"></a>从字面的意思来说：不能发送header，因为已经发送过一次了。</h4><h4 id=\"我的程序之所以出现这种情况，是因为多次使用res-sent\"><a href=\"#我的程序之所以出现这种情况，是因为多次使用res-sent\" class=\"headerlink\" title=\"我的程序之所以出现这种情况，是因为多次使用res.sent()\"></a>我的程序之所以出现这种情况，是因为多次使用<code>res.sent()</code></h4><h4 id=\"原因：在处理HTTP请求时，服务器会先输出响应头，然后再输出主体内容，而一旦输出过一次响应头（比如执行过-res-writeHead-或-res-write-或-res-end-），你再尝试通过-res-setHeader-或-res-writeHead-来设置响应头时（有些方法比如-res-redirect-会调用-res-writeHead-），就会报这个错误。\"><a href=\"#原因：在处理HTTP请求时，服务器会先输出响应头，然后再输出主体内容，而一旦输出过一次响应头（比如执行过-res-writeHead-或-res-write-或-res-end-），你再尝试通过-res-setHeader-或-res-writeHead-来设置响应头时（有些方法比如-res-redirect-会调用-res-writeHead-），就会报这个错误。\" class=\"headerlink\" title=\"原因：在处理HTTP请求时，服务器会先输出响应头，然后再输出主体内容，而一旦输出过一次响应头（比如执行过 res.writeHead() 或 res.write() 或 res.end()），你再尝试通过 res.setHeader() 或 res.writeHead() 来设置响应头时（有些方法比如 res.redirect() 会调用 res.writeHead()），就会报这个错误。\"></a>原因：在处理HTTP请求时，服务器会先输出响应头，然后再输出主体内容，而一旦输出过一次响应头（比如执行过 <code>res.writeHead()</code> 或 <code>res.write()</code> 或 <code>res.end()</code>），你再尝试通过 <code>res.setHeader()</code> 或 <code>res.writeHead()</code> 来设置响应头时（有些方法比如 <code>res.redirect()</code> 会调用 <code>res.writeHead()</code>），就会报这个错误。</h4><h4 id=\"解决办法：在调用函数后面加上return-终止，这样就搞定了。\"><a href=\"#解决办法：在调用函数后面加上return-终止，这样就搞定了。\" class=\"headerlink\" title=\"解决办法：在调用函数后面加上return; 终止，这样就搞定了。\"></a>解决办法：在调用函数后面加上<code>return;</code> 终止，这样就搞定了。</h4>"},{"title":"Team Building  (2016/07/23 - 2016/07/24)","date":"2016-07-29T11:04:59.000Z","_content":"\n> #### We're knights .\n\n![Alt text](/img/9840937207502475.jpg)\n\n![Alt text](/img/677081854238299223.jpg)\n\n> #### You jump, I jump .\n\n![Alt text](/img/129190938705992198.jpg)\n\n![Alt text](/img/249044889813158779.jpg)\n\n![Alt text](/img/276531659065385720.jpg)\n\n> #### Handsome boys .\n\n![Alt text](/img/576658516307111140.jpg)\n\n> #### We are a team .\n\n![Alt text](/img/282308221337490135.jpg)\n\n\n","source":"_posts/Team-building.md","raw":"---\ntitle: Team Building  (2016/07/23 - 2016/07/24) \ndate: 2016-07-29 19:04:59\ntags: Life Picture\ncategories: Life\n---\n\n> #### We're knights .\n\n![Alt text](/img/9840937207502475.jpg)\n\n![Alt text](/img/677081854238299223.jpg)\n\n> #### You jump, I jump .\n\n![Alt text](/img/129190938705992198.jpg)\n\n![Alt text](/img/249044889813158779.jpg)\n\n![Alt text](/img/276531659065385720.jpg)\n\n> #### Handsome boys .\n\n![Alt text](/img/576658516307111140.jpg)\n\n> #### We are a team .\n\n![Alt text](/img/282308221337490135.jpg)\n\n\n","slug":"Team-building","published":1,"updated":"2016-07-29T13:15:53.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cmy000yugqm4uzmdvbf","content":"<blockquote>\n<h4 id=\"We’re-knights\"><a href=\"#We’re-knights\" class=\"headerlink\" title=\"We’re knights .\"></a>We’re knights .</h4></blockquote>\n<p><img src=\"/img/9840937207502475.jpg\" alt=\"Alt text\"></p>\n<p><img src=\"/img/677081854238299223.jpg\" alt=\"Alt text\"></p>\n<blockquote>\n<h4 id=\"You-jump-I-jump\"><a href=\"#You-jump-I-jump\" class=\"headerlink\" title=\"You jump, I jump .\"></a>You jump, I jump .</h4></blockquote>\n<p><img src=\"/img/129190938705992198.jpg\" alt=\"Alt text\"></p>\n<p><img src=\"/img/249044889813158779.jpg\" alt=\"Alt text\"></p>\n<p><img src=\"/img/276531659065385720.jpg\" alt=\"Alt text\"></p>\n<blockquote>\n<h4 id=\"Handsome-boys\"><a href=\"#Handsome-boys\" class=\"headerlink\" title=\"Handsome boys .\"></a>Handsome boys .</h4></blockquote>\n<p><img src=\"/img/576658516307111140.jpg\" alt=\"Alt text\"></p>\n<blockquote>\n<h4 id=\"We-are-a-team\"><a href=\"#We-are-a-team\" class=\"headerlink\" title=\"We are a team .\"></a>We are a team .</h4></blockquote>\n<p><img src=\"/img/282308221337490135.jpg\" alt=\"Alt text\"></p>\n","excerpt":"","more":"<blockquote>\n<h4 id=\"We’re-knights\"><a href=\"#We’re-knights\" class=\"headerlink\" title=\"We’re knights .\"></a>We’re knights .</h4></blockquote>\n<p><img src=\"/img/9840937207502475.jpg\" alt=\"Alt text\"></p>\n<p><img src=\"/img/677081854238299223.jpg\" alt=\"Alt text\"></p>\n<blockquote>\n<h4 id=\"You-jump-I-jump\"><a href=\"#You-jump-I-jump\" class=\"headerlink\" title=\"You jump, I jump .\"></a>You jump, I jump .</h4></blockquote>\n<p><img src=\"/img/129190938705992198.jpg\" alt=\"Alt text\"></p>\n<p><img src=\"/img/249044889813158779.jpg\" alt=\"Alt text\"></p>\n<p><img src=\"/img/276531659065385720.jpg\" alt=\"Alt text\"></p>\n<blockquote>\n<h4 id=\"Handsome-boys\"><a href=\"#Handsome-boys\" class=\"headerlink\" title=\"Handsome boys .\"></a>Handsome boys .</h4></blockquote>\n<p><img src=\"/img/576658516307111140.jpg\" alt=\"Alt text\"></p>\n<blockquote>\n<h4 id=\"We-are-a-team\"><a href=\"#We-are-a-team\" class=\"headerlink\" title=\"We are a team .\"></a>We are a team .</h4></blockquote>\n<p><img src=\"/img/282308221337490135.jpg\" alt=\"Alt text\"></p>\n"},{"title":"PHP使用fastcgi_finish_request 提高响应","date":"2016-10-17T12:00:18.000Z","_content":"\n#### 当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做`fastcgi_finish_request`的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。\n\n#### 听起来挺迷茫的，下面给大家举个例子\n\n```php\n<?php\n\techo 'This is example1';\n\tfastcgi_finish_request();\n\techo 'This is example2';\n\tfile_put_contents('/var/log/test.log', 'hello world');\n\n?>\n```\n\n#### 当通过浏览器访问的时候，页面会输出`This is example1`，但是没有输出`This is example2`同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi_finish_request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。\n\n#### 再来个直观的例子\n\n```php\n<?php\n\techo 'This is example1';\n\tfastcgi_finish_request();\n\techo 'This is example2';\n\tfile_put_contents('/var/log/test.log', time('Y-m-d H:i:s', time()), FILE_APPEND);\n\tsleep(1);\n\tfile_put_contents('/var/log/test.log', time('Y-m-d H:i:s', time()), FILE_APPEND);\n\tsleep(1);\n\tfile_put_contents('/var/log/test.log', time('Y-m-d H:i:s', time()), FILE_APPEND);\n?>\n```\n#### 执行的结果就是页面值输出了`This is example1`,服务器记录了三条日志信息。\n\n#### 个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。\n\n#### 另外，在代码移植上建议加上如下代码\n```php\n<?php\n\tif (!function_exists(\"fastcgi_finish_request\")) {\n\t      function fastcgi_finish_request()  {\n\t      }\n\t}\n?>\n```\n\n#### fastcgi_finish_request虽然很好用，但是也有很多限制：\n* PHP fastcgi有进程限制，如果并发太大的话，没办法处理新的请求，nginx可能会出现502 bad request\n\n内容参考鸟哥博客[使用fastcgi_finish_request提高页面响应速度](http://www.laruence.com/2011/04/13/1991.html)\n\n","source":"_posts/PHP使用fastcgi-finish-request-提高响应.md","raw":"---\ntitle: PHP使用fastcgi_finish_request 提高响应\ndate: 2016-10-17 20:00:18\ntags: PHP\ncategories: PHP\n---\n\n#### 当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做`fastcgi_finish_request`的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。\n\n#### 听起来挺迷茫的，下面给大家举个例子\n\n```php\n<?php\n\techo 'This is example1';\n\tfastcgi_finish_request();\n\techo 'This is example2';\n\tfile_put_contents('/var/log/test.log', 'hello world');\n\n?>\n```\n\n#### 当通过浏览器访问的时候，页面会输出`This is example1`，但是没有输出`This is example2`同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi_finish_request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。\n\n#### 再来个直观的例子\n\n```php\n<?php\n\techo 'This is example1';\n\tfastcgi_finish_request();\n\techo 'This is example2';\n\tfile_put_contents('/var/log/test.log', time('Y-m-d H:i:s', time()), FILE_APPEND);\n\tsleep(1);\n\tfile_put_contents('/var/log/test.log', time('Y-m-d H:i:s', time()), FILE_APPEND);\n\tsleep(1);\n\tfile_put_contents('/var/log/test.log', time('Y-m-d H:i:s', time()), FILE_APPEND);\n?>\n```\n#### 执行的结果就是页面值输出了`This is example1`,服务器记录了三条日志信息。\n\n#### 个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。\n\n#### 另外，在代码移植上建议加上如下代码\n```php\n<?php\n\tif (!function_exists(\"fastcgi_finish_request\")) {\n\t      function fastcgi_finish_request()  {\n\t      }\n\t}\n?>\n```\n\n#### fastcgi_finish_request虽然很好用，但是也有很多限制：\n* PHP fastcgi有进程限制，如果并发太大的话，没办法处理新的请求，nginx可能会出现502 bad request\n\n内容参考鸟哥博客[使用fastcgi_finish_request提高页面响应速度](http://www.laruence.com/2011/04/13/1991.html)\n\n","slug":"PHP使用fastcgi-finish-request-提高响应","published":1,"updated":"2016-10-17T12:01:16.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cn20012ugqmm3cs2ahr","content":"<h4 id=\"当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做fastcgi-finish-request的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。\"><a href=\"#当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做fastcgi-finish-request的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。\" class=\"headerlink\" title=\"当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做fastcgi_finish_request的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。\"></a>当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做<code>fastcgi_finish_request</code>的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。</h4><h4 id=\"听起来挺迷茫的，下面给大家举个例子\"><a href=\"#听起来挺迷茫的，下面给大家举个例子\" class=\"headerlink\" title=\"听起来挺迷茫的，下面给大家举个例子\"></a>听起来挺迷茫的，下面给大家举个例子</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">'This is example1'</span>;</div><div class=\"line\">\tfastcgi_finish_request();</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">'This is example2'</span>;</div><div class=\"line\">\tfile_put_contents(<span class=\"string\">'/var/log/test.log'</span>, <span class=\"string\">'hello world'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"当通过浏览器访问的时候，页面会输出This-is-example1，但是没有输出This-is-example2同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi-finish-request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。\"><a href=\"#当通过浏览器访问的时候，页面会输出This-is-example1，但是没有输出This-is-example2同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi-finish-request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。\" class=\"headerlink\" title=\"当通过浏览器访问的时候，页面会输出This is example1，但是没有输出This is example2同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi_finish_request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。\"></a>当通过浏览器访问的时候，页面会输出<code>This is example1</code>，但是没有输出<code>This is example2</code>同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi_finish_request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。</h4><h4 id=\"再来个直观的例子\"><a href=\"#再来个直观的例子\" class=\"headerlink\" title=\"再来个直观的例子\"></a>再来个直观的例子</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">'This is example1'</span>;</div><div class=\"line\">\tfastcgi_finish_request();</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">'This is example2'</span>;</div><div class=\"line\">\tfile_put_contents(<span class=\"string\">'/var/log/test.log'</span>, time(<span class=\"string\">'Y-m-d H:i:s'</span>, time()), FILE_APPEND);</div><div class=\"line\">\tsleep(<span class=\"number\">1</span>);</div><div class=\"line\">\tfile_put_contents(<span class=\"string\">'/var/log/test.log'</span>, time(<span class=\"string\">'Y-m-d H:i:s'</span>, time()), FILE_APPEND);</div><div class=\"line\">\tsleep(<span class=\"number\">1</span>);</div><div class=\"line\">\tfile_put_contents(<span class=\"string\">'/var/log/test.log'</span>, time(<span class=\"string\">'Y-m-d H:i:s'</span>, time()), FILE_APPEND);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"执行的结果就是页面值输出了This-is-example1-服务器记录了三条日志信息。\"><a href=\"#执行的结果就是页面值输出了This-is-example1-服务器记录了三条日志信息。\" class=\"headerlink\" title=\"执行的结果就是页面值输出了This is example1,服务器记录了三条日志信息。\"></a>执行的结果就是页面值输出了<code>This is example1</code>,服务器记录了三条日志信息。</h4><h4 id=\"个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。\"><a href=\"#个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。\" class=\"headerlink\" title=\"个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。\"></a>个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。</h4><h4 id=\"另外，在代码移植上建议加上如下代码\"><a href=\"#另外，在代码移植上建议加上如下代码\" class=\"headerlink\" title=\"另外，在代码移植上建议加上如下代码\"></a>另外，在代码移植上建议加上如下代码</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (!function_exists(<span class=\"string\">\"fastcgi_finish_request\"</span>)) &#123;</div><div class=\"line\">\t      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fastcgi_finish_request</span><span class=\"params\">()</span>  </span>&#123;</div><div class=\"line\">\t      &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"fastcgi-finish-request虽然很好用，但是也有很多限制：\"><a href=\"#fastcgi-finish-request虽然很好用，但是也有很多限制：\" class=\"headerlink\" title=\"fastcgi_finish_request虽然很好用，但是也有很多限制：\"></a>fastcgi_finish_request虽然很好用，但是也有很多限制：</h4><ul>\n<li>PHP fastcgi有进程限制，如果并发太大的话，没办法处理新的请求，nginx可能会出现502 bad request</li>\n</ul>\n<p>内容参考鸟哥博客<a href=\"http://www.laruence.com/2011/04/13/1991.html\" target=\"_blank\" rel=\"external\">使用fastcgi_finish_request提高页面响应速度</a></p>\n","excerpt":"","more":"<h4 id=\"当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做fastcgi-finish-request的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。\"><a href=\"#当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做fastcgi-finish-request的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。\" class=\"headerlink\" title=\"当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做fastcgi_finish_request的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。\"></a>当PHP在运行fastcgi模式的时候，php-fpm提供了一个函数，叫做<code>fastcgi_finish_request</code>的函数，来加快处理请求，如果有些后端请求可以先生成页面再处理的话，可以选择这个函数。</h4><h4 id=\"听起来挺迷茫的，下面给大家举个例子\"><a href=\"#听起来挺迷茫的，下面给大家举个例子\" class=\"headerlink\" title=\"听起来挺迷茫的，下面给大家举个例子\"></a>听起来挺迷茫的，下面给大家举个例子</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">'This is example1'</span>;</div><div class=\"line\">\tfastcgi_finish_request();</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">'This is example2'</span>;</div><div class=\"line\">\tfile_put_contents(<span class=\"string\">'/var/log/test.log'</span>, <span class=\"string\">'hello world'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"当通过浏览器访问的时候，页面会输出This-is-example1，但是没有输出This-is-example2同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi-finish-request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。\"><a href=\"#当通过浏览器访问的时候，页面会输出This-is-example1，但是没有输出This-is-example2同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi-finish-request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。\" class=\"headerlink\" title=\"当通过浏览器访问的时候，页面会输出This is example1，但是没有输出This is example2同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi_finish_request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。\"></a>当通过浏览器访问的时候，页面会输出<code>This is example1</code>，但是没有输出<code>This is example2</code>同时，也把内容写入到了日志文件中。这说明，当PHP执行到了fastcgi_finish_request的时候，服务器就和客户端结束了请求，但是服务器还是继续“异步”执行。</h4><h4 id=\"再来个直观的例子\"><a href=\"#再来个直观的例子\" class=\"headerlink\" title=\"再来个直观的例子\"></a>再来个直观的例子</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">'This is example1'</span>;</div><div class=\"line\">\tfastcgi_finish_request();</div><div class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"string\">'This is example2'</span>;</div><div class=\"line\">\tfile_put_contents(<span class=\"string\">'/var/log/test.log'</span>, time(<span class=\"string\">'Y-m-d H:i:s'</span>, time()), FILE_APPEND);</div><div class=\"line\">\tsleep(<span class=\"number\">1</span>);</div><div class=\"line\">\tfile_put_contents(<span class=\"string\">'/var/log/test.log'</span>, time(<span class=\"string\">'Y-m-d H:i:s'</span>, time()), FILE_APPEND);</div><div class=\"line\">\tsleep(<span class=\"number\">1</span>);</div><div class=\"line\">\tfile_put_contents(<span class=\"string\">'/var/log/test.log'</span>, time(<span class=\"string\">'Y-m-d H:i:s'</span>, time()), FILE_APPEND);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"执行的结果就是页面值输出了This-is-example1-服务器记录了三条日志信息。\"><a href=\"#执行的结果就是页面值输出了This-is-example1-服务器记录了三条日志信息。\" class=\"headerlink\" title=\"执行的结果就是页面值输出了This is example1,服务器记录了三条日志信息。\"></a>执行的结果就是页面值输出了<code>This is example1</code>,服务器记录了三条日志信息。</h4><h4 id=\"个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。\"><a href=\"#个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。\" class=\"headerlink\" title=\"个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。\"></a>个人觉得这个函数很有用，尤其是在客户端与云端进行交互的时候，可以很快缩短响应时间，把多余的请求交给服务器来处理。</h4><h4 id=\"另外，在代码移植上建议加上如下代码\"><a href=\"#另外，在代码移植上建议加上如下代码\" class=\"headerlink\" title=\"另外，在代码移植上建议加上如下代码\"></a>另外，在代码移植上建议加上如下代码</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (!function_exists(<span class=\"string\">\"fastcgi_finish_request\"</span>)) &#123;</div><div class=\"line\">\t      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fastcgi_finish_request</span><span class=\"params\">()</span>  </span>&#123;</div><div class=\"line\">\t      &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"fastcgi-finish-request虽然很好用，但是也有很多限制：\"><a href=\"#fastcgi-finish-request虽然很好用，但是也有很多限制：\" class=\"headerlink\" title=\"fastcgi_finish_request虽然很好用，但是也有很多限制：\"></a>fastcgi_finish_request虽然很好用，但是也有很多限制：</h4><ul>\n<li>PHP fastcgi有进程限制，如果并发太大的话，没办法处理新的请求，nginx可能会出现502 bad request</li>\n</ul>\n<p>内容参考鸟哥博客<a href=\"http://www.laruence.com/2011/04/13/1991.html\">使用fastcgi_finish_request提高页面响应速度</a></p>\n"},{"title":"PHP实现RSA加密、解密操作","date":"2016-09-09T10:49:15.000Z","_content":"\n#### [RSA生成工具](https://os.alipayobjects.com/download/secret_key_tools_RSA_win.zip)\n\n#### 现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名`sign`验证。\n\n####   签名的作用\n\n#### 签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。\n\n#### RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。\n\n#### 使用方法\n> * 使用私钥进行加密，公钥用于解密\n> * 私钥和公钥嘴放放在server上面，并且放在非项目目录，防止泄露 \n\n\n\n\n#### 实现代码\n\n```php\n//生成签名\nfunction build_sign($data) {\n\t$private_key = openssl_pkey_get_private('file://C:/key/rsa_private_key.pem');//私钥位置\n\topenssl_sign($data, $sign, OPENSSL_ALGO_SHA1);\n\t$sign = base64_encode($sign);\n\t\n\treturn $sign;\n}\n//解密\nfunction check_sign($date, $sign) {\n\t$sign = base64_decode($sign);\n\t$public_key = openssl_pkey_get_public('file://C:/key/rsa_public_key.pem');//公钥位置\n\t$result = openssl_verify($data, $sign, $key, OPENSSL_ALGO_SHA1) == 1;\n\n\treturn $result;\n}\n```","source":"_posts/PHP实现RSA加密、解密操作.md","raw":"---\ntitle: PHP实现RSA加密、解密操作\ndate: 2016-09-09 18:49:15\ntags:\ncategories: PHP\n---\n\n#### [RSA生成工具](https://os.alipayobjects.com/download/secret_key_tools_RSA_win.zip)\n\n#### 现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名`sign`验证。\n\n####   签名的作用\n\n#### 签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。\n\n#### RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。\n\n#### 使用方法\n> * 使用私钥进行加密，公钥用于解密\n> * 私钥和公钥嘴放放在server上面，并且放在非项目目录，防止泄露 \n\n\n\n\n#### 实现代码\n\n```php\n//生成签名\nfunction build_sign($data) {\n\t$private_key = openssl_pkey_get_private('file://C:/key/rsa_private_key.pem');//私钥位置\n\topenssl_sign($data, $sign, OPENSSL_ALGO_SHA1);\n\t$sign = base64_encode($sign);\n\t\n\treturn $sign;\n}\n//解密\nfunction check_sign($date, $sign) {\n\t$sign = base64_decode($sign);\n\t$public_key = openssl_pkey_get_public('file://C:/key/rsa_public_key.pem');//公钥位置\n\t$result = openssl_verify($data, $sign, $key, OPENSSL_ALGO_SHA1) == 1;\n\n\treturn $result;\n}\n```","slug":"PHP实现RSA加密、解密操作","published":1,"updated":"2016-09-09T10:51:31.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cn30015ugqmkphk2god","content":"<h4 id=\"RSA生成工具\"><a href=\"#RSA生成工具\" class=\"headerlink\" title=\"RSA生成工具\"></a><a href=\"https://os.alipayobjects.com/download/secret_key_tools_RSA_win.zip\" target=\"_blank\" rel=\"external\">RSA生成工具</a></h4><h4 id=\"现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名sign验证。\"><a href=\"#现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名sign验证。\" class=\"headerlink\" title=\"现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名sign验证。\"></a>现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名<code>sign</code>验证。</h4><h4 id=\"签名的作用\"><a href=\"#签名的作用\" class=\"headerlink\" title=\"签名的作用\"></a>签名的作用</h4><h4 id=\"签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。\"><a href=\"#签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。\" class=\"headerlink\" title=\"签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。\"></a>签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。</h4><h4 id=\"RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。\"><a href=\"#RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。\" class=\"headerlink\" title=\"RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。\"></a>RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。</h4><h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><blockquote>\n<ul>\n<li>使用私钥进行加密，公钥用于解密</li>\n<li>私钥和公钥嘴放放在server上面，并且放在非项目目录，防止泄露 </li>\n</ul>\n</blockquote>\n<h4 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//生成签名</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">build_sign</span><span class=\"params\">($data)</span> </span>&#123;</div><div class=\"line\">\t$private_key = openssl_pkey_get_private(<span class=\"string\">'file://C:/key/rsa_private_key.pem'</span>);<span class=\"comment\">//私钥位置</span></div><div class=\"line\">\topenssl_sign($data, $sign, OPENSSL_ALGO_SHA1);</div><div class=\"line\">\t$sign = base64_encode($sign);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> $sign;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//解密</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check_sign</span><span class=\"params\">($date, $sign)</span> </span>&#123;</div><div class=\"line\">\t$sign = base64_decode($sign);</div><div class=\"line\">\t$public_key = openssl_pkey_get_public(<span class=\"string\">'file://C:/key/rsa_public_key.pem'</span>);<span class=\"comment\">//公钥位置</span></div><div class=\"line\">\t$result = openssl_verify($data, $sign, $key, OPENSSL_ALGO_SHA1) == <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> $result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h4 id=\"RSA生成工具\"><a href=\"#RSA生成工具\" class=\"headerlink\" title=\"RSA生成工具\"></a><a href=\"https://os.alipayobjects.com/download/secret_key_tools_RSA_win.zip\">RSA生成工具</a></h4><h4 id=\"现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名sign验证。\"><a href=\"#现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名sign验证。\" class=\"headerlink\" title=\"现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名sign验证。\"></a>现在越来越多的人注重安全问题，尤其是在支付过程中，不管是卖家还是买家都希望交易过程中不出现任何差错，顺利进行，没有损失。所以在各大支付接口都在支付过程中加入了签名<code>sign</code>验证。</h4><h4 id=\"签名的作用\"><a href=\"#签名的作用\" class=\"headerlink\" title=\"签名的作用\"></a>签名的作用</h4><h4 id=\"签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。\"><a href=\"#签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。\" class=\"headerlink\" title=\"签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。\"></a>签名有个最基本的作用就是安全，你可以把一些数据生成签名一块传过去，接收方通过接收的数据和签名，进行验签，如果验证通过，则继续下一个逻辑。这样做防止传输过程中数据被篡改或者丢失造成的损失。</h4><h4 id=\"RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。\"><a href=\"#RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。\" class=\"headerlink\" title=\"RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。\"></a>RSA签名是目前最具影响力的公钥加密算法，可以抵制绝大多数密码攻击，而且秘钥比较长，不容易破解。</h4><h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><blockquote>\n<ul>\n<li>使用私钥进行加密，公钥用于解密</li>\n<li>私钥和公钥嘴放放在server上面，并且放在非项目目录，防止泄露 </li>\n</ul>\n</blockquote>\n<h4 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//生成签名</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">build_sign</span><span class=\"params\">($data)</span> </span>&#123;</div><div class=\"line\">\t$private_key = openssl_pkey_get_private(<span class=\"string\">'file://C:/key/rsa_private_key.pem'</span>);<span class=\"comment\">//私钥位置</span></div><div class=\"line\">\topenssl_sign($data, $sign, OPENSSL_ALGO_SHA1);</div><div class=\"line\">\t$sign = base64_encode($sign);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> $sign;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//解密</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check_sign</span><span class=\"params\">($date, $sign)</span> </span>&#123;</div><div class=\"line\">\t$sign = base64_decode($sign);</div><div class=\"line\">\t$public_key = openssl_pkey_get_public(<span class=\"string\">'file://C:/key/rsa_public_key.pem'</span>);<span class=\"comment\">//公钥位置</span></div><div class=\"line\">\t$result = openssl_verify($data, $sign, $key, OPENSSL_ALGO_SHA1) == <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> $result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"PHP 零散函数（一）","date":"2016-09-23T08:00:36.000Z","_content":"\n#### parse_url\n\n```php\nmixed parse_url ( string $url [, int $component = -1 ] )\n\n```\n<br>\n#### 作用：\n> 解析一个URL并返回一个关联数组，包含URL各个组成部分\n\n> *本函数不是用来验证给定 URL 的合法性的，只是将其分解为下面列出的部分。不完整的 URL 也被接受，parse_url() 会尝试尽量正确地将其解析。*\n\n```php\n$url = \"http://3c.ycwb.com/2016-09/21/content_23077306.htm?name=tyler&pass=123\";\n$parse_array = parse_url($url);\necho \"<pre>\";\nprint_r($parse_array);\necho \"</pre>\";\n//export:\n//Array\n//(\n//    [scheme] => http\n//    [host] => 3c.ycwb.com\n//    [path] => /2016-09/21/content_23077306.htm\n//    [query] => name=tyler&pass=123\n//)\n```\n\n#### parse_str\n\n```php\nvoid parse_str ( string $str [, array &$arr ] )\n\n```\n<br>\n\n#### 作用：\n> 如果 str 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域\n\n> 如果设置了第二个变量 arr，变量将会以数组元素的形式存入到这个数组，作为替代。\n\n```php\n$str = \"first=value&arr[]=foo+bar&arr[]=baz\";\nparse_str($str);\necho $first;  // value\necho $arr[0]; // foo bar\necho $arr[1]; // baz\n\nparse_str($str, $output);\necho $output['first'];  // value\necho $output['arr'][0]; // foo bar\necho $output['arr'][1]; // baz\n\n```","source":"_posts/PHP-零散函数（一）.md","raw":"---\ntitle: PHP 零散函数（一）\ndate: 2016-09-23 16:00:36\ntags:\n---\n\n#### parse_url\n\n```php\nmixed parse_url ( string $url [, int $component = -1 ] )\n\n```\n<br>\n#### 作用：\n> 解析一个URL并返回一个关联数组，包含URL各个组成部分\n\n> *本函数不是用来验证给定 URL 的合法性的，只是将其分解为下面列出的部分。不完整的 URL 也被接受，parse_url() 会尝试尽量正确地将其解析。*\n\n```php\n$url = \"http://3c.ycwb.com/2016-09/21/content_23077306.htm?name=tyler&pass=123\";\n$parse_array = parse_url($url);\necho \"<pre>\";\nprint_r($parse_array);\necho \"</pre>\";\n//export:\n//Array\n//(\n//    [scheme] => http\n//    [host] => 3c.ycwb.com\n//    [path] => /2016-09/21/content_23077306.htm\n//    [query] => name=tyler&pass=123\n//)\n```\n\n#### parse_str\n\n```php\nvoid parse_str ( string $str [, array &$arr ] )\n\n```\n<br>\n\n#### 作用：\n> 如果 str 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域\n\n> 如果设置了第二个变量 arr，变量将会以数组元素的形式存入到这个数组，作为替代。\n\n```php\n$str = \"first=value&arr[]=foo+bar&arr[]=baz\";\nparse_str($str);\necho $first;  // value\necho $arr[0]; // foo bar\necho $arr[1]; // baz\n\nparse_str($str, $output);\necho $output['first'];  // value\necho $output['arr'][0]; // foo bar\necho $output['arr'][1]; // baz\n\n```","slug":"PHP-零散函数（一）","published":1,"updated":"2016-09-23T08:14:07.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cn40018ugqmkcyk1s4u","content":"<h4 id=\"parse-url\"><a href=\"#parse-url\" class=\"headerlink\" title=\"parse_url\"></a>parse_url</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">mixed parse_url ( string $url [, int $component = <span class=\"number\">-1</span> ] )</div></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h4><blockquote>\n<p>解析一个URL并返回一个关联数组，包含URL各个组成部分</p>\n<p><em>本函数不是用来验证给定 URL 的合法性的，只是将其分解为下面列出的部分。不完整的 URL 也被接受，parse_url() 会尝试尽量正确地将其解析。</em></p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">$url = <span class=\"string\">\"http://3c.ycwb.com/2016-09/21/content_23077306.htm?name=tyler&amp;pass=123\"</span>;</div><div class=\"line\">$parse_array = parse_url($url);</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;pre&gt;\"</span>;</div><div class=\"line\">print_r($parse_array);</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;/pre&gt;\"</span>;</div><div class=\"line\"><span class=\"comment\">//export:</span></div><div class=\"line\"><span class=\"comment\">//Array</span></div><div class=\"line\"><span class=\"comment\">//(</span></div><div class=\"line\"><span class=\"comment\">//    [scheme] =&gt; http</span></div><div class=\"line\"><span class=\"comment\">//    [host] =&gt; 3c.ycwb.com</span></div><div class=\"line\"><span class=\"comment\">//    [path] =&gt; /2016-09/21/content_23077306.htm</span></div><div class=\"line\"><span class=\"comment\">//    [query] =&gt; name=tyler&amp;pass=123</span></div><div class=\"line\"><span class=\"comment\">//)</span></div></pre></td></tr></table></figure>\n<h4 id=\"parse-str\"><a href=\"#parse-str\" class=\"headerlink\" title=\"parse_str\"></a>parse_str</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">void parse_str ( string $str [, <span class=\"keyword\">array</span> &amp;$arr ] )</div></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"作用：-1\"><a href=\"#作用：-1\" class=\"headerlink\" title=\"作用：\"></a>作用：</h4><blockquote>\n<p>如果 str 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域</p>\n<p>如果设置了第二个变量 arr，变量将会以数组元素的形式存入到这个数组，作为替代。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">\"first=value&amp;arr[]=foo+bar&amp;arr[]=baz\"</span>;</div><div class=\"line\">parse_str($str);</div><div class=\"line\"><span class=\"keyword\">echo</span> $first;  <span class=\"comment\">// value</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $arr[<span class=\"number\">0</span>]; <span class=\"comment\">// foo bar</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $arr[<span class=\"number\">1</span>]; <span class=\"comment\">// baz</span></div><div class=\"line\"></div><div class=\"line\">parse_str($str, $output);</div><div class=\"line\"><span class=\"keyword\">echo</span> $output[<span class=\"string\">'first'</span>];  <span class=\"comment\">// value</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $output[<span class=\"string\">'arr'</span>][<span class=\"number\">0</span>]; <span class=\"comment\">// foo bar</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $output[<span class=\"string\">'arr'</span>][<span class=\"number\">1</span>]; <span class=\"comment\">// baz</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<h4 id=\"parse-url\"><a href=\"#parse-url\" class=\"headerlink\" title=\"parse_url\"></a>parse_url</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">mixed parse_url ( string $url [, int $component = <span class=\"number\">-1</span> ] )</div></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h4><blockquote>\n<p>解析一个URL并返回一个关联数组，包含URL各个组成部分</p>\n<p><em>本函数不是用来验证给定 URL 的合法性的，只是将其分解为下面列出的部分。不完整的 URL 也被接受，parse_url() 会尝试尽量正确地将其解析。</em></p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">$url = <span class=\"string\">\"http://3c.ycwb.com/2016-09/21/content_23077306.htm?name=tyler&amp;pass=123\"</span>;</div><div class=\"line\">$parse_array = parse_url($url);</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;pre&gt;\"</span>;</div><div class=\"line\">print_r($parse_array);</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;/pre&gt;\"</span>;</div><div class=\"line\"><span class=\"comment\">//export:</span></div><div class=\"line\"><span class=\"comment\">//Array</span></div><div class=\"line\"><span class=\"comment\">//(</span></div><div class=\"line\"><span class=\"comment\">//    [scheme] =&gt; http</span></div><div class=\"line\"><span class=\"comment\">//    [host] =&gt; 3c.ycwb.com</span></div><div class=\"line\"><span class=\"comment\">//    [path] =&gt; /2016-09/21/content_23077306.htm</span></div><div class=\"line\"><span class=\"comment\">//    [query] =&gt; name=tyler&amp;pass=123</span></div><div class=\"line\"><span class=\"comment\">//)</span></div></pre></td></tr></table></figure>\n<h4 id=\"parse-str\"><a href=\"#parse-str\" class=\"headerlink\" title=\"parse_str\"></a>parse_str</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">void parse_str ( string $str [, <span class=\"keyword\">array</span> &amp;$arr ] )</div></pre></td></tr></table></figure>\n<p><br></p>\n<h4 id=\"作用：-1\"><a href=\"#作用：-1\" class=\"headerlink\" title=\"作用：\"></a>作用：</h4><blockquote>\n<p>如果 str 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域</p>\n<p>如果设置了第二个变量 arr，变量将会以数组元素的形式存入到这个数组，作为替代。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">\"first=value&amp;arr[]=foo+bar&amp;arr[]=baz\"</span>;</div><div class=\"line\">parse_str($str);</div><div class=\"line\"><span class=\"keyword\">echo</span> $first;  <span class=\"comment\">// value</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $arr[<span class=\"number\">0</span>]; <span class=\"comment\">// foo bar</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $arr[<span class=\"number\">1</span>]; <span class=\"comment\">// baz</span></div><div class=\"line\"></div><div class=\"line\">parse_str($str, $output);</div><div class=\"line\"><span class=\"keyword\">echo</span> $output[<span class=\"string\">'first'</span>];  <span class=\"comment\">// value</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $output[<span class=\"string\">'arr'</span>][<span class=\"number\">0</span>]; <span class=\"comment\">// foo bar</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $output[<span class=\"string\">'arr'</span>][<span class=\"number\">1</span>]; <span class=\"comment\">// baz</span></div></pre></td></tr></table></figure>"},{"title":"Ubuntu搭建lnmp环境","date":"2016-11-22T09:47:51.000Z","_content":"\n---------------------------------------\n\n**项目基于php CI**\n\n\n#### 1、安装mysql\n\n```bash\n$ sudo apt-get install mysql-server mysql-client\n```\n\n**安装过程会提示输入root的密码，连续输入两次**\n\n```bash\nNew password for the MySQL “root” user: <– 输入你的密码\nRepeat password for the MySQL “root” user: <– 再输入一次\n```\n\n#### 2、安装nginx\n\n**安装之前看看是否安装了Apache，如果安装了，先停掉Apache，防止端口占用**\n\n```bash\n$ sudo service apache2 stop\n$ sudo update-rc.d -f apache2 remove\n$ sudo apt-get remove apache2\n$ sudo apt-get install nginx\n$ sudo service nginx start \n```\n\n**试试安装是否成功，在浏览器输入IP或主机地址。**\n\n#### 3、安装php\n\n```bash\n$ sudo apt-get install php7.0 -y\n```\n\n**启动php-fpm**\n\n```bash\n$ sudo service php7.0-fpm start\n```\n\n**输入`php -i`命令，查看php是否运行, 这个命令和`phpinfo()`函数一样**\n\n```bash\n$ sudo php -i\n```\n\n#### 4、更改nginx配置文件\n\n```bash\n$ cd /etc/nginx/sites-enabled/\n$ ll\ntotal 8\ndrwxr-xr-x 2 root root 4096 Nov 22 08:20 ./\ndrwxr-xr-x 7 root root 4096 Nov 22 08:21 ../\nlrwxrwxrwx 1 root root   34 Nov 22 06:10 default -> /etc/nginx/sites-available/default\n```\n**这里会有一个默认的default配置文件，更改配置文件，进行项目配置**\n```bash\nserver {\n        listen 80 default_server;\n        listen [::]:80 default_server;\n        server_tokens off;\n        root /usr/share/nginx/test;\n        # Add index.php to the list if you are using PHP\n        index  index.php index.html index.htm index.nginx-debian.html;\n        server_name _;\n        if ($request_filename !~ (\\.jpg|css|js|png|fonts|img)) {\n                rewrite ^/(.*)$ /index.php/$1 break;\n        }\n        location ~ / {\n                root /usr/share/nginx/test;\n                fastcgi_pass   unix:/var/run/php/php7.0-fpm.sock;\n                fastcgi_index  index.php;\n                set $path_info \"\";\n                set $real_script_name $fastcgi_script_name;\n                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n                include        fastcgi_params;\n        }\n}\n```\n**按需配置CI框架的数据库**\n\n**新建控制器`Info.php`, 在里面增加php方法，运行检验**\n\n```php\n<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\n\nclass Info extends CI_Controller {\n\tpublic function php() {\n\t\techo \"hello world!\";\n\t}\n}\n```\n\n**发现抛出一个致命的错误**\n\n`Fatal error: Uncaught TypeError: Argument 1 passed to CI_Exceptions::show_exception() must be an instance of Exception, instance of Error given, called in /usr/share/nginx/test/system/core/Common.php on line 659 and defined in /usr/share/nginx/test/system/core/Exceptions.php:192 Stack trace: #0 /usr/share/nginx/test/system/core/Common.php(659): CI_Exceptions->show_exception(Object(Error)) #1 [internal function]: _exception_handler(Object(Error)) #2 {main} thrown in /usr/share/nginx/test/system/core/Exceptions.php on line 192`\n\n**报错的意思大概是说show_exception方法的参数是个实例化的，但是传入的参数不是一个实例**\n\n**后来根据github上面的解决办法https://github.com/bcit-ci/CodeIgniter/commit/84f24c23baf5ea45c30c4ab3cbc57cd846ea0f56#diff-e57013406b22fdf1ec021ddda0d8e5aa，更改show_exception的参数**\n\n**刷新后发现提示mysql的php拓展，使用命令安装php相关拓展**\n\n#### 5、安装php拓展\n\n**查看支持的拓展**\n```bash\nsudo apt-cache search php7.0\n\nlibapache2-mod-php7.0 - server-side, HTML-embedded scripting language (Apache 2 module)\nphp-all-dev - package depending on all supported PHP development packages\nphp7.0 - server-side, HTML-embedded scripting language (metapackage)\nphp7.0-cgi - server-side, HTML-embedded scripting language (CGI binary)\nphp7.0-cli - command-line interpreter for the PHP scripting language\nphp7.0-common - documentation, examples and common module for PHP\nphp7.0-curl - CURL module for PHP\nphp7.0-dev - Files for PHP7.0 module development\nphp7.0-gd - GD module for PHP\nphp7.0-gmp - GMP module for PHP\nphp7.0-json - JSON module for PHP\nphp7.0-ldap - LDAP module for PHP\nphp7.0-mysql - MySQL module for PHP\nphp7.0-odbc - ODBC module for PHP\nphp7.0-opcache - Zend OpCache module for PHP\nphp7.0-pgsql - PostgreSQL module for PHP\nphp7.0-pspell - pspell module for PHP\n.\n.\n.\n```\n\n**为了保险起见，直接安装所有拓展**\n```bash\nsudo apt-get install php-all-dev\n```\n\n**然后刷新发现正常输出`hello world!`**\n\n**然后我把show_exception方法又改回原来的样子，刷新之后没有再出现该情况，则证明show_exception也是由于缺少拓展造成的**","source":"_posts/Ubuntu搭建lnmp环境.md","raw":"---\ntitle: Ubuntu搭建lnmp环境\ndate: 2016-11-22 17:47:51\ntags: php linux nginx\ncategories: linux\n---\n\n---------------------------------------\n\n**项目基于php CI**\n\n\n#### 1、安装mysql\n\n```bash\n$ sudo apt-get install mysql-server mysql-client\n```\n\n**安装过程会提示输入root的密码，连续输入两次**\n\n```bash\nNew password for the MySQL “root” user: <– 输入你的密码\nRepeat password for the MySQL “root” user: <– 再输入一次\n```\n\n#### 2、安装nginx\n\n**安装之前看看是否安装了Apache，如果安装了，先停掉Apache，防止端口占用**\n\n```bash\n$ sudo service apache2 stop\n$ sudo update-rc.d -f apache2 remove\n$ sudo apt-get remove apache2\n$ sudo apt-get install nginx\n$ sudo service nginx start \n```\n\n**试试安装是否成功，在浏览器输入IP或主机地址。**\n\n#### 3、安装php\n\n```bash\n$ sudo apt-get install php7.0 -y\n```\n\n**启动php-fpm**\n\n```bash\n$ sudo service php7.0-fpm start\n```\n\n**输入`php -i`命令，查看php是否运行, 这个命令和`phpinfo()`函数一样**\n\n```bash\n$ sudo php -i\n```\n\n#### 4、更改nginx配置文件\n\n```bash\n$ cd /etc/nginx/sites-enabled/\n$ ll\ntotal 8\ndrwxr-xr-x 2 root root 4096 Nov 22 08:20 ./\ndrwxr-xr-x 7 root root 4096 Nov 22 08:21 ../\nlrwxrwxrwx 1 root root   34 Nov 22 06:10 default -> /etc/nginx/sites-available/default\n```\n**这里会有一个默认的default配置文件，更改配置文件，进行项目配置**\n```bash\nserver {\n        listen 80 default_server;\n        listen [::]:80 default_server;\n        server_tokens off;\n        root /usr/share/nginx/test;\n        # Add index.php to the list if you are using PHP\n        index  index.php index.html index.htm index.nginx-debian.html;\n        server_name _;\n        if ($request_filename !~ (\\.jpg|css|js|png|fonts|img)) {\n                rewrite ^/(.*)$ /index.php/$1 break;\n        }\n        location ~ / {\n                root /usr/share/nginx/test;\n                fastcgi_pass   unix:/var/run/php/php7.0-fpm.sock;\n                fastcgi_index  index.php;\n                set $path_info \"\";\n                set $real_script_name $fastcgi_script_name;\n                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n                include        fastcgi_params;\n        }\n}\n```\n**按需配置CI框架的数据库**\n\n**新建控制器`Info.php`, 在里面增加php方法，运行检验**\n\n```php\n<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');\n\nclass Info extends CI_Controller {\n\tpublic function php() {\n\t\techo \"hello world!\";\n\t}\n}\n```\n\n**发现抛出一个致命的错误**\n\n`Fatal error: Uncaught TypeError: Argument 1 passed to CI_Exceptions::show_exception() must be an instance of Exception, instance of Error given, called in /usr/share/nginx/test/system/core/Common.php on line 659 and defined in /usr/share/nginx/test/system/core/Exceptions.php:192 Stack trace: #0 /usr/share/nginx/test/system/core/Common.php(659): CI_Exceptions->show_exception(Object(Error)) #1 [internal function]: _exception_handler(Object(Error)) #2 {main} thrown in /usr/share/nginx/test/system/core/Exceptions.php on line 192`\n\n**报错的意思大概是说show_exception方法的参数是个实例化的，但是传入的参数不是一个实例**\n\n**后来根据github上面的解决办法https://github.com/bcit-ci/CodeIgniter/commit/84f24c23baf5ea45c30c4ab3cbc57cd846ea0f56#diff-e57013406b22fdf1ec021ddda0d8e5aa，更改show_exception的参数**\n\n**刷新后发现提示mysql的php拓展，使用命令安装php相关拓展**\n\n#### 5、安装php拓展\n\n**查看支持的拓展**\n```bash\nsudo apt-cache search php7.0\n\nlibapache2-mod-php7.0 - server-side, HTML-embedded scripting language (Apache 2 module)\nphp-all-dev - package depending on all supported PHP development packages\nphp7.0 - server-side, HTML-embedded scripting language (metapackage)\nphp7.0-cgi - server-side, HTML-embedded scripting language (CGI binary)\nphp7.0-cli - command-line interpreter for the PHP scripting language\nphp7.0-common - documentation, examples and common module for PHP\nphp7.0-curl - CURL module for PHP\nphp7.0-dev - Files for PHP7.0 module development\nphp7.0-gd - GD module for PHP\nphp7.0-gmp - GMP module for PHP\nphp7.0-json - JSON module for PHP\nphp7.0-ldap - LDAP module for PHP\nphp7.0-mysql - MySQL module for PHP\nphp7.0-odbc - ODBC module for PHP\nphp7.0-opcache - Zend OpCache module for PHP\nphp7.0-pgsql - PostgreSQL module for PHP\nphp7.0-pspell - pspell module for PHP\n.\n.\n.\n```\n\n**为了保险起见，直接安装所有拓展**\n```bash\nsudo apt-get install php-all-dev\n```\n\n**然后刷新发现正常输出`hello world!`**\n\n**然后我把show_exception方法又改回原来的样子，刷新之后没有再出现该情况，则证明show_exception也是由于缺少拓展造成的**","slug":"Ubuntu搭建lnmp环境","published":1,"updated":"2016-11-22T09:51:28.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cn6001cugqm83ef37qy","content":"<hr>\n<p><strong>项目基于php CI</strong></p>\n<h4 id=\"1、安装mysql\"><a href=\"#1、安装mysql\" class=\"headerlink\" title=\"1、安装mysql\"></a>1、安装mysql</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install mysql-server mysql-client</div></pre></td></tr></table></figure>\n<p><strong>安装过程会提示输入root的密码，连续输入两次</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">New password <span class=\"keyword\">for</span> the MySQL “root” user: &lt;– 输入你的密码</div><div class=\"line\">Repeat password <span class=\"keyword\">for</span> the MySQL “root” user: &lt;– 再输入一次</div></pre></td></tr></table></figure>\n<h4 id=\"2、安装nginx\"><a href=\"#2、安装nginx\" class=\"headerlink\" title=\"2、安装nginx\"></a>2、安装nginx</h4><p><strong>安装之前看看是否安装了Apache，如果安装了，先停掉Apache，防止端口占用</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sudo service apache2 stop</div><div class=\"line\">$ sudo update-rc.d <span class=\"_\">-f</span> apache2 remove</div><div class=\"line\">$ sudo apt-get remove apache2</div><div class=\"line\">$ sudo apt-get install nginx</div><div class=\"line\">$ sudo service nginx start</div></pre></td></tr></table></figure>\n<p><strong>试试安装是否成功，在浏览器输入IP或主机地址。</strong></p>\n<h4 id=\"3、安装php\"><a href=\"#3、安装php\" class=\"headerlink\" title=\"3、安装php\"></a>3、安装php</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install php7.0 -y</div></pre></td></tr></table></figure>\n<p><strong>启动php-fpm</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sudo service php7.0-fpm start</div></pre></td></tr></table></figure>\n<p><strong>输入<code>php -i</code>命令，查看php是否运行, 这个命令和<code>phpinfo()</code>函数一样</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sudo php -i</div></pre></td></tr></table></figure>\n<h4 id=\"4、更改nginx配置文件\"><a href=\"#4、更改nginx配置文件\" class=\"headerlink\" title=\"4、更改nginx配置文件\"></a>4、更改nginx配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /etc/nginx/sites-enabled/</div><div class=\"line\">$ ll</div><div class=\"line\">total 8</div><div class=\"line\">drwxr-xr-x 2 root root 4096 Nov 22 08:20 ./</div><div class=\"line\">drwxr-xr-x 7 root root 4096 Nov 22 08:21 ../</div><div class=\"line\">lrwxrwxrwx 1 root root   34 Nov 22 06:10 default -&gt; /etc/nginx/sites-available/default</div></pre></td></tr></table></figure>\n<p><strong>这里会有一个默认的default配置文件，更改配置文件，进行项目配置</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">        listen 80 default_server;</div><div class=\"line\">        listen [::]:80 default_server;</div><div class=\"line\">        server_tokens off;</div><div class=\"line\">        root /usr/share/nginx/<span class=\"built_in\">test</span>;</div><div class=\"line\">        <span class=\"comment\"># Add index.php to the list if you are using PHP</span></div><div class=\"line\">        index  index.php index.html index.htm index.nginx-debian.html;</div><div class=\"line\">        server_name _;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$request_filename</span> !~ (\\.jpg|css|js|png|fonts|img)) &#123;</div><div class=\"line\">                rewrite ^/(.*)$ /index.php/<span class=\"variable\">$1</span> <span class=\"built_in\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        location ~ / &#123;</div><div class=\"line\">                root /usr/share/nginx/<span class=\"built_in\">test</span>;</div><div class=\"line\">                fastcgi_pass   unix:/var/run/php/php7.0-fpm.sock;</div><div class=\"line\">                fastcgi_index  index.php;</div><div class=\"line\">                <span class=\"built_in\">set</span> <span class=\"variable\">$path_info</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">                <span class=\"built_in\">set</span> <span class=\"variable\">$real_script_name</span> <span class=\"variable\">$fastcgi_script_name</span>;</div><div class=\"line\">                fastcgi_param  SCRIPT_FILENAME  <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</div><div class=\"line\">                include        fastcgi_params;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>按需配置CI框架的数据库</strong></p>\n<p><strong>新建控制器<code>Info.php</code>, 在里面增加php方法，运行检验</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">if</span> ( ! defined(<span class=\"string\">'BASEPATH'</span>)) <span class=\"keyword\">exit</span>(<span class=\"string\">'No direct script access allowed'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Info</span> <span class=\"keyword\">extends</span> <span class=\"title\">CI_Controller</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">php</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"hello world!\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>发现抛出一个致命的错误</strong></p>\n<p><code>Fatal error: Uncaught TypeError: Argument 1 passed to CI_Exceptions::show_exception() must be an instance of Exception, instance of Error given, called in /usr/share/nginx/test/system/core/Common.php on line 659 and defined in /usr/share/nginx/test/system/core/Exceptions.php:192 Stack trace: #0 /usr/share/nginx/test/system/core/Common.php(659): CI_Exceptions-&gt;show_exception(Object(Error)) #1 [internal function]: _exception_handler(Object(Error)) #2 {main} thrown in /usr/share/nginx/test/system/core/Exceptions.php on line 192</code></p>\n<p><strong>报错的意思大概是说show_exception方法的参数是个实例化的，但是传入的参数不是一个实例</strong></p>\n<p><strong>后来根据github上面的解决办法<a href=\"https://github.com/bcit-ci/CodeIgniter/commit/84f24c23baf5ea45c30c4ab3cbc57cd846ea0f56#diff-e57013406b22fdf1ec021ddda0d8e5aa，更改show_exception的参数\" target=\"_blank\" rel=\"external\">https://github.com/bcit-ci/CodeIgniter/commit/84f24c23baf5ea45c30c4ab3cbc57cd846ea0f56#diff-e57013406b22fdf1ec021ddda0d8e5aa，更改show_exception的参数</a></strong></p>\n<p><strong>刷新后发现提示mysql的php拓展，使用命令安装php相关拓展</strong></p>\n<h4 id=\"5、安装php拓展\"><a href=\"#5、安装php拓展\" class=\"headerlink\" title=\"5、安装php拓展\"></a>5、安装php拓展</h4><p><strong>查看支持的拓展</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo apt-cache search php7.0</div><div class=\"line\"></div><div class=\"line\">libapache2-mod-php7.0 - server-side, HTML-embedded scripting language (Apache 2 module)</div><div class=\"line\">php-all-dev - package depending on all supported PHP development packages</div><div class=\"line\">php7.0 - server-side, HTML-embedded scripting language (metapackage)</div><div class=\"line\">php7.0-cgi - server-side, HTML-embedded scripting language (CGI binary)</div><div class=\"line\">php7.0-cli - <span class=\"built_in\">command</span>-line interpreter <span class=\"keyword\">for</span> the PHP scripting language</div><div class=\"line\">php7.0-common - documentation, examples and common module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-curl - CURL module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-dev - Files <span class=\"keyword\">for</span> PHP7.0 module development</div><div class=\"line\">php7.0-gd - GD module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-gmp - GMP module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-json - JSON module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-ldap - LDAP module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-mysql - MySQL module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-odbc - ODBC module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-opcache - Zend OpCache module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-pgsql - PostgreSQL module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-pspell - pspell module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">.</div></pre></td></tr></table></figure></p>\n<p><strong>为了保险起见，直接安装所有拓展</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo apt-get install php-all-dev</div></pre></td></tr></table></figure></p>\n<p><strong>然后刷新发现正常输出<code>hello world!</code></strong></p>\n<p><strong>然后我把show_exception方法又改回原来的样子，刷新之后没有再出现该情况，则证明show_exception也是由于缺少拓展造成的</strong></p>\n","excerpt":"","more":"<hr>\n<p><strong>项目基于php CI</strong></p>\n<h4 id=\"1、安装mysql\"><a href=\"#1、安装mysql\" class=\"headerlink\" title=\"1、安装mysql\"></a>1、安装mysql</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install mysql-server mysql-client</div></pre></td></tr></table></figure>\n<p><strong>安装过程会提示输入root的密码，连续输入两次</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">New password <span class=\"keyword\">for</span> the MySQL “root” user: &lt;– 输入你的密码</div><div class=\"line\">Repeat password <span class=\"keyword\">for</span> the MySQL “root” user: &lt;– 再输入一次</div></pre></td></tr></table></figure>\n<h4 id=\"2、安装nginx\"><a href=\"#2、安装nginx\" class=\"headerlink\" title=\"2、安装nginx\"></a>2、安装nginx</h4><p><strong>安装之前看看是否安装了Apache，如果安装了，先停掉Apache，防止端口占用</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sudo service apache2 stop</div><div class=\"line\">$ sudo update-rc.d <span class=\"_\">-f</span> apache2 remove</div><div class=\"line\">$ sudo apt-get remove apache2</div><div class=\"line\">$ sudo apt-get install nginx</div><div class=\"line\">$ sudo service nginx start</div></pre></td></tr></table></figure>\n<p><strong>试试安装是否成功，在浏览器输入IP或主机地址。</strong></p>\n<h4 id=\"3、安装php\"><a href=\"#3、安装php\" class=\"headerlink\" title=\"3、安装php\"></a>3、安装php</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install php7.0 -y</div></pre></td></tr></table></figure>\n<p><strong>启动php-fpm</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sudo service php7.0-fpm start</div></pre></td></tr></table></figure>\n<p><strong>输入<code>php -i</code>命令，查看php是否运行, 这个命令和<code>phpinfo()</code>函数一样</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sudo php -i</div></pre></td></tr></table></figure>\n<h4 id=\"4、更改nginx配置文件\"><a href=\"#4、更改nginx配置文件\" class=\"headerlink\" title=\"4、更改nginx配置文件\"></a>4、更改nginx配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /etc/nginx/sites-enabled/</div><div class=\"line\">$ ll</div><div class=\"line\">total 8</div><div class=\"line\">drwxr-xr-x 2 root root 4096 Nov 22 08:20 ./</div><div class=\"line\">drwxr-xr-x 7 root root 4096 Nov 22 08:21 ../</div><div class=\"line\">lrwxrwxrwx 1 root root   34 Nov 22 06:10 default -&gt; /etc/nginx/sites-available/default</div></pre></td></tr></table></figure>\n<p><strong>这里会有一个默认的default配置文件，更改配置文件，进行项目配置</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">        listen 80 default_server;</div><div class=\"line\">        listen [::]:80 default_server;</div><div class=\"line\">        server_tokens off;</div><div class=\"line\">        root /usr/share/nginx/<span class=\"built_in\">test</span>;</div><div class=\"line\">        <span class=\"comment\"># Add index.php to the list if you are using PHP</span></div><div class=\"line\">        index  index.php index.html index.htm index.nginx-debian.html;</div><div class=\"line\">        server_name _;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$request_filename</span> !~ (\\.jpg|css|js|png|fonts|img)) &#123;</div><div class=\"line\">                rewrite ^/(.*)$ /index.php/<span class=\"variable\">$1</span> <span class=\"built_in\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        location ~ / &#123;</div><div class=\"line\">                root /usr/share/nginx/<span class=\"built_in\">test</span>;</div><div class=\"line\">                fastcgi_pass   unix:/var/run/php/php7.0-fpm.sock;</div><div class=\"line\">                fastcgi_index  index.php;</div><div class=\"line\">                <span class=\"built_in\">set</span> <span class=\"variable\">$path_info</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">                <span class=\"built_in\">set</span> <span class=\"variable\">$real_script_name</span> <span class=\"variable\">$fastcgi_script_name</span>;</div><div class=\"line\">                fastcgi_param  SCRIPT_FILENAME  <span class=\"variable\">$document_root</span><span class=\"variable\">$fastcgi_script_name</span>;</div><div class=\"line\">                include        fastcgi_params;</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>按需配置CI框架的数据库</strong></p>\n<p><strong>新建控制器<code>Info.php</code>, 在里面增加php方法，运行检验</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">if</span> ( ! defined(<span class=\"string\">'BASEPATH'</span>)) <span class=\"keyword\">exit</span>(<span class=\"string\">'No direct script access allowed'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Info</span> <span class=\"keyword\">extends</span> <span class=\"title\">CI_Controller</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">php</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">echo</span> <span class=\"string\">\"hello world!\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>发现抛出一个致命的错误</strong></p>\n<p><code>Fatal error: Uncaught TypeError: Argument 1 passed to CI_Exceptions::show_exception() must be an instance of Exception, instance of Error given, called in /usr/share/nginx/test/system/core/Common.php on line 659 and defined in /usr/share/nginx/test/system/core/Exceptions.php:192 Stack trace: #0 /usr/share/nginx/test/system/core/Common.php(659): CI_Exceptions-&gt;show_exception(Object(Error)) #1 [internal function]: _exception_handler(Object(Error)) #2 {main} thrown in /usr/share/nginx/test/system/core/Exceptions.php on line 192</code></p>\n<p><strong>报错的意思大概是说show_exception方法的参数是个实例化的，但是传入的参数不是一个实例</strong></p>\n<p><strong>后来根据github上面的解决办法<a href=\"https://github.com/bcit-ci/CodeIgniter/commit/84f24c23baf5ea45c30c4ab3cbc57cd846ea0f56#diff-e57013406b22fdf1ec021ddda0d8e5aa，更改show_exception的参数\">https://github.com/bcit-ci/CodeIgniter/commit/84f24c23baf5ea45c30c4ab3cbc57cd846ea0f56#diff-e57013406b22fdf1ec021ddda0d8e5aa，更改show_exception的参数</a></strong></p>\n<p><strong>刷新后发现提示mysql的php拓展，使用命令安装php相关拓展</strong></p>\n<h4 id=\"5、安装php拓展\"><a href=\"#5、安装php拓展\" class=\"headerlink\" title=\"5、安装php拓展\"></a>5、安装php拓展</h4><p><strong>查看支持的拓展</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo apt-cache search php7.0</div><div class=\"line\"></div><div class=\"line\">libapache2-mod-php7.0 - server-side, HTML-embedded scripting language (Apache 2 module)</div><div class=\"line\">php-all-dev - package depending on all supported PHP development packages</div><div class=\"line\">php7.0 - server-side, HTML-embedded scripting language (metapackage)</div><div class=\"line\">php7.0-cgi - server-side, HTML-embedded scripting language (CGI binary)</div><div class=\"line\">php7.0-cli - <span class=\"built_in\">command</span>-line interpreter <span class=\"keyword\">for</span> the PHP scripting language</div><div class=\"line\">php7.0-common - documentation, examples and common module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-curl - CURL module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-dev - Files <span class=\"keyword\">for</span> PHP7.0 module development</div><div class=\"line\">php7.0-gd - GD module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-gmp - GMP module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-json - JSON module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-ldap - LDAP module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-mysql - MySQL module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-odbc - ODBC module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-opcache - Zend OpCache module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-pgsql - PostgreSQL module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">php7.0-pspell - pspell module <span class=\"keyword\">for</span> PHP</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">.</div></pre></td></tr></table></figure></p>\n<p><strong>为了保险起见，直接安装所有拓展</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo apt-get install php-all-dev</div></pre></td></tr></table></figure></p>\n<p><strong>然后刷新发现正常输出<code>hello world!</code></strong></p>\n<p><strong>然后我把show_exception方法又改回原来的样子，刷新之后没有再出现该情况，则证明show_exception也是由于缺少拓展造成的</strong></p>\n"},{"layout":"git","title":"Git SSH和HTTPS互相切换","date":"2016-07-27T11:24:28.000Z","_content":"### Git SSH和HTTPS互相切换\n\n#### 先前使用git clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH clone项目的，能不能通过HTTPS提交呢？查了下资料，发现 <font color=red>git remote </font>可以实现\n\n#### 1) 查看当前remote版本\n```bash\n$ git remote -v\norigin  git@your domain:tylerteng/project.git (fetch)\norigin  git@your domain:tylerteng/project.git (push)\n```\n\n#### 2) 上面的结果很明显是push 和pull都是使用SSH，使用如下命令改为HTTPS\n```bash\n$ git remote set-url origin https://your domain/tylerteng/project.git\n```\n\n#### 3) 然后你再进行push等操作，就是按照HTTPS进行提交\n\n```bash\n$ git push\nUsername for 'https://your domain':\nPassword for 'https://tylerteng@your domain':\n```\n","source":"_posts/SSH和HTTPS互相切换.md","raw":"---\nlayout: git\ntitle: Git SSH和HTTPS互相切换\ndate: 2016-07-27 19:24:28\ntags: git ssh https\ncategories: Git\n---\n### Git SSH和HTTPS互相切换\n\n#### 先前使用git clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH clone项目的，能不能通过HTTPS提交呢？查了下资料，发现 <font color=red>git remote </font>可以实现\n\n#### 1) 查看当前remote版本\n```bash\n$ git remote -v\norigin  git@your domain:tylerteng/project.git (fetch)\norigin  git@your domain:tylerteng/project.git (push)\n```\n\n#### 2) 上面的结果很明显是push 和pull都是使用SSH，使用如下命令改为HTTPS\n```bash\n$ git remote set-url origin https://your domain/tylerteng/project.git\n```\n\n#### 3) 然后你再进行push等操作，就是按照HTTPS进行提交\n\n```bash\n$ git push\nUsername for 'https://your domain':\nPassword for 'https://tylerteng@your domain':\n```\n","slug":"SSH和HTTPS互相切换","published":1,"updated":"2016-08-16T08:48:11.506Z","comments":1,"photos":[],"link":"","_id":"cixv73cn9001gugqm1bbe63ub","content":"<h3 id=\"Git-SSH和HTTPS互相切换\"><a href=\"#Git-SSH和HTTPS互相切换\" class=\"headerlink\" title=\"Git SSH和HTTPS互相切换\"></a>Git SSH和HTTPS互相切换</h3><h4 id=\"先前使用git-clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH-clone项目的，能不能通过HTTPS提交呢？查了下资料，发现-git-remote-可以实现\"><a href=\"#先前使用git-clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH-clone项目的，能不能通过HTTPS提交呢？查了下资料，发现-git-remote-可以实现\" class=\"headerlink\" title=\"先前使用git clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH clone项目的，能不能通过HTTPS提交呢？查了下资料，发现 git remote 可以实现\"></a>先前使用git clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH clone项目的，能不能通过HTTPS提交呢？查了下资料，发现 <font color=\"red\">git remote </font>可以实现</h4><h4 id=\"1-查看当前remote版本\"><a href=\"#1-查看当前remote版本\" class=\"headerlink\" title=\"1) 查看当前remote版本\"></a>1) 查看当前remote版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div><div class=\"line\">origin  git@your domain:tylerteng/project.git (fetch)</div><div class=\"line\">origin  git@your domain:tylerteng/project.git (push)</div></pre></td></tr></table></figure>\n<h4 id=\"2-上面的结果很明显是push-和pull都是使用SSH，使用如下命令改为HTTPS\"><a href=\"#2-上面的结果很明显是push-和pull都是使用SSH，使用如下命令改为HTTPS\" class=\"headerlink\" title=\"2) 上面的结果很明显是push 和pull都是使用SSH，使用如下命令改为HTTPS\"></a>2) 上面的结果很明显是push 和pull都是使用SSH，使用如下命令改为HTTPS</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote <span class=\"built_in\">set</span>-url origin https://your domain/tylerteng/project.git</div></pre></td></tr></table></figure>\n<h4 id=\"3-然后你再进行push等操作，就是按照HTTPS进行提交\"><a href=\"#3-然后你再进行push等操作，就是按照HTTPS进行提交\" class=\"headerlink\" title=\"3) 然后你再进行push等操作，就是按照HTTPS进行提交\"></a>3) 然后你再进行push等操作，就是按照HTTPS进行提交</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push</div><div class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">'https://your domain'</span>:</div><div class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">'https://tylerteng@your domain'</span>:</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"Git-SSH和HTTPS互相切换\"><a href=\"#Git-SSH和HTTPS互相切换\" class=\"headerlink\" title=\"Git SSH和HTTPS互相切换\"></a>Git SSH和HTTPS互相切换</h3><h4 id=\"先前使用git-clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH-clone项目的，能不能通过HTTPS提交呢？查了下资料，发现-git-remote-可以实现\"><a href=\"#先前使用git-clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH-clone项目的，能不能通过HTTPS提交呢？查了下资料，发现-git-remote-可以实现\" class=\"headerlink\" title=\"先前使用git clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH clone项目的，能不能通过HTTPS提交呢？查了下资料，发现 git remote 可以实现\"></a>先前使用git clone到本地的项目，有一次提交的时候，莫名有个文件不能push了，错误提示是没有权限，也没找到具体的原因，后来想到一个办法，就是切换方式，例如，我是通过SSH clone项目的，能不能通过HTTPS提交呢？查了下资料，发现 <font color=red>git remote </font>可以实现</h4><h4 id=\"1-查看当前remote版本\"><a href=\"#1-查看当前remote版本\" class=\"headerlink\" title=\"1) 查看当前remote版本\"></a>1) 查看当前remote版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div><div class=\"line\">origin  git@your domain:tylerteng/project.git (fetch)</div><div class=\"line\">origin  git@your domain:tylerteng/project.git (push)</div></pre></td></tr></table></figure>\n<h4 id=\"2-上面的结果很明显是push-和pull都是使用SSH，使用如下命令改为HTTPS\"><a href=\"#2-上面的结果很明显是push-和pull都是使用SSH，使用如下命令改为HTTPS\" class=\"headerlink\" title=\"2) 上面的结果很明显是push 和pull都是使用SSH，使用如下命令改为HTTPS\"></a>2) 上面的结果很明显是push 和pull都是使用SSH，使用如下命令改为HTTPS</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote <span class=\"built_in\">set</span>-url origin https://your domain/tylerteng/project.git</div></pre></td></tr></table></figure>\n<h4 id=\"3-然后你再进行push等操作，就是按照HTTPS进行提交\"><a href=\"#3-然后你再进行push等操作，就是按照HTTPS进行提交\" class=\"headerlink\" title=\"3) 然后你再进行push等操作，就是按照HTTPS进行提交\"></a>3) 然后你再进行push等操作，就是按照HTTPS进行提交</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push</div><div class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">'https://your domain'</span>:</div><div class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">'https://tylerteng@your domain'</span>:</div></pre></td></tr></table></figure>\n"},{"title":"Ubuntu查看版本","date":"2016-11-28T06:06:51.000Z","_content":"\n---------------\n\n#### 使用命令：cat /proc/version 查看\n\n```bash\n$ cat /proc/version\nLinux version 4.4.0-47-generic (buildd@lcy01-03) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) ) #68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016\n```\n#### 使用命令：uname -a 查看\n\n```bash\n$ uname -a\nLinux ip-172-31-9-166 4.4.0-47-generic #68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\n```\n\n#### 使用命令：lsb_release -a 查看\n\n```bash\n$ lsb_release -a\nLinux ip-172-31-9-166 4.4.0-47-generic #68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\nubuntu@ip-172-31-9-166:~/Download/php-5.6.28$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 16.04.1 LTS\nRelease:        16.04\nCodename:       xenial\n\n```","source":"_posts/Ubuntu查看版本.md","raw":"---\ntitle: Ubuntu查看版本\ndate: 2016-11-28 14:06:51\ntags: Linux\ncategories: Linux\n---\n\n---------------\n\n#### 使用命令：cat /proc/version 查看\n\n```bash\n$ cat /proc/version\nLinux version 4.4.0-47-generic (buildd@lcy01-03) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) ) #68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016\n```\n#### 使用命令：uname -a 查看\n\n```bash\n$ uname -a\nLinux ip-172-31-9-166 4.4.0-47-generic #68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\n```\n\n#### 使用命令：lsb_release -a 查看\n\n```bash\n$ lsb_release -a\nLinux ip-172-31-9-166 4.4.0-47-generic #68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\nubuntu@ip-172-31-9-166:~/Download/php-5.6.28$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 16.04.1 LTS\nRelease:        16.04\nCodename:       xenial\n\n```","slug":"Ubuntu查看版本","published":1,"updated":"2016-11-28T06:07:58.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cnc001jugqmfih8riir","content":"<hr>\n<h4 id=\"使用命令：cat-proc-version-查看\"><a href=\"#使用命令：cat-proc-version-查看\" class=\"headerlink\" title=\"使用命令：cat /proc/version 查看\"></a>使用命令：cat /proc/version 查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ cat /proc/version</div><div class=\"line\">Linux version 4.4.0-47-generic (buildd@lcy01-03) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) ) <span class=\"comment\">#68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016</span></div></pre></td></tr></table></figure>\n<h4 id=\"使用命令：uname-a-查看\"><a href=\"#使用命令：uname-a-查看\" class=\"headerlink\" title=\"使用命令：uname -a 查看\"></a>使用命令：uname -a 查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ uname <span class=\"_\">-a</span></div><div class=\"line\">Linux ip-172-31-9-166 4.4.0-47-generic <span class=\"comment\">#68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></div></pre></td></tr></table></figure>\n<h4 id=\"使用命令：lsb-release-a-查看\"><a href=\"#使用命令：lsb-release-a-查看\" class=\"headerlink\" title=\"使用命令：lsb_release -a 查看\"></a>使用命令：lsb_release -a 查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ lsb_release <span class=\"_\">-a</span></div><div class=\"line\">Linux ip-172-31-9-166 4.4.0-47-generic <span class=\"comment\">#68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></div><div class=\"line\">ubuntu@ip-172-31-9-166:~/Download/php-5.6.28$ lsb_release <span class=\"_\">-a</span></div><div class=\"line\">No LSB modules are available.</div><div class=\"line\">Distributor ID: Ubuntu</div><div class=\"line\">Description:    Ubuntu 16.04.1 LTS</div><div class=\"line\">Release:        16.04</div><div class=\"line\">Codename:       xenial</div></pre></td></tr></table></figure>","excerpt":"","more":"<hr>\n<h4 id=\"使用命令：cat-proc-version-查看\"><a href=\"#使用命令：cat-proc-version-查看\" class=\"headerlink\" title=\"使用命令：cat /proc/version 查看\"></a>使用命令：cat /proc/version 查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ cat /proc/version</div><div class=\"line\">Linux version 4.4.0-47-generic (buildd@lcy01-03) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) ) <span class=\"comment\">#68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016</span></div></pre></td></tr></table></figure>\n<h4 id=\"使用命令：uname-a-查看\"><a href=\"#使用命令：uname-a-查看\" class=\"headerlink\" title=\"使用命令：uname -a 查看\"></a>使用命令：uname -a 查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ uname <span class=\"_\">-a</span></div><div class=\"line\">Linux ip-172-31-9-166 4.4.0-47-generic <span class=\"comment\">#68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></div></pre></td></tr></table></figure>\n<h4 id=\"使用命令：lsb-release-a-查看\"><a href=\"#使用命令：lsb-release-a-查看\" class=\"headerlink\" title=\"使用命令：lsb_release -a 查看\"></a>使用命令：lsb_release -a 查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ lsb_release <span class=\"_\">-a</span></div><div class=\"line\">Linux ip-172-31-9-166 4.4.0-47-generic <span class=\"comment\">#68-Ubuntu SMP Wed Oct 26 19:39:52 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></div><div class=\"line\">ubuntu@ip-172-31-9-166:~/Download/php-5.6.28$ lsb_release <span class=\"_\">-a</span></div><div class=\"line\">No LSB modules are available.</div><div class=\"line\">Distributor ID: Ubuntu</div><div class=\"line\">Description:    Ubuntu 16.04.1 LTS</div><div class=\"line\">Release:        16.04</div><div class=\"line\">Codename:       xenial</div></pre></td></tr></table></figure>"},{"title":"php 创建xml的几种方式","date":"2016-11-15T06:19:12.000Z","_content":"\n#### 1、直接创建字符串\n\n```php\nheader(\"content-type:application/xml;\");\n$xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\n\t\t<people>\n\t\t<name>Tyler Teng</name>\n\t\t<sex>man</sex>\n\t\t</people>\";\necho $xml;\n```\n\n#### 2、使用DOMDocument进行创建\n\n```php\nheader(\"content-type:application/xml;\");\n$xml = new DOMDocument('1.0', 'utf-8');\n$root = $xml->createElement('people');\n$name = $xml->createElement('name', 'Tyler Teng');\n$sex = $xml->createElement('sex', 'man');\n$root->appendChild($name);\n$root->appendChild($sex);\n$xml->appendChild($root);\n\necho $xml->saveXML();\n```\n\n#### 3、使用XMLWriter进行创建\n\n```php\nheader('Content-type:application/xml');\n$xml_writer = new XMLWriter;\n$xml_writer->openMemory();\n$xml_writer->startDocument('1.0', 'utf-8');\n$xml_writer->startElement('people');\n$xml_writer->writeElement('name', 'Tyler Teng');\n$xml_writer->writeElement('sex', 'man');\n$xml_writer->endElement();\n$xml_writer->endDocument();\n\necho $xml_writer->outputMemory();\n```","source":"_posts/php-创建xml的几种方式.md","raw":"---\ntitle: php 创建xml的几种方式\ndate: 2016-11-15 14:19:12\ntags: \ncategories: PHP\n---\n\n#### 1、直接创建字符串\n\n```php\nheader(\"content-type:application/xml;\");\n$xml = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\n\t\t<people>\n\t\t<name>Tyler Teng</name>\n\t\t<sex>man</sex>\n\t\t</people>\";\necho $xml;\n```\n\n#### 2、使用DOMDocument进行创建\n\n```php\nheader(\"content-type:application/xml;\");\n$xml = new DOMDocument('1.0', 'utf-8');\n$root = $xml->createElement('people');\n$name = $xml->createElement('name', 'Tyler Teng');\n$sex = $xml->createElement('sex', 'man');\n$root->appendChild($name);\n$root->appendChild($sex);\n$xml->appendChild($root);\n\necho $xml->saveXML();\n```\n\n#### 3、使用XMLWriter进行创建\n\n```php\nheader('Content-type:application/xml');\n$xml_writer = new XMLWriter;\n$xml_writer->openMemory();\n$xml_writer->startDocument('1.0', 'utf-8');\n$xml_writer->startElement('people');\n$xml_writer->writeElement('name', 'Tyler Teng');\n$xml_writer->writeElement('sex', 'man');\n$xml_writer->endElement();\n$xml_writer->endDocument();\n\necho $xml_writer->outputMemory();\n```","slug":"php-创建xml的几种方式","published":1,"updated":"2016-11-15T06:20:07.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cnf001nugqm19pat0kg","content":"<h4 id=\"1、直接创建字符串\"><a href=\"#1、直接创建字符串\" class=\"headerlink\" title=\"1、直接创建字符串\"></a>1、直接创建字符串</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">header(<span class=\"string\">\"content-type:application/xml;\"</span>);</div><div class=\"line\">$xml = <span class=\"string\">\"&lt;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?&gt;</span></div><div class=\"line\">\t\t&lt;people&gt;</div><div class=\"line\">\t\t&lt;name&gt;Tyler Teng&lt;/name&gt;</div><div class=\"line\">\t\t&lt;sex&gt;man&lt;/sex&gt;</div><div class=\"line\">\t\t&lt;/people&gt;\";</div><div class=\"line\"><span class=\"keyword\">echo</span> $xml;</div></pre></td></tr></table></figure>\n<h4 id=\"2、使用DOMDocument进行创建\"><a href=\"#2、使用DOMDocument进行创建\" class=\"headerlink\" title=\"2、使用DOMDocument进行创建\"></a>2、使用DOMDocument进行创建</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">header(<span class=\"string\">\"content-type:application/xml;\"</span>);</div><div class=\"line\">$xml = <span class=\"keyword\">new</span> DOMDocument(<span class=\"string\">'1.0'</span>, <span class=\"string\">'utf-8'</span>);</div><div class=\"line\">$root = $xml-&gt;createElement(<span class=\"string\">'people'</span>);</div><div class=\"line\">$name = $xml-&gt;createElement(<span class=\"string\">'name'</span>, <span class=\"string\">'Tyler Teng'</span>);</div><div class=\"line\">$sex = $xml-&gt;createElement(<span class=\"string\">'sex'</span>, <span class=\"string\">'man'</span>);</div><div class=\"line\">$root-&gt;appendChild($name);</div><div class=\"line\">$root-&gt;appendChild($sex);</div><div class=\"line\">$xml-&gt;appendChild($root);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> $xml-&gt;saveXML();</div></pre></td></tr></table></figure>\n<h4 id=\"3、使用XMLWriter进行创建\"><a href=\"#3、使用XMLWriter进行创建\" class=\"headerlink\" title=\"3、使用XMLWriter进行创建\"></a>3、使用XMLWriter进行创建</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">header(<span class=\"string\">'Content-type:application/xml'</span>);</div><div class=\"line\">$xml_writer = <span class=\"keyword\">new</span> XMLWriter;</div><div class=\"line\">$xml_writer-&gt;openMemory();</div><div class=\"line\">$xml_writer-&gt;startDocument(<span class=\"string\">'1.0'</span>, <span class=\"string\">'utf-8'</span>);</div><div class=\"line\">$xml_writer-&gt;startElement(<span class=\"string\">'people'</span>);</div><div class=\"line\">$xml_writer-&gt;writeElement(<span class=\"string\">'name'</span>, <span class=\"string\">'Tyler Teng'</span>);</div><div class=\"line\">$xml_writer-&gt;writeElement(<span class=\"string\">'sex'</span>, <span class=\"string\">'man'</span>);</div><div class=\"line\">$xml_writer-&gt;endElement();</div><div class=\"line\">$xml_writer-&gt;endDocument();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> $xml_writer-&gt;outputMemory();</div></pre></td></tr></table></figure>","excerpt":"","more":"<h4 id=\"1、直接创建字符串\"><a href=\"#1、直接创建字符串\" class=\"headerlink\" title=\"1、直接创建字符串\"></a>1、直接创建字符串</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">header(<span class=\"string\">\"content-type:application/xml;\"</span>);</div><div class=\"line\">$xml = <span class=\"string\">\"&lt;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?&gt;</div><div class=\"line\">\t\t&lt;people&gt;</div><div class=\"line\">\t\t&lt;name&gt;Tyler Teng&lt;/name&gt;</div><div class=\"line\">\t\t&lt;sex&gt;man&lt;/sex&gt;</div><div class=\"line\">\t\t&lt;/people&gt;\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $xml;</div></pre></td></tr></table></figure>\n<h4 id=\"2、使用DOMDocument进行创建\"><a href=\"#2、使用DOMDocument进行创建\" class=\"headerlink\" title=\"2、使用DOMDocument进行创建\"></a>2、使用DOMDocument进行创建</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">header(<span class=\"string\">\"content-type:application/xml;\"</span>);</div><div class=\"line\">$xml = <span class=\"keyword\">new</span> DOMDocument(<span class=\"string\">'1.0'</span>, <span class=\"string\">'utf-8'</span>);</div><div class=\"line\">$root = $xml-&gt;createElement(<span class=\"string\">'people'</span>);</div><div class=\"line\">$name = $xml-&gt;createElement(<span class=\"string\">'name'</span>, <span class=\"string\">'Tyler Teng'</span>);</div><div class=\"line\">$sex = $xml-&gt;createElement(<span class=\"string\">'sex'</span>, <span class=\"string\">'man'</span>);</div><div class=\"line\">$root-&gt;appendChild($name);</div><div class=\"line\">$root-&gt;appendChild($sex);</div><div class=\"line\">$xml-&gt;appendChild($root);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> $xml-&gt;saveXML();</div></pre></td></tr></table></figure>\n<h4 id=\"3、使用XMLWriter进行创建\"><a href=\"#3、使用XMLWriter进行创建\" class=\"headerlink\" title=\"3、使用XMLWriter进行创建\"></a>3、使用XMLWriter进行创建</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">header(<span class=\"string\">'Content-type:application/xml'</span>);</div><div class=\"line\">$xml_writer = <span class=\"keyword\">new</span> XMLWriter;</div><div class=\"line\">$xml_writer-&gt;openMemory();</div><div class=\"line\">$xml_writer-&gt;startDocument(<span class=\"string\">'1.0'</span>, <span class=\"string\">'utf-8'</span>);</div><div class=\"line\">$xml_writer-&gt;startElement(<span class=\"string\">'people'</span>);</div><div class=\"line\">$xml_writer-&gt;writeElement(<span class=\"string\">'name'</span>, <span class=\"string\">'Tyler Teng'</span>);</div><div class=\"line\">$xml_writer-&gt;writeElement(<span class=\"string\">'sex'</span>, <span class=\"string\">'man'</span>);</div><div class=\"line\">$xml_writer-&gt;endElement();</div><div class=\"line\">$xml_writer-&gt;endDocument();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> $xml_writer-&gt;outputMemory();</div></pre></td></tr></table></figure>"},{"title":"一些杂谈琐事 —— 自我反思（一）","date":"2016-08-03T12:11:32.000Z","_content":"\n####  我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，`“思考不足”`。\n#### 怎么来理解这四个字呢？用一个简单的小事情举个例子吧。\n#### *假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情*。\n\n#### 刚来公司的时候，老大给我分配了任务，就是使用`Nodejs`搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：\n> *  开发语言：之前都是使用`PHP`，但是给的源码是`Nodejs`\n> *  实现功能：之前基本上都是软件上的操作，这次是微信 + 硬件，和嵌入式工程师合作\n\n#### 大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。\n\n#### 其实做过微信开发的，基本上都会知道一个名词——*access_token*，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access_token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access_token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。\n\n#### 时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨*英雄无用武之地*，辛苦写的demo迟迟没上线。\n\n#### 时间追溯到昨天（2016/08/03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。\n\n#### 这时候摆在我面前的有两条路：\n\n> * 继续查Nodejs资料\n> * 重新设计接口\n\n#### 这次我并没有像之前一样，而是耐心从多个方面进行思考：*`技术可行性`  *和*  `时间成本`*\n\n> * 对于第一条，技术完全不熟悉，时间更是很难估计\n> * 对于第二条，把授权接口和普通接口合并在一起，符合设计常规，PHP也是很熟的语言。\n\n#### 于是，我便重新设计接口，设计方法：\n\n> * access_token依然放在Nodejs那台服务器，作为核心的参数\n> * 使用Nodejs写一个接口，给云端使用，用来读取access_token\n> * Nodejs还要写一个rebuilt接口，当access_token过期的时候，重新生成\n\n#### 写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。\n\n记录下当前的时间：2016/08/03  21 : 54","source":"_posts/一些杂谈琐事—-—-———-自我反思.md","raw":"---\ntitle: 一些杂谈琐事 —— 自我反思（一）\ndate: 2016-08-03 20:11:32\ntags: 自我反思\ncategories: 自我反思\n---\n\n####  我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，`“思考不足”`。\n#### 怎么来理解这四个字呢？用一个简单的小事情举个例子吧。\n#### *假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情*。\n\n#### 刚来公司的时候，老大给我分配了任务，就是使用`Nodejs`搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：\n> *  开发语言：之前都是使用`PHP`，但是给的源码是`Nodejs`\n> *  实现功能：之前基本上都是软件上的操作，这次是微信 + 硬件，和嵌入式工程师合作\n\n#### 大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。\n\n#### 其实做过微信开发的，基本上都会知道一个名词——*access_token*，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access_token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access_token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。\n\n#### 时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨*英雄无用武之地*，辛苦写的demo迟迟没上线。\n\n#### 时间追溯到昨天（2016/08/03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。\n\n#### 这时候摆在我面前的有两条路：\n\n> * 继续查Nodejs资料\n> * 重新设计接口\n\n#### 这次我并没有像之前一样，而是耐心从多个方面进行思考：*`技术可行性`  *和*  `时间成本`*\n\n> * 对于第一条，技术完全不熟悉，时间更是很难估计\n> * 对于第二条，把授权接口和普通接口合并在一起，符合设计常规，PHP也是很熟的语言。\n\n#### 于是，我便重新设计接口，设计方法：\n\n> * access_token依然放在Nodejs那台服务器，作为核心的参数\n> * 使用Nodejs写一个接口，给云端使用，用来读取access_token\n> * Nodejs还要写一个rebuilt接口，当access_token过期的时候，重新生成\n\n#### 写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。\n\n记录下当前的时间：2016/08/03  21 : 54","slug":"一些杂谈琐事—-—-———-自我反思","published":1,"updated":"2016-08-16T08:51:03.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cni001pugqm6wv787tl","content":"<h4 id=\"我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，“思考不足”。\"><a href=\"#我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，“思考不足”。\" class=\"headerlink\" title=\"我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，“思考不足”。\"></a>我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，<code>“思考不足”</code>。</h4><h4 id=\"怎么来理解这四个字呢？用一个简单的小事情举个例子吧。\"><a href=\"#怎么来理解这四个字呢？用一个简单的小事情举个例子吧。\" class=\"headerlink\" title=\"怎么来理解这四个字呢？用一个简单的小事情举个例子吧。\"></a>怎么来理解这四个字呢？用一个简单的小事情举个例子吧。</h4><h4 id=\"假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情。\"><a href=\"#假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情。\" class=\"headerlink\" title=\"假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情。\"></a><em>假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情</em>。</h4><h4 id=\"刚来公司的时候，老大给我分配了任务，就是使用Nodejs搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：\"><a href=\"#刚来公司的时候，老大给我分配了任务，就是使用Nodejs搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：\" class=\"headerlink\" title=\"刚来公司的时候，老大给我分配了任务，就是使用Nodejs搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：\"></a>刚来公司的时候，老大给我分配了任务，就是使用<code>Nodejs</code>搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：</h4><blockquote>\n<ul>\n<li>开发语言：之前都是使用<code>PHP</code>，但是给的源码是<code>Nodejs</code></li>\n<li>实现功能：之前基本上都是软件上的操作，这次是微信 + 硬件，和嵌入式工程师合作</li>\n</ul>\n</blockquote>\n<h4 id=\"大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。\"><a href=\"#大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。\" class=\"headerlink\" title=\"大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。\"></a>大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。</h4><h4 id=\"其实做过微信开发的，基本上都会知道一个名词——access-token，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access-token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access-token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。\"><a href=\"#其实做过微信开发的，基本上都会知道一个名词——access-token，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access-token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access-token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。\" class=\"headerlink\" title=\"其实做过微信开发的，基本上都会知道一个名词——access_token，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access_token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access_token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。\"></a>其实做过微信开发的，基本上都会知道一个名词——<em>access_token</em>，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access_token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access_token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。</h4><h4 id=\"时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨英雄无用武之地，辛苦写的demo迟迟没上线。\"><a href=\"#时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨英雄无用武之地，辛苦写的demo迟迟没上线。\" class=\"headerlink\" title=\"时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨英雄无用武之地，辛苦写的demo迟迟没上线。\"></a>时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨<em>英雄无用武之地</em>，辛苦写的demo迟迟没上线。</h4><h4 id=\"时间追溯到昨天（2016-08-03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。\"><a href=\"#时间追溯到昨天（2016-08-03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。\" class=\"headerlink\" title=\"时间追溯到昨天（2016/08/03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。\"></a>时间追溯到昨天（2016/08/03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。</h4><h4 id=\"这时候摆在我面前的有两条路：\"><a href=\"#这时候摆在我面前的有两条路：\" class=\"headerlink\" title=\"这时候摆在我面前的有两条路：\"></a>这时候摆在我面前的有两条路：</h4><blockquote>\n<ul>\n<li>继续查Nodejs资料</li>\n<li>重新设计接口</li>\n</ul>\n</blockquote>\n<h4 id=\"这次我并没有像之前一样，而是耐心从多个方面进行思考：技术可行性-和-时间成本\"><a href=\"#这次我并没有像之前一样，而是耐心从多个方面进行思考：技术可行性-和-时间成本\" class=\"headerlink\" title=\"这次我并没有像之前一样，而是耐心从多个方面进行思考：技术可行性  和  时间成本\"></a>这次我并没有像之前一样，而是耐心从多个方面进行思考：<em><code>技术可行性</code>  </em>和<em>  <code>时间成本</code></em></h4><blockquote>\n<ul>\n<li>对于第一条，技术完全不熟悉，时间更是很难估计</li>\n<li>对于第二条，把授权接口和普通接口合并在一起，符合设计常规，PHP也是很熟的语言。</li>\n</ul>\n</blockquote>\n<h4 id=\"于是，我便重新设计接口，设计方法：\"><a href=\"#于是，我便重新设计接口，设计方法：\" class=\"headerlink\" title=\"于是，我便重新设计接口，设计方法：\"></a>于是，我便重新设计接口，设计方法：</h4><blockquote>\n<ul>\n<li>access_token依然放在Nodejs那台服务器，作为核心的参数</li>\n<li>使用Nodejs写一个接口，给云端使用，用来读取access_token</li>\n<li>Nodejs还要写一个rebuilt接口，当access_token过期的时候，重新生成</li>\n</ul>\n</blockquote>\n<h4 id=\"写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。\"><a href=\"#写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。\" class=\"headerlink\" title=\"写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。\"></a>写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。</h4><p>记录下当前的时间：2016/08/03  21 : 54</p>\n","excerpt":"","more":"<h4 id=\"我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，“思考不足”。\"><a href=\"#我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，“思考不足”。\" class=\"headerlink\" title=\"我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，“思考不足”。\"></a>我个人觉得，一个人想要成长，自我反思是必不可少的事情。说句实话，做了这么长时间的开发了，做过很多坑别人的事情，也被别人坑过不少，总结一句话来讲，<code>“思考不足”</code>。</h4><h4 id=\"怎么来理解这四个字呢？用一个简单的小事情举个例子吧。\"><a href=\"#怎么来理解这四个字呢？用一个简单的小事情举个例子吧。\" class=\"headerlink\" title=\"怎么来理解这四个字呢？用一个简单的小事情举个例子吧。\"></a>怎么来理解这四个字呢？用一个简单的小事情举个例子吧。</h4><h4 id=\"假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情。\"><a href=\"#假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情。\" class=\"headerlink\" title=\"假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情。\"></a><em>假如自己写了一个测试功能的代码文件，后来感觉用不上了，就手欠，把这个文件删了；可以有一天，这个测试代码有到了需要的时候，但是当初被自己删了，导致自己还要重新写一遍。对于我这样基本上记不住代码的人来说，还会花一些时间去百度函数，花了很多不必要的时间，来做无用功的事情</em>。</h4><h4 id=\"刚来公司的时候，老大给我分配了任务，就是使用Nodejs搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：\"><a href=\"#刚来公司的时候，老大给我分配了任务，就是使用Nodejs搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：\" class=\"headerlink\" title=\"刚来公司的时候，老大给我分配了任务，就是使用Nodejs搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：\"></a>刚来公司的时候，老大给我分配了任务，就是使用<code>Nodejs</code>搭建微信公众平台，虽然在此之前也搞了很长时间的微信公众平台，但是这次和之前后很大不同：</h4><blockquote>\n<ul>\n<li>开发语言：之前都是使用<code>PHP</code>，但是给的源码是<code>Nodejs</code></li>\n<li>实现功能：之前基本上都是软件上的操作，这次是微信 + 硬件，和嵌入式工程师合作</li>\n</ul>\n</blockquote>\n<h4 id=\"大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。\"><a href=\"#大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。\" class=\"headerlink\" title=\"大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。\"></a>大致花了2-3个月的时间吧，终于把demo搞定，并且实现微信H5页面能够扫描设备的功能。这算是一个里程碑吧。</h4><h4 id=\"其实做过微信开发的，基本上都会知道一个名词——access-token，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access-token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access-token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。\"><a href=\"#其实做过微信开发的，基本上都会知道一个名词——access-token，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access-token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access-token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。\" class=\"headerlink\" title=\"其实做过微信开发的，基本上都会知道一个名词——access_token，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access_token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access_token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。\"></a>其实做过微信开发的，基本上都会知道一个名词——<em>access_token</em>，可以说这是调用其他所有微信接口的重要凭证。而且有效时间是7200秒（2小时），当时感觉access_token属于一个核心的参数，需要放在Nodejs这台服务器上面才行（普通接口和Nodejs在两台服务器上面部署着）。然后app在进行设备授权的时候，使用Nodejs写一个接口，不但能够调用微信API，还能较容易的控制access_token。当时感觉这样的设计还不错，但是我却无形之中给自己埋了一个坑：对Nodejs仅仅算是半入门的阶段。</h4><h4 id=\"时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨英雄无用武之地，辛苦写的demo迟迟没上线。\"><a href=\"#时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨英雄无用武之地，辛苦写的demo迟迟没上线。\" class=\"headerlink\" title=\"时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨英雄无用武之地，辛苦写的demo迟迟没上线。\"></a>时间大概过了4-5个月，当时设计的demo终于派上用场了，之前还在埋怨<em>英雄无用武之地</em>，辛苦写的demo迟迟没上线。</h4><h4 id=\"时间追溯到昨天（2016-08-03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。\"><a href=\"#时间追溯到昨天（2016-08-03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。\" class=\"headerlink\" title=\"时间追溯到昨天（2016/08/03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。\"></a>时间追溯到昨天（2016/08/03），本以为一切看似顺利的事情，突然卡住了：app客户端数据是经过gzip压缩过的，传上云端需要进行gzip解压才行。不得已，只能赶快查资料“Nodejs解压gzip数据”。结果很遗憾，没找到合适的解决方案，因为毕竟对于Nodejs并不熟悉。</h4><h4 id=\"这时候摆在我面前的有两条路：\"><a href=\"#这时候摆在我面前的有两条路：\" class=\"headerlink\" title=\"这时候摆在我面前的有两条路：\"></a>这时候摆在我面前的有两条路：</h4><blockquote>\n<ul>\n<li>继续查Nodejs资料</li>\n<li>重新设计接口</li>\n</ul>\n</blockquote>\n<h4 id=\"这次我并没有像之前一样，而是耐心从多个方面进行思考：技术可行性-和-时间成本\"><a href=\"#这次我并没有像之前一样，而是耐心从多个方面进行思考：技术可行性-和-时间成本\" class=\"headerlink\" title=\"这次我并没有像之前一样，而是耐心从多个方面进行思考：技术可行性  和  时间成本\"></a>这次我并没有像之前一样，而是耐心从多个方面进行思考：<em><code>技术可行性</code>  </em>和<em>  <code>时间成本</code></em></h4><blockquote>\n<ul>\n<li>对于第一条，技术完全不熟悉，时间更是很难估计</li>\n<li>对于第二条，把授权接口和普通接口合并在一起，符合设计常规，PHP也是很熟的语言。</li>\n</ul>\n</blockquote>\n<h4 id=\"于是，我便重新设计接口，设计方法：\"><a href=\"#于是，我便重新设计接口，设计方法：\" class=\"headerlink\" title=\"于是，我便重新设计接口，设计方法：\"></a>于是，我便重新设计接口，设计方法：</h4><blockquote>\n<ul>\n<li>access_token依然放在Nodejs那台服务器，作为核心的参数</li>\n<li>使用Nodejs写一个接口，给云端使用，用来读取access_token</li>\n<li>Nodejs还要写一个rebuilt接口，当access_token过期的时候，重新生成</li>\n</ul>\n</blockquote>\n<h4 id=\"写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。\"><a href=\"#写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。\" class=\"headerlink\" title=\"写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。\"></a>写完所有的接口，包括简单的测试，大致花了半天多的时间，这也算是对之前的坑的填补，这边blog也算是对自己的一个警示，和对“每天一篇Blog”打卡任务替代吧，因为今天实在是没什么写的了。</h4><p>记录下当前的时间：2016/08/03  21 : 54</p>\n"},{"title":"读《代码整洁之道》","date":"2016-09-02T12:02:53.000Z","_content":"\n#### 每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。\n\n#### 由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。\n\n#### 就像说的题目一样，主旨就是一个词：整洁\n\n#### 糟糕的代码\n\n#### 我们应该如何理解糟糕的代码？\n\n#### 无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。\n\n#### 假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·\t\n\n#### 整洁的代码\n\n#### 当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。\n\n#### *整洁的原则*\n\n#### *变量*\n\n#### 真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现`$name1`，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名+角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：\n```php\n$getActiveAccount\n$getActiveAccounts\n$getActiveAccountInfo\n```\n#### 应该很难有人区分这三个函数有什么不同了，moneyAmount 和  money两个变量其实没有任何区别。\n\n#### *函数*\n\n#### 对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。\n\n#### 在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。\n\n#### 作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。\n\n#### *格式*\n\n#### 我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？\n\n#### 其实书的内容远不止此，况且我现在才读1/3，虽然书中的代码是`Java`但是思想是一致的。","source":"_posts/读《代码整洁之道》.md","raw":"---\ntitle: 读《代码整洁之道》\ndate: 2016-09-02 20:02:53\ntags: 随笔\ncategories: 随笔\n---\n\n#### 每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。\n\n#### 由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。\n\n#### 就像说的题目一样，主旨就是一个词：整洁\n\n#### 糟糕的代码\n\n#### 我们应该如何理解糟糕的代码？\n\n#### 无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。\n\n#### 假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·\t\n\n#### 整洁的代码\n\n#### 当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。\n\n#### *整洁的原则*\n\n#### *变量*\n\n#### 真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现`$name1`，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名+角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：\n```php\n$getActiveAccount\n$getActiveAccounts\n$getActiveAccountInfo\n```\n#### 应该很难有人区分这三个函数有什么不同了，moneyAmount 和  money两个变量其实没有任何区别。\n\n#### *函数*\n\n#### 对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。\n\n#### 在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。\n\n#### 作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。\n\n#### *格式*\n\n#### 我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？\n\n#### 其实书的内容远不止此，况且我现在才读1/3，虽然书中的代码是`Java`但是思想是一致的。","slug":"读《代码整洁之道》","published":1,"updated":"2016-09-02T12:03:30.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cnm001uugqmi2s6que8","content":"<h4 id=\"每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。\"><a href=\"#每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。\" class=\"headerlink\" title=\"每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。\"></a>每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。</h4><h4 id=\"由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。\"><a href=\"#由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。\" class=\"headerlink\" title=\"由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。\"></a>由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。</h4><h4 id=\"就像说的题目一样，主旨就是一个词：整洁\"><a href=\"#就像说的题目一样，主旨就是一个词：整洁\" class=\"headerlink\" title=\"就像说的题目一样，主旨就是一个词：整洁\"></a>就像说的题目一样，主旨就是一个词：整洁</h4><h4 id=\"糟糕的代码\"><a href=\"#糟糕的代码\" class=\"headerlink\" title=\"糟糕的代码\"></a>糟糕的代码</h4><h4 id=\"我们应该如何理解糟糕的代码？\"><a href=\"#我们应该如何理解糟糕的代码？\" class=\"headerlink\" title=\"我们应该如何理解糟糕的代码？\"></a>我们应该如何理解糟糕的代码？</h4><h4 id=\"无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。\"><a href=\"#无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。\" class=\"headerlink\" title=\"无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。\"></a>无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。</h4><h4 id=\"假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·\"><a href=\"#假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·\" class=\"headerlink\" title=\"假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·\"></a>假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·</h4><h4 id=\"整洁的代码\"><a href=\"#整洁的代码\" class=\"headerlink\" title=\"整洁的代码\"></a>整洁的代码</h4><h4 id=\"当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。\"><a href=\"#当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。\" class=\"headerlink\" title=\"当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。\"></a>当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。</h4><h4 id=\"整洁的原则\"><a href=\"#整洁的原则\" class=\"headerlink\" title=\"整洁的原则\"></a><em>整洁的原则</em></h4><h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a><em>变量</em></h4><h4 id=\"真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现-name1，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名-角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：\"><a href=\"#真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现-name1，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名-角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：\" class=\"headerlink\" title=\"真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现$name1，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名+角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：\"></a>真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现<code>$name1</code>，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名+角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">$getActiveAccount</div><div class=\"line\">$getActiveAccounts</div><div class=\"line\">$getActiveAccountInfo</div></pre></td></tr></table></figure>\n<h4 id=\"应该很难有人区分这三个函数有什么不同了，moneyAmount-和-money两个变量其实没有任何区别。\"><a href=\"#应该很难有人区分这三个函数有什么不同了，moneyAmount-和-money两个变量其实没有任何区别。\" class=\"headerlink\" title=\"应该很难有人区分这三个函数有什么不同了，moneyAmount 和  money两个变量其实没有任何区别。\"></a>应该很难有人区分这三个函数有什么不同了，moneyAmount 和  money两个变量其实没有任何区别。</h4><h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a><em>函数</em></h4><h4 id=\"对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。\"><a href=\"#对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。\" class=\"headerlink\" title=\"对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。\"></a>对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。</h4><h4 id=\"在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。\"><a href=\"#在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。\" class=\"headerlink\" title=\"在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。\"></a>在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。</h4><h4 id=\"作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。\"><a href=\"#作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。\" class=\"headerlink\" title=\"作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。\"></a>作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。</h4><h4 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a><em>格式</em></h4><h4 id=\"我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？\"><a href=\"#我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？\" class=\"headerlink\" title=\"我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？\"></a>我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？</h4><h4 id=\"其实书的内容远不止此，况且我现在才读1-3，虽然书中的代码是Java但是思想是一致的。\"><a href=\"#其实书的内容远不止此，况且我现在才读1-3，虽然书中的代码是Java但是思想是一致的。\" class=\"headerlink\" title=\"其实书的内容远不止此，况且我现在才读1/3，虽然书中的代码是Java但是思想是一致的。\"></a>其实书的内容远不止此，况且我现在才读1/3，虽然书中的代码是<code>Java</code>但是思想是一致的。</h4>","excerpt":"","more":"<h4 id=\"每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。\"><a href=\"#每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。\" class=\"headerlink\" title=\"每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。\"></a>每次写代码的时候，总是感觉自己的代码很渣，于是买了一本《代码整洁之道》，希望能够学习一下优秀代码的书写原则。</h4><h4 id=\"由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。\"><a href=\"#由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。\" class=\"headerlink\" title=\"由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。\"></a>由于平时的工作比较多，我并没有专门找时间阅读这本书，只是用一些边角时间来阅读，这么长时间过去了，现在才读到100多页。这篇blog也算是对前段时间阅读的一个小结吧。</h4><h4 id=\"就像说的题目一样，主旨就是一个词：整洁\"><a href=\"#就像说的题目一样，主旨就是一个词：整洁\" class=\"headerlink\" title=\"就像说的题目一样，主旨就是一个词：整洁\"></a>就像说的题目一样，主旨就是一个词：整洁</h4><h4 id=\"糟糕的代码\"><a href=\"#糟糕的代码\" class=\"headerlink\" title=\"糟糕的代码\"></a>糟糕的代码</h4><h4 id=\"我们应该如何理解糟糕的代码？\"><a href=\"#我们应该如何理解糟糕的代码？\" class=\"headerlink\" title=\"我们应该如何理解糟糕的代码？\"></a>我们应该如何理解糟糕的代码？</h4><h4 id=\"无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。\"><a href=\"#无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。\" class=\"headerlink\" title=\"无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。\"></a>无非就是明明不准确的代码。其实糟糕的代码远不止此，很多时候，我们会为了时间和进度，赶着出产品，外包公司更甚。我最开始在腾骏，公司主要业务就是外包，由于当时没有把写代码当成一回事，导致后面代码维护比较困难，也使自己养成了坏习惯，其实应该在项目的初期，就应该定好编码规范，到后面的维护会要简单的多。</h4><h4 id=\"假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·\"><a href=\"#假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·\" class=\"headerlink\" title=\"假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·\"></a>假如我们在写代码的时候，不注意规范，到了后面如果有新同志加入项目，由于对业务的不熟悉，以及代码的规范，很容易是新同学造成误解，进而编写出更糟糕的代码。长此以往，整个项目将会被糟糕的代码所吞噬。后果不堪设想。·</h4><h4 id=\"整洁的代码\"><a href=\"#整洁的代码\" class=\"headerlink\" title=\"整洁的代码\"></a>整洁的代码</h4><h4 id=\"当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。\"><a href=\"#当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。\" class=\"headerlink\" title=\"当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。\"></a>当你阅读整洁的代码的时候，我会觉得你在阅读一首诗！事实确实是这样，当我首次来到轻客的时候，看到项目的代码，似乎不能仅仅使用整洁来形容，整个项目结构都相当严谨，有的时候，生怕自己的一个命名把整个项目玷污。</h4><h4 id=\"整洁的原则\"><a href=\"#整洁的原则\" class=\"headerlink\" title=\"整洁的原则\"></a><em>整洁的原则</em></h4><h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a><em>变量</em></h4><h4 id=\"真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现-name1，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名-角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：\"><a href=\"#真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现-name1，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名-角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：\" class=\"headerlink\" title=\"真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现$name1，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名+角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：\"></a>真应该是我们最经常听到的规范了。名副其实很容易理解，比如命名过程中出现<code>$name1</code>，呵呵，以前真的没少使用这种命名，现在我都想打死自己了，变量名+角标是需要严格禁止的。不过有些时候我们也会使用这样的命名：</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><div class=\"line\">$getActiveAccount</div><div class=\"line\">$getActiveAccounts</div><div class=\"line\">$getActiveAccountInfo</div></pre></td></tr></table></figure>\n<h4 id=\"应该很难有人区分这三个函数有什么不同了，moneyAmount-和-money两个变量其实没有任何区别。\"><a href=\"#应该很难有人区分这三个函数有什么不同了，moneyAmount-和-money两个变量其实没有任何区别。\" class=\"headerlink\" title=\"应该很难有人区分这三个函数有什么不同了，moneyAmount 和  money两个变量其实没有任何区别。\"></a>应该很难有人区分这三个函数有什么不同了，moneyAmount 和  money两个变量其实没有任何区别。</h4><h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a><em>函数</em></h4><h4 id=\"对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。\"><a href=\"#对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。\" class=\"headerlink\" title=\"对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。\"></a>对于面向对象，必不可少的就是类和函数了，在命名类的时候，应该使用名词，而函数应该是动词。</h4><h4 id=\"在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。\"><a href=\"#在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。\" class=\"headerlink\" title=\"在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。\"></a>在写函数的时候，我们也应该按照专一原则，把大函数拆分成小函数，按照调用原则在类中进行排序。</h4><h4 id=\"作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。\"><a href=\"#作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。\" class=\"headerlink\" title=\"作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。\"></a>作者还强调最好别写注释。如果是没读这本书的时候，我绝对是没办法理解的。因为项目在维护的时候，很少有人会去维护注释部分，随着时间的推移，注释和函数越来越不相符合。而且直接把代码注释是个讨厌的做法，因为后面的人，看着注释代码会觉得这段代码很有用，慢慢的，注释的代码就像破酒瓶一样。</h4><h4 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a><em>格式</em></h4><h4 id=\"我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？\"><a href=\"#我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？\" class=\"headerlink\" title=\"我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？\"></a>我们应该尽量不要写巨大篇幅的代码，因为行数很多的话，会让阅读者很难阅读，你能容忍去阅读一个函数行数超过整个屏幕吗？</h4><h4 id=\"其实书的内容远不止此，况且我现在才读1-3，虽然书中的代码是Java但是思想是一致的。\"><a href=\"#其实书的内容远不止此，况且我现在才读1-3，虽然书中的代码是Java但是思想是一致的。\" class=\"headerlink\" title=\"其实书的内容远不止此，况且我现在才读1/3，虽然书中的代码是Java但是思想是一致的。\"></a>其实书的内容远不止此，况且我现在才读1/3，虽然书中的代码是<code>Java</code>但是思想是一致的。</h4>"},{"title":"关于多个chatbot的调研结果","date":"2016-08-26T11:14:10.000Z","_content":"\n\n### 调研API list：\n> * [小黄鸡：SimSimi](http://developer.simsimi.com/)\n> * [潘多拉机器人：Pandorabots](https://developer.pandorabots.com)\n> * [人格锻造机器人：personalityforge](http://www.personalityforge.com/)\n\n### SimSimi：\n\n### 语言支持：韩、英、中为首的45中语言\n\n#### 小黄鸡可以说是最喜闻乐见的机器人了。小黄鸡在国人眼中比较熟悉，应用范围比较广泛，而且百度，人人网也是合作伙伴之一，支持多达45中语言，不过这些语言中并非所有的都能准确回应。韩语、英语和汉语是小黄鸡支持最好的三种语言了。首先，小黄鸡产自韩国，对韩语支持最大；英语作为世界应用范围最广的语言紧随其后；全球用户使用者最多的汉语位居第三。我之所以这么说，也并非毫无依据，官网语言仅支持这三种语言。\n\n### 培养：官方\n\n#### SimSimi的语言培养完全来自官方培养，所以只要接入之后，完全不需要自己配置，这一点在三者之中最方便快捷，只需要通过API传入对应参数即可。\n\n### 优势：\n\n> #### 1、接入简单快捷：只需要简单十多行代码即可\n> #### 2、语言支持广泛：支持多种语言\n> #### 3、口语化：交谈更接近两人交谈，没有那种冷冷的机器人的感觉\n\n### 劣势：\n\n> #### 1、语气太轻松：口语化虽然有些优势，但是SimSimi回复的内容有时候会充斥着轻浮和暴力因素\n\n###  Pandorabots\n\n### 语言支持：英语\n\n#### Pandorabots在Google排名比较靠前的chatbot，他和SimSimi有比较大的差别，Pandorabots是基于RESTful API的人工智能应用程序，这类机器人并不适合经常的语音交谈聊天，更适合人工智能操作。比如，对台灯说：关灯！适用于简单、快捷的机器指令操作。 其实我要吐槽一下，在实用Pandorabots API的时候，必须要信用卡认证才行，没用信用卡则代表着没办法试用接口，这是一个非常蛋疼的地方。\n\n### 培养：开发者。\n\n#### 潘多拉机器人的培养依靠开发者自身，不定时的上传固定格式的配置文件，然后进行编译，编译结束后进行谈话。其实完整的流程是：crete -> upload -> compile -> talk\n\n![Alt text](/img/QQ截图20160826192107.png)\n\n### 优势：\n\n> ####  1、交谈内控可控，回答内容完全在自己控制下\n\n### 劣势：\n\n> #### 1、接入比较复杂，官方只提供Java、Python和nodejs的sdk，需要github上下载第三方sdk\n> #### 2、需要频繁的进行upload和compile\n> #### 3、蛋疼的试用限制：需要信用卡认证\n> #### 4、应用范围比较小，不适合做聊天机器人\n\n### Personalityforge：\n\n### 语言支持：英语\n\n#### 人格锻造机器人是我自己找的API，从机器人的名字中，我们基本上可以理解出两层信息，首先，这个机器人是有人格的，然后这个机器人是需要锻造。事实上却是如此，当我打开这个机器人website的时候，发现上面有1万+的机器人，可以说上面每个机器人都有各自的性格，风格迥异，你可以找到性格激进暴躁的，可以发现性格温柔腼腆的机器人......\n\n### 培养：开发者\n\n#### Personalityforge和Pandorabots有些相似之处，就是需要开发者设置对话内容。当你在网站上面创建一个机器人的时候，会有一个id，这个id也是在调用API的时候必须的，因为它决定你和哪一个机器人在对话。此外，创建后，机器人自带一些简单对话内容，官方也提供了一些例如food，color等插件，可以集成到你的机器人上面。\n#### 你也可以使用其他人创建的机器人，不过你需要联系对方获取授权才行。所以Personalityforge更像是一个平台。\n\n### 优势：\n\n> #### 1、操作比较简单，官方提供demo\n> #### 2、官方提供插件，方便集成\n> #### 3、机器人众多\n\n### 劣势：\n\n> #### 1、机器人需要开发者进行训练\n> #### 2、虽然网站上面机器人数量众多，但是大多私人创建，可能不太适合商业用途\n\n\n### 以上便是我对三种机器人的调研结果了: )","source":"_posts/关于多个chatbot的调研结果.md","raw":"---\ntitle: 关于多个chatbot的调研结果\ndate: 2016-08-26 19:14:10\ntags: 随笔\ncategories: 随笔\n---\n\n\n### 调研API list：\n> * [小黄鸡：SimSimi](http://developer.simsimi.com/)\n> * [潘多拉机器人：Pandorabots](https://developer.pandorabots.com)\n> * [人格锻造机器人：personalityforge](http://www.personalityforge.com/)\n\n### SimSimi：\n\n### 语言支持：韩、英、中为首的45中语言\n\n#### 小黄鸡可以说是最喜闻乐见的机器人了。小黄鸡在国人眼中比较熟悉，应用范围比较广泛，而且百度，人人网也是合作伙伴之一，支持多达45中语言，不过这些语言中并非所有的都能准确回应。韩语、英语和汉语是小黄鸡支持最好的三种语言了。首先，小黄鸡产自韩国，对韩语支持最大；英语作为世界应用范围最广的语言紧随其后；全球用户使用者最多的汉语位居第三。我之所以这么说，也并非毫无依据，官网语言仅支持这三种语言。\n\n### 培养：官方\n\n#### SimSimi的语言培养完全来自官方培养，所以只要接入之后，完全不需要自己配置，这一点在三者之中最方便快捷，只需要通过API传入对应参数即可。\n\n### 优势：\n\n> #### 1、接入简单快捷：只需要简单十多行代码即可\n> #### 2、语言支持广泛：支持多种语言\n> #### 3、口语化：交谈更接近两人交谈，没有那种冷冷的机器人的感觉\n\n### 劣势：\n\n> #### 1、语气太轻松：口语化虽然有些优势，但是SimSimi回复的内容有时候会充斥着轻浮和暴力因素\n\n###  Pandorabots\n\n### 语言支持：英语\n\n#### Pandorabots在Google排名比较靠前的chatbot，他和SimSimi有比较大的差别，Pandorabots是基于RESTful API的人工智能应用程序，这类机器人并不适合经常的语音交谈聊天，更适合人工智能操作。比如，对台灯说：关灯！适用于简单、快捷的机器指令操作。 其实我要吐槽一下，在实用Pandorabots API的时候，必须要信用卡认证才行，没用信用卡则代表着没办法试用接口，这是一个非常蛋疼的地方。\n\n### 培养：开发者。\n\n#### 潘多拉机器人的培养依靠开发者自身，不定时的上传固定格式的配置文件，然后进行编译，编译结束后进行谈话。其实完整的流程是：crete -> upload -> compile -> talk\n\n![Alt text](/img/QQ截图20160826192107.png)\n\n### 优势：\n\n> ####  1、交谈内控可控，回答内容完全在自己控制下\n\n### 劣势：\n\n> #### 1、接入比较复杂，官方只提供Java、Python和nodejs的sdk，需要github上下载第三方sdk\n> #### 2、需要频繁的进行upload和compile\n> #### 3、蛋疼的试用限制：需要信用卡认证\n> #### 4、应用范围比较小，不适合做聊天机器人\n\n### Personalityforge：\n\n### 语言支持：英语\n\n#### 人格锻造机器人是我自己找的API，从机器人的名字中，我们基本上可以理解出两层信息，首先，这个机器人是有人格的，然后这个机器人是需要锻造。事实上却是如此，当我打开这个机器人website的时候，发现上面有1万+的机器人，可以说上面每个机器人都有各自的性格，风格迥异，你可以找到性格激进暴躁的，可以发现性格温柔腼腆的机器人......\n\n### 培养：开发者\n\n#### Personalityforge和Pandorabots有些相似之处，就是需要开发者设置对话内容。当你在网站上面创建一个机器人的时候，会有一个id，这个id也是在调用API的时候必须的，因为它决定你和哪一个机器人在对话。此外，创建后，机器人自带一些简单对话内容，官方也提供了一些例如food，color等插件，可以集成到你的机器人上面。\n#### 你也可以使用其他人创建的机器人，不过你需要联系对方获取授权才行。所以Personalityforge更像是一个平台。\n\n### 优势：\n\n> #### 1、操作比较简单，官方提供demo\n> #### 2、官方提供插件，方便集成\n> #### 3、机器人众多\n\n### 劣势：\n\n> #### 1、机器人需要开发者进行训练\n> #### 2、虽然网站上面机器人数量众多，但是大多私人创建，可能不太适合商业用途\n\n\n### 以上便是我对三种机器人的调研结果了: )","slug":"关于多个chatbot的调研结果","published":1,"updated":"2016-08-26T11:21:30.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cnp001wugqm1e0prupz","content":"<h3 id=\"调研API-list：\"><a href=\"#调研API-list：\" class=\"headerlink\" title=\"调研API list：\"></a>调研API list：</h3><blockquote>\n<ul>\n<li><a href=\"http://developer.simsimi.com/\" target=\"_blank\" rel=\"external\">小黄鸡：SimSimi</a></li>\n<li><a href=\"https://developer.pandorabots.com\" target=\"_blank\" rel=\"external\">潘多拉机器人：Pandorabots</a></li>\n<li><a href=\"http://www.personalityforge.com/\" target=\"_blank\" rel=\"external\">人格锻造机器人：personalityforge</a></li>\n</ul>\n</blockquote>\n<h3 id=\"SimSimi：\"><a href=\"#SimSimi：\" class=\"headerlink\" title=\"SimSimi：\"></a>SimSimi：</h3><h3 id=\"语言支持：韩、英、中为首的45中语言\"><a href=\"#语言支持：韩、英、中为首的45中语言\" class=\"headerlink\" title=\"语言支持：韩、英、中为首的45中语言\"></a>语言支持：韩、英、中为首的45中语言</h3><h4 id=\"小黄鸡可以说是最喜闻乐见的机器人了。小黄鸡在国人眼中比较熟悉，应用范围比较广泛，而且百度，人人网也是合作伙伴之一，支持多达45中语言，不过这些语言中并非所有的都能准确回应。韩语、英语和汉语是小黄鸡支持最好的三种语言了。首先，小黄鸡产自韩国，对韩语支持最大；英语作为世界应用范围最广的语言紧随其后；全球用户使用者最多的汉语位居第三。我之所以这么说，也并非毫无依据，官网语言仅支持这三种语言。\"><a href=\"#小黄鸡可以说是最喜闻乐见的机器人了。小黄鸡在国人眼中比较熟悉，应用范围比较广泛，而且百度，人人网也是合作伙伴之一，支持多达45中语言，不过这些语言中并非所有的都能准确回应。韩语、英语和汉语是小黄鸡支持最好的三种语言了。首先，小黄鸡产自韩国，对韩语支持最大；英语作为世界应用范围最广的语言紧随其后；全球用户使用者最多的汉语位居第三。我之所以这么说，也并非毫无依据，官网语言仅支持这三种语言。\" class=\"headerlink\" title=\"小黄鸡可以说是最喜闻乐见的机器人了。小黄鸡在国人眼中比较熟悉，应用范围比较广泛，而且百度，人人网也是合作伙伴之一，支持多达45中语言，不过这些语言中并非所有的都能准确回应。韩语、英语和汉语是小黄鸡支持最好的三种语言了。首先，小黄鸡产自韩国，对韩语支持最大；英语作为世界应用范围最广的语言紧随其后；全球用户使用者最多的汉语位居第三。我之所以这么说，也并非毫无依据，官网语言仅支持这三种语言。\"></a>小黄鸡可以说是最喜闻乐见的机器人了。小黄鸡在国人眼中比较熟悉，应用范围比较广泛，而且百度，人人网也是合作伙伴之一，支持多达45中语言，不过这些语言中并非所有的都能准确回应。韩语、英语和汉语是小黄鸡支持最好的三种语言了。首先，小黄鸡产自韩国，对韩语支持最大；英语作为世界应用范围最广的语言紧随其后；全球用户使用者最多的汉语位居第三。我之所以这么说，也并非毫无依据，官网语言仅支持这三种语言。</h4><h3 id=\"培养：官方\"><a href=\"#培养：官方\" class=\"headerlink\" title=\"培养：官方\"></a>培养：官方</h3><h4 id=\"SimSimi的语言培养完全来自官方培养，所以只要接入之后，完全不需要自己配置，这一点在三者之中最方便快捷，只需要通过API传入对应参数即可。\"><a href=\"#SimSimi的语言培养完全来自官方培养，所以只要接入之后，完全不需要自己配置，这一点在三者之中最方便快捷，只需要通过API传入对应参数即可。\" class=\"headerlink\" title=\"SimSimi的语言培养完全来自官方培养，所以只要接入之后，完全不需要自己配置，这一点在三者之中最方便快捷，只需要通过API传入对应参数即可。\"></a>SimSimi的语言培养完全来自官方培养，所以只要接入之后，完全不需要自己配置，这一点在三者之中最方便快捷，只需要通过API传入对应参数即可。</h4><h3 id=\"优势：\"><a href=\"#优势：\" class=\"headerlink\" title=\"优势：\"></a>优势：</h3><blockquote>\n<h4 id=\"1、接入简单快捷：只需要简单十多行代码即可\"><a href=\"#1、接入简单快捷：只需要简单十多行代码即可\" class=\"headerlink\" title=\"1、接入简单快捷：只需要简单十多行代码即可\"></a>1、接入简单快捷：只需要简单十多行代码即可</h4><h4 id=\"2、语言支持广泛：支持多种语言\"><a href=\"#2、语言支持广泛：支持多种语言\" class=\"headerlink\" title=\"2、语言支持广泛：支持多种语言\"></a>2、语言支持广泛：支持多种语言</h4><h4 id=\"3、口语化：交谈更接近两人交谈，没有那种冷冷的机器人的感觉\"><a href=\"#3、口语化：交谈更接近两人交谈，没有那种冷冷的机器人的感觉\" class=\"headerlink\" title=\"3、口语化：交谈更接近两人交谈，没有那种冷冷的机器人的感觉\"></a>3、口语化：交谈更接近两人交谈，没有那种冷冷的机器人的感觉</h4></blockquote>\n<h3 id=\"劣势：\"><a href=\"#劣势：\" class=\"headerlink\" title=\"劣势：\"></a>劣势：</h3><blockquote>\n<h4 id=\"1、语气太轻松：口语化虽然有些优势，但是SimSimi回复的内容有时候会充斥着轻浮和暴力因素\"><a href=\"#1、语气太轻松：口语化虽然有些优势，但是SimSimi回复的内容有时候会充斥着轻浮和暴力因素\" class=\"headerlink\" title=\"1、语气太轻松：口语化虽然有些优势，但是SimSimi回复的内容有时候会充斥着轻浮和暴力因素\"></a>1、语气太轻松：口语化虽然有些优势，但是SimSimi回复的内容有时候会充斥着轻浮和暴力因素</h4></blockquote>\n<h3 id=\"Pandorabots\"><a href=\"#Pandorabots\" class=\"headerlink\" title=\"Pandorabots\"></a>Pandorabots</h3><h3 id=\"语言支持：英语\"><a href=\"#语言支持：英语\" class=\"headerlink\" title=\"语言支持：英语\"></a>语言支持：英语</h3><h4 id=\"Pandorabots在Google排名比较靠前的chatbot，他和SimSimi有比较大的差别，Pandorabots是基于RESTful-API的人工智能应用程序，这类机器人并不适合经常的语音交谈聊天，更适合人工智能操作。比如，对台灯说：关灯！适用于简单、快捷的机器指令操作。-其实我要吐槽一下，在实用Pandorabots-API的时候，必须要信用卡认证才行，没用信用卡则代表着没办法试用接口，这是一个非常蛋疼的地方。\"><a href=\"#Pandorabots在Google排名比较靠前的chatbot，他和SimSimi有比较大的差别，Pandorabots是基于RESTful-API的人工智能应用程序，这类机器人并不适合经常的语音交谈聊天，更适合人工智能操作。比如，对台灯说：关灯！适用于简单、快捷的机器指令操作。-其实我要吐槽一下，在实用Pandorabots-API的时候，必须要信用卡认证才行，没用信用卡则代表着没办法试用接口，这是一个非常蛋疼的地方。\" class=\"headerlink\" title=\"Pandorabots在Google排名比较靠前的chatbot，他和SimSimi有比较大的差别，Pandorabots是基于RESTful API的人工智能应用程序，这类机器人并不适合经常的语音交谈聊天，更适合人工智能操作。比如，对台灯说：关灯！适用于简单、快捷的机器指令操作。 其实我要吐槽一下，在实用Pandorabots API的时候，必须要信用卡认证才行，没用信用卡则代表着没办法试用接口，这是一个非常蛋疼的地方。\"></a>Pandorabots在Google排名比较靠前的chatbot，他和SimSimi有比较大的差别，Pandorabots是基于RESTful API的人工智能应用程序，这类机器人并不适合经常的语音交谈聊天，更适合人工智能操作。比如，对台灯说：关灯！适用于简单、快捷的机器指令操作。 其实我要吐槽一下，在实用Pandorabots API的时候，必须要信用卡认证才行，没用信用卡则代表着没办法试用接口，这是一个非常蛋疼的地方。</h4><h3 id=\"培养：开发者。\"><a href=\"#培养：开发者。\" class=\"headerlink\" title=\"培养：开发者。\"></a>培养：开发者。</h3><h4 id=\"潘多拉机器人的培养依靠开发者自身，不定时的上传固定格式的配置文件，然后进行编译，编译结束后进行谈话。其实完整的流程是：crete-gt-upload-gt-compile-gt-talk\"><a href=\"#潘多拉机器人的培养依靠开发者自身，不定时的上传固定格式的配置文件，然后进行编译，编译结束后进行谈话。其实完整的流程是：crete-gt-upload-gt-compile-gt-talk\" class=\"headerlink\" title=\"潘多拉机器人的培养依靠开发者自身，不定时的上传固定格式的配置文件，然后进行编译，编译结束后进行谈话。其实完整的流程是：crete -&gt; upload -&gt; compile -&gt; talk\"></a>潘多拉机器人的培养依靠开发者自身，不定时的上传固定格式的配置文件，然后进行编译，编译结束后进行谈话。其实完整的流程是：crete -&gt; upload -&gt; compile -&gt; talk</h4><p><img src=\"/img/QQ截图20160826192107.png\" alt=\"Alt text\"></p>\n<h3 id=\"优势：-1\"><a href=\"#优势：-1\" class=\"headerlink\" title=\"优势：\"></a>优势：</h3><blockquote>\n<h4 id=\"1、交谈内控可控，回答内容完全在自己控制下\"><a href=\"#1、交谈内控可控，回答内容完全在自己控制下\" class=\"headerlink\" title=\"1、交谈内控可控，回答内容完全在自己控制下\"></a>1、交谈内控可控，回答内容完全在自己控制下</h4></blockquote>\n<h3 id=\"劣势：-1\"><a href=\"#劣势：-1\" class=\"headerlink\" title=\"劣势：\"></a>劣势：</h3><blockquote>\n<h4 id=\"1、接入比较复杂，官方只提供Java、Python和nodejs的sdk，需要github上下载第三方sdk\"><a href=\"#1、接入比较复杂，官方只提供Java、Python和nodejs的sdk，需要github上下载第三方sdk\" class=\"headerlink\" title=\"1、接入比较复杂，官方只提供Java、Python和nodejs的sdk，需要github上下载第三方sdk\"></a>1、接入比较复杂，官方只提供Java、Python和nodejs的sdk，需要github上下载第三方sdk</h4><h4 id=\"2、需要频繁的进行upload和compile\"><a href=\"#2、需要频繁的进行upload和compile\" class=\"headerlink\" title=\"2、需要频繁的进行upload和compile\"></a>2、需要频繁的进行upload和compile</h4><h4 id=\"3、蛋疼的试用限制：需要信用卡认证\"><a href=\"#3、蛋疼的试用限制：需要信用卡认证\" class=\"headerlink\" title=\"3、蛋疼的试用限制：需要信用卡认证\"></a>3、蛋疼的试用限制：需要信用卡认证</h4><h4 id=\"4、应用范围比较小，不适合做聊天机器人\"><a href=\"#4、应用范围比较小，不适合做聊天机器人\" class=\"headerlink\" title=\"4、应用范围比较小，不适合做聊天机器人\"></a>4、应用范围比较小，不适合做聊天机器人</h4></blockquote>\n<h3 id=\"Personalityforge：\"><a href=\"#Personalityforge：\" class=\"headerlink\" title=\"Personalityforge：\"></a>Personalityforge：</h3><h3 id=\"语言支持：英语-1\"><a href=\"#语言支持：英语-1\" class=\"headerlink\" title=\"语言支持：英语\"></a>语言支持：英语</h3><h4 id=\"人格锻造机器人是我自己找的API，从机器人的名字中，我们基本上可以理解出两层信息，首先，这个机器人是有人格的，然后这个机器人是需要锻造。事实上却是如此，当我打开这个机器人website的时候，发现上面有1万-的机器人，可以说上面每个机器人都有各自的性格，风格迥异，你可以找到性格激进暴躁的，可以发现性格温柔腼腆的机器人……\"><a href=\"#人格锻造机器人是我自己找的API，从机器人的名字中，我们基本上可以理解出两层信息，首先，这个机器人是有人格的，然后这个机器人是需要锻造。事实上却是如此，当我打开这个机器人website的时候，发现上面有1万-的机器人，可以说上面每个机器人都有各自的性格，风格迥异，你可以找到性格激进暴躁的，可以发现性格温柔腼腆的机器人……\" class=\"headerlink\" title=\"人格锻造机器人是我自己找的API，从机器人的名字中，我们基本上可以理解出两层信息，首先，这个机器人是有人格的，然后这个机器人是需要锻造。事实上却是如此，当我打开这个机器人website的时候，发现上面有1万+的机器人，可以说上面每个机器人都有各自的性格，风格迥异，你可以找到性格激进暴躁的，可以发现性格温柔腼腆的机器人……\"></a>人格锻造机器人是我自己找的API，从机器人的名字中，我们基本上可以理解出两层信息，首先，这个机器人是有人格的，然后这个机器人是需要锻造。事实上却是如此，当我打开这个机器人website的时候，发现上面有1万+的机器人，可以说上面每个机器人都有各自的性格，风格迥异，你可以找到性格激进暴躁的，可以发现性格温柔腼腆的机器人……</h4><h3 id=\"培养：开发者\"><a href=\"#培养：开发者\" class=\"headerlink\" title=\"培养：开发者\"></a>培养：开发者</h3><h4 id=\"Personalityforge和Pandorabots有些相似之处，就是需要开发者设置对话内容。当你在网站上面创建一个机器人的时候，会有一个id，这个id也是在调用API的时候必须的，因为它决定你和哪一个机器人在对话。此外，创建后，机器人自带一些简单对话内容，官方也提供了一些例如food，color等插件，可以集成到你的机器人上面。\"><a href=\"#Personalityforge和Pandorabots有些相似之处，就是需要开发者设置对话内容。当你在网站上面创建一个机器人的时候，会有一个id，这个id也是在调用API的时候必须的，因为它决定你和哪一个机器人在对话。此外，创建后，机器人自带一些简单对话内容，官方也提供了一些例如food，color等插件，可以集成到你的机器人上面。\" class=\"headerlink\" title=\"Personalityforge和Pandorabots有些相似之处，就是需要开发者设置对话内容。当你在网站上面创建一个机器人的时候，会有一个id，这个id也是在调用API的时候必须的，因为它决定你和哪一个机器人在对话。此外，创建后，机器人自带一些简单对话内容，官方也提供了一些例如food，color等插件，可以集成到你的机器人上面。\"></a>Personalityforge和Pandorabots有些相似之处，就是需要开发者设置对话内容。当你在网站上面创建一个机器人的时候，会有一个id，这个id也是在调用API的时候必须的，因为它决定你和哪一个机器人在对话。此外，创建后，机器人自带一些简单对话内容，官方也提供了一些例如food，color等插件，可以集成到你的机器人上面。</h4><h4 id=\"你也可以使用其他人创建的机器人，不过你需要联系对方获取授权才行。所以Personalityforge更像是一个平台。\"><a href=\"#你也可以使用其他人创建的机器人，不过你需要联系对方获取授权才行。所以Personalityforge更像是一个平台。\" class=\"headerlink\" title=\"你也可以使用其他人创建的机器人，不过你需要联系对方获取授权才行。所以Personalityforge更像是一个平台。\"></a>你也可以使用其他人创建的机器人，不过你需要联系对方获取授权才行。所以Personalityforge更像是一个平台。</h4><h3 id=\"优势：-2\"><a href=\"#优势：-2\" class=\"headerlink\" title=\"优势：\"></a>优势：</h3><blockquote>\n<h4 id=\"1、操作比较简单，官方提供demo\"><a href=\"#1、操作比较简单，官方提供demo\" class=\"headerlink\" title=\"1、操作比较简单，官方提供demo\"></a>1、操作比较简单，官方提供demo</h4><h4 id=\"2、官方提供插件，方便集成\"><a href=\"#2、官方提供插件，方便集成\" class=\"headerlink\" title=\"2、官方提供插件，方便集成\"></a>2、官方提供插件，方便集成</h4><h4 id=\"3、机器人众多\"><a href=\"#3、机器人众多\" class=\"headerlink\" title=\"3、机器人众多\"></a>3、机器人众多</h4></blockquote>\n<h3 id=\"劣势：-2\"><a href=\"#劣势：-2\" class=\"headerlink\" title=\"劣势：\"></a>劣势：</h3><blockquote>\n<h4 id=\"1、机器人需要开发者进行训练\"><a href=\"#1、机器人需要开发者进行训练\" class=\"headerlink\" title=\"1、机器人需要开发者进行训练\"></a>1、机器人需要开发者进行训练</h4><h4 id=\"2、虽然网站上面机器人数量众多，但是大多私人创建，可能不太适合商业用途\"><a href=\"#2、虽然网站上面机器人数量众多，但是大多私人创建，可能不太适合商业用途\" class=\"headerlink\" title=\"2、虽然网站上面机器人数量众多，但是大多私人创建，可能不太适合商业用途\"></a>2、虽然网站上面机器人数量众多，但是大多私人创建，可能不太适合商业用途</h4></blockquote>\n<h3 id=\"以上便是我对三种机器人的调研结果了\"><a href=\"#以上便是我对三种机器人的调研结果了\" class=\"headerlink\" title=\"以上便是我对三种机器人的调研结果了: )\"></a>以上便是我对三种机器人的调研结果了: )</h3>","excerpt":"","more":"<h3 id=\"调研API-list：\"><a href=\"#调研API-list：\" class=\"headerlink\" title=\"调研API list：\"></a>调研API list：</h3><blockquote>\n<ul>\n<li><a href=\"http://developer.simsimi.com/\">小黄鸡：SimSimi</a></li>\n<li><a href=\"https://developer.pandorabots.com\">潘多拉机器人：Pandorabots</a></li>\n<li><a href=\"http://www.personalityforge.com/\">人格锻造机器人：personalityforge</a></li>\n</ul>\n</blockquote>\n<h3 id=\"SimSimi：\"><a href=\"#SimSimi：\" class=\"headerlink\" title=\"SimSimi：\"></a>SimSimi：</h3><h3 id=\"语言支持：韩、英、中为首的45中语言\"><a href=\"#语言支持：韩、英、中为首的45中语言\" class=\"headerlink\" title=\"语言支持：韩、英、中为首的45中语言\"></a>语言支持：韩、英、中为首的45中语言</h3><h4 id=\"小黄鸡可以说是最喜闻乐见的机器人了。小黄鸡在国人眼中比较熟悉，应用范围比较广泛，而且百度，人人网也是合作伙伴之一，支持多达45中语言，不过这些语言中并非所有的都能准确回应。韩语、英语和汉语是小黄鸡支持最好的三种语言了。首先，小黄鸡产自韩国，对韩语支持最大；英语作为世界应用范围最广的语言紧随其后；全球用户使用者最多的汉语位居第三。我之所以这么说，也并非毫无依据，官网语言仅支持这三种语言。\"><a href=\"#小黄鸡可以说是最喜闻乐见的机器人了。小黄鸡在国人眼中比较熟悉，应用范围比较广泛，而且百度，人人网也是合作伙伴之一，支持多达45中语言，不过这些语言中并非所有的都能准确回应。韩语、英语和汉语是小黄鸡支持最好的三种语言了。首先，小黄鸡产自韩国，对韩语支持最大；英语作为世界应用范围最广的语言紧随其后；全球用户使用者最多的汉语位居第三。我之所以这么说，也并非毫无依据，官网语言仅支持这三种语言。\" class=\"headerlink\" title=\"小黄鸡可以说是最喜闻乐见的机器人了。小黄鸡在国人眼中比较熟悉，应用范围比较广泛，而且百度，人人网也是合作伙伴之一，支持多达45中语言，不过这些语言中并非所有的都能准确回应。韩语、英语和汉语是小黄鸡支持最好的三种语言了。首先，小黄鸡产自韩国，对韩语支持最大；英语作为世界应用范围最广的语言紧随其后；全球用户使用者最多的汉语位居第三。我之所以这么说，也并非毫无依据，官网语言仅支持这三种语言。\"></a>小黄鸡可以说是最喜闻乐见的机器人了。小黄鸡在国人眼中比较熟悉，应用范围比较广泛，而且百度，人人网也是合作伙伴之一，支持多达45中语言，不过这些语言中并非所有的都能准确回应。韩语、英语和汉语是小黄鸡支持最好的三种语言了。首先，小黄鸡产自韩国，对韩语支持最大；英语作为世界应用范围最广的语言紧随其后；全球用户使用者最多的汉语位居第三。我之所以这么说，也并非毫无依据，官网语言仅支持这三种语言。</h4><h3 id=\"培养：官方\"><a href=\"#培养：官方\" class=\"headerlink\" title=\"培养：官方\"></a>培养：官方</h3><h4 id=\"SimSimi的语言培养完全来自官方培养，所以只要接入之后，完全不需要自己配置，这一点在三者之中最方便快捷，只需要通过API传入对应参数即可。\"><a href=\"#SimSimi的语言培养完全来自官方培养，所以只要接入之后，完全不需要自己配置，这一点在三者之中最方便快捷，只需要通过API传入对应参数即可。\" class=\"headerlink\" title=\"SimSimi的语言培养完全来自官方培养，所以只要接入之后，完全不需要自己配置，这一点在三者之中最方便快捷，只需要通过API传入对应参数即可。\"></a>SimSimi的语言培养完全来自官方培养，所以只要接入之后，完全不需要自己配置，这一点在三者之中最方便快捷，只需要通过API传入对应参数即可。</h4><h3 id=\"优势：\"><a href=\"#优势：\" class=\"headerlink\" title=\"优势：\"></a>优势：</h3><blockquote>\n<h4 id=\"1、接入简单快捷：只需要简单十多行代码即可\"><a href=\"#1、接入简单快捷：只需要简单十多行代码即可\" class=\"headerlink\" title=\"1、接入简单快捷：只需要简单十多行代码即可\"></a>1、接入简单快捷：只需要简单十多行代码即可</h4><h4 id=\"2、语言支持广泛：支持多种语言\"><a href=\"#2、语言支持广泛：支持多种语言\" class=\"headerlink\" title=\"2、语言支持广泛：支持多种语言\"></a>2、语言支持广泛：支持多种语言</h4><h4 id=\"3、口语化：交谈更接近两人交谈，没有那种冷冷的机器人的感觉\"><a href=\"#3、口语化：交谈更接近两人交谈，没有那种冷冷的机器人的感觉\" class=\"headerlink\" title=\"3、口语化：交谈更接近两人交谈，没有那种冷冷的机器人的感觉\"></a>3、口语化：交谈更接近两人交谈，没有那种冷冷的机器人的感觉</h4></blockquote>\n<h3 id=\"劣势：\"><a href=\"#劣势：\" class=\"headerlink\" title=\"劣势：\"></a>劣势：</h3><blockquote>\n<h4 id=\"1、语气太轻松：口语化虽然有些优势，但是SimSimi回复的内容有时候会充斥着轻浮和暴力因素\"><a href=\"#1、语气太轻松：口语化虽然有些优势，但是SimSimi回复的内容有时候会充斥着轻浮和暴力因素\" class=\"headerlink\" title=\"1、语气太轻松：口语化虽然有些优势，但是SimSimi回复的内容有时候会充斥着轻浮和暴力因素\"></a>1、语气太轻松：口语化虽然有些优势，但是SimSimi回复的内容有时候会充斥着轻浮和暴力因素</h4></blockquote>\n<h3 id=\"Pandorabots\"><a href=\"#Pandorabots\" class=\"headerlink\" title=\"Pandorabots\"></a>Pandorabots</h3><h3 id=\"语言支持：英语\"><a href=\"#语言支持：英语\" class=\"headerlink\" title=\"语言支持：英语\"></a>语言支持：英语</h3><h4 id=\"Pandorabots在Google排名比较靠前的chatbot，他和SimSimi有比较大的差别，Pandorabots是基于RESTful-API的人工智能应用程序，这类机器人并不适合经常的语音交谈聊天，更适合人工智能操作。比如，对台灯说：关灯！适用于简单、快捷的机器指令操作。-其实我要吐槽一下，在实用Pandorabots-API的时候，必须要信用卡认证才行，没用信用卡则代表着没办法试用接口，这是一个非常蛋疼的地方。\"><a href=\"#Pandorabots在Google排名比较靠前的chatbot，他和SimSimi有比较大的差别，Pandorabots是基于RESTful-API的人工智能应用程序，这类机器人并不适合经常的语音交谈聊天，更适合人工智能操作。比如，对台灯说：关灯！适用于简单、快捷的机器指令操作。-其实我要吐槽一下，在实用Pandorabots-API的时候，必须要信用卡认证才行，没用信用卡则代表着没办法试用接口，这是一个非常蛋疼的地方。\" class=\"headerlink\" title=\"Pandorabots在Google排名比较靠前的chatbot，他和SimSimi有比较大的差别，Pandorabots是基于RESTful API的人工智能应用程序，这类机器人并不适合经常的语音交谈聊天，更适合人工智能操作。比如，对台灯说：关灯！适用于简单、快捷的机器指令操作。 其实我要吐槽一下，在实用Pandorabots API的时候，必须要信用卡认证才行，没用信用卡则代表着没办法试用接口，这是一个非常蛋疼的地方。\"></a>Pandorabots在Google排名比较靠前的chatbot，他和SimSimi有比较大的差别，Pandorabots是基于RESTful API的人工智能应用程序，这类机器人并不适合经常的语音交谈聊天，更适合人工智能操作。比如，对台灯说：关灯！适用于简单、快捷的机器指令操作。 其实我要吐槽一下，在实用Pandorabots API的时候，必须要信用卡认证才行，没用信用卡则代表着没办法试用接口，这是一个非常蛋疼的地方。</h4><h3 id=\"培养：开发者。\"><a href=\"#培养：开发者。\" class=\"headerlink\" title=\"培养：开发者。\"></a>培养：开发者。</h3><h4 id=\"潘多拉机器人的培养依靠开发者自身，不定时的上传固定格式的配置文件，然后进行编译，编译结束后进行谈话。其实完整的流程是：crete-gt-upload-gt-compile-gt-talk\"><a href=\"#潘多拉机器人的培养依靠开发者自身，不定时的上传固定格式的配置文件，然后进行编译，编译结束后进行谈话。其实完整的流程是：crete-gt-upload-gt-compile-gt-talk\" class=\"headerlink\" title=\"潘多拉机器人的培养依靠开发者自身，不定时的上传固定格式的配置文件，然后进行编译，编译结束后进行谈话。其实完整的流程是：crete -&gt; upload -&gt; compile -&gt; talk\"></a>潘多拉机器人的培养依靠开发者自身，不定时的上传固定格式的配置文件，然后进行编译，编译结束后进行谈话。其实完整的流程是：crete -&gt; upload -&gt; compile -&gt; talk</h4><p><img src=\"/img/QQ截图20160826192107.png\" alt=\"Alt text\"></p>\n<h3 id=\"优势：-1\"><a href=\"#优势：-1\" class=\"headerlink\" title=\"优势：\"></a>优势：</h3><blockquote>\n<h4 id=\"1、交谈内控可控，回答内容完全在自己控制下\"><a href=\"#1、交谈内控可控，回答内容完全在自己控制下\" class=\"headerlink\" title=\"1、交谈内控可控，回答内容完全在自己控制下\"></a>1、交谈内控可控，回答内容完全在自己控制下</h4></blockquote>\n<h3 id=\"劣势：-1\"><a href=\"#劣势：-1\" class=\"headerlink\" title=\"劣势：\"></a>劣势：</h3><blockquote>\n<h4 id=\"1、接入比较复杂，官方只提供Java、Python和nodejs的sdk，需要github上下载第三方sdk\"><a href=\"#1、接入比较复杂，官方只提供Java、Python和nodejs的sdk，需要github上下载第三方sdk\" class=\"headerlink\" title=\"1、接入比较复杂，官方只提供Java、Python和nodejs的sdk，需要github上下载第三方sdk\"></a>1、接入比较复杂，官方只提供Java、Python和nodejs的sdk，需要github上下载第三方sdk</h4><h4 id=\"2、需要频繁的进行upload和compile\"><a href=\"#2、需要频繁的进行upload和compile\" class=\"headerlink\" title=\"2、需要频繁的进行upload和compile\"></a>2、需要频繁的进行upload和compile</h4><h4 id=\"3、蛋疼的试用限制：需要信用卡认证\"><a href=\"#3、蛋疼的试用限制：需要信用卡认证\" class=\"headerlink\" title=\"3、蛋疼的试用限制：需要信用卡认证\"></a>3、蛋疼的试用限制：需要信用卡认证</h4><h4 id=\"4、应用范围比较小，不适合做聊天机器人\"><a href=\"#4、应用范围比较小，不适合做聊天机器人\" class=\"headerlink\" title=\"4、应用范围比较小，不适合做聊天机器人\"></a>4、应用范围比较小，不适合做聊天机器人</h4></blockquote>\n<h3 id=\"Personalityforge：\"><a href=\"#Personalityforge：\" class=\"headerlink\" title=\"Personalityforge：\"></a>Personalityforge：</h3><h3 id=\"语言支持：英语-1\"><a href=\"#语言支持：英语-1\" class=\"headerlink\" title=\"语言支持：英语\"></a>语言支持：英语</h3><h4 id=\"人格锻造机器人是我自己找的API，从机器人的名字中，我们基本上可以理解出两层信息，首先，这个机器人是有人格的，然后这个机器人是需要锻造。事实上却是如此，当我打开这个机器人website的时候，发现上面有1万-的机器人，可以说上面每个机器人都有各自的性格，风格迥异，你可以找到性格激进暴躁的，可以发现性格温柔腼腆的机器人……\"><a href=\"#人格锻造机器人是我自己找的API，从机器人的名字中，我们基本上可以理解出两层信息，首先，这个机器人是有人格的，然后这个机器人是需要锻造。事实上却是如此，当我打开这个机器人website的时候，发现上面有1万-的机器人，可以说上面每个机器人都有各自的性格，风格迥异，你可以找到性格激进暴躁的，可以发现性格温柔腼腆的机器人……\" class=\"headerlink\" title=\"人格锻造机器人是我自己找的API，从机器人的名字中，我们基本上可以理解出两层信息，首先，这个机器人是有人格的，然后这个机器人是需要锻造。事实上却是如此，当我打开这个机器人website的时候，发现上面有1万+的机器人，可以说上面每个机器人都有各自的性格，风格迥异，你可以找到性格激进暴躁的，可以发现性格温柔腼腆的机器人……\"></a>人格锻造机器人是我自己找的API，从机器人的名字中，我们基本上可以理解出两层信息，首先，这个机器人是有人格的，然后这个机器人是需要锻造。事实上却是如此，当我打开这个机器人website的时候，发现上面有1万+的机器人，可以说上面每个机器人都有各自的性格，风格迥异，你可以找到性格激进暴躁的，可以发现性格温柔腼腆的机器人……</h4><h3 id=\"培养：开发者\"><a href=\"#培养：开发者\" class=\"headerlink\" title=\"培养：开发者\"></a>培养：开发者</h3><h4 id=\"Personalityforge和Pandorabots有些相似之处，就是需要开发者设置对话内容。当你在网站上面创建一个机器人的时候，会有一个id，这个id也是在调用API的时候必须的，因为它决定你和哪一个机器人在对话。此外，创建后，机器人自带一些简单对话内容，官方也提供了一些例如food，color等插件，可以集成到你的机器人上面。\"><a href=\"#Personalityforge和Pandorabots有些相似之处，就是需要开发者设置对话内容。当你在网站上面创建一个机器人的时候，会有一个id，这个id也是在调用API的时候必须的，因为它决定你和哪一个机器人在对话。此外，创建后，机器人自带一些简单对话内容，官方也提供了一些例如food，color等插件，可以集成到你的机器人上面。\" class=\"headerlink\" title=\"Personalityforge和Pandorabots有些相似之处，就是需要开发者设置对话内容。当你在网站上面创建一个机器人的时候，会有一个id，这个id也是在调用API的时候必须的，因为它决定你和哪一个机器人在对话。此外，创建后，机器人自带一些简单对话内容，官方也提供了一些例如food，color等插件，可以集成到你的机器人上面。\"></a>Personalityforge和Pandorabots有些相似之处，就是需要开发者设置对话内容。当你在网站上面创建一个机器人的时候，会有一个id，这个id也是在调用API的时候必须的，因为它决定你和哪一个机器人在对话。此外，创建后，机器人自带一些简单对话内容，官方也提供了一些例如food，color等插件，可以集成到你的机器人上面。</h4><h4 id=\"你也可以使用其他人创建的机器人，不过你需要联系对方获取授权才行。所以Personalityforge更像是一个平台。\"><a href=\"#你也可以使用其他人创建的机器人，不过你需要联系对方获取授权才行。所以Personalityforge更像是一个平台。\" class=\"headerlink\" title=\"你也可以使用其他人创建的机器人，不过你需要联系对方获取授权才行。所以Personalityforge更像是一个平台。\"></a>你也可以使用其他人创建的机器人，不过你需要联系对方获取授权才行。所以Personalityforge更像是一个平台。</h4><h3 id=\"优势：-2\"><a href=\"#优势：-2\" class=\"headerlink\" title=\"优势：\"></a>优势：</h3><blockquote>\n<h4 id=\"1、操作比较简单，官方提供demo\"><a href=\"#1、操作比较简单，官方提供demo\" class=\"headerlink\" title=\"1、操作比较简单，官方提供demo\"></a>1、操作比较简单，官方提供demo</h4><h4 id=\"2、官方提供插件，方便集成\"><a href=\"#2、官方提供插件，方便集成\" class=\"headerlink\" title=\"2、官方提供插件，方便集成\"></a>2、官方提供插件，方便集成</h4><h4 id=\"3、机器人众多\"><a href=\"#3、机器人众多\" class=\"headerlink\" title=\"3、机器人众多\"></a>3、机器人众多</h4></blockquote>\n<h3 id=\"劣势：-2\"><a href=\"#劣势：-2\" class=\"headerlink\" title=\"劣势：\"></a>劣势：</h3><blockquote>\n<h4 id=\"1、机器人需要开发者进行训练\"><a href=\"#1、机器人需要开发者进行训练\" class=\"headerlink\" title=\"1、机器人需要开发者进行训练\"></a>1、机器人需要开发者进行训练</h4><h4 id=\"2、虽然网站上面机器人数量众多，但是大多私人创建，可能不太适合商业用途\"><a href=\"#2、虽然网站上面机器人数量众多，但是大多私人创建，可能不太适合商业用途\" class=\"headerlink\" title=\"2、虽然网站上面机器人数量众多，但是大多私人创建，可能不太适合商业用途\"></a>2、虽然网站上面机器人数量众多，但是大多私人创建，可能不太适合商业用途</h4></blockquote>\n<h3 id=\"以上便是我对三种机器人的调研结果了\"><a href=\"#以上便是我对三种机器人的调研结果了\" class=\"headerlink\" title=\"以上便是我对三种机器人的调研结果了: )\"></a>以上便是我对三种机器人的调研结果了: )</h3>"},{"title":"阿里云消息队列和消息服务的使用","date":"2016-11-18T09:55:09.000Z","_content":"\n---------------------\n\n### 应用场景\n\n#### 异步处理\n\n消息队列的一的特点之一就是异步处理，这就决定了对于实时返回的信息就没办法使用消息队列。经常使用的消息队列比如发送邮箱验证、短信验证。因为一般的逻辑是串行方式，消息队列采用的是并行的模式。\n\n> **串行方式**：串行方式基本上是在编程中最常见的方式了，也就是完全按照流程做事。举个例子，我早上起床后，先刷牙（5分钟），然后再吃早饭（20分钟），我使用的时间是20+5分钟\n\n![Alt text](/img/消息队列1.png)\n\n> **并行方式**：并行方式也可以是算是异步处理，这样处理的效率会更快。举个例子，我晚上下班回家，我一边泡脚(5分钟)，泡脚的同时，我还顺便吃了晚饭（20分钟），这个过程我花了20分钟，因为泡脚和吃饭是同时进行的。\n\n![Alt text](/img/消息队列2.png)\n\n消息队列实现方式：\n\n![Alt text](/img/消息队列4.png)\n\n\n#### 应用解耦\n\n用户在下单之后，账单系统把账单信息发给库存系统，库存系统进行发货。但是如果库存系统某次访问不了，可能会导致订单失败。\n\n![Alt text](/img/消息队列5.png)\n\n消息队列形式：\n\n![Alt text](/img/消息队列6.png)\n\n#### 流量削峰\n\n很多网站的访问瓶颈大多数都是出现在数据库上面，如果某个接口出现访问量太大，必然会增加压力。或者某个接口调用第三方API，很容易出现数据丢失的状况，这种情景可以使用消息队列。\n\n![Alt text](/img/消息队列7.png)\n\n\n### 阿里云消息队列和消息服务\n\n#### 消息服务和消息队列的对比\n\n|对比项目|消息服务(MNS,原MQS)|消息队列(ONS)|\n|:-:|:-:|:-:|\n|queue模型|Yes|Yes|\n|官方SDK|Java,C++,Python,C#,PHP,Node.js(非官方),Golang(非官方)|Java,C/C++,C#,PHP(http),Python(http)|\n|支持JMS|Yes|No|\n|协议支持|HTTP|TCP,HTTP,MQTT|\n|延时消息|Yes|Yes|\n|定时消息|No|Yes|\n|事务消息|Yes|Yes|\n|消息Batch操作|Yes|No|\n|保证消息至少消费一次|Yes|Yes|\n|支持RAM访问控制|Yes|Yes|\n|消息优先级|Yes|No|\n|消息推拉模式|Pull，Push|Pull，Push|\n|消息轨迹追踪|Yes|Yes|\n|服务端消息过滤|Yes|Yes|\n|qps性能|默认5000|默认5000|\n|数据可靠性|99.99999999%|99.99%|\n|数据堆积\t|不限|不限|\n|服务可用性|99.9%|99.9%|\n\n#### API对比\n\n[消息服务API地址](https://help.aliyun.com/document_detail/27473.html?spm=5176.doc27437.6.226.7LkW7O)\n\n[消息队列http API地址](https://help.aliyun.com/document_detail/29572.html)\n\n> **消息服务的接口相对齐全一些，支持的类型也相对齐全，topic和queue两种形式。不过开发起来比较费劲，因为涉及到[签名](https://help.aliyun.com/document_detail/27487.html?spm=5176.doc27473.6.241.4ffAlt)的过程，在接收的时候，为了保证消息的安全性，需要进行验签，验签通过或才能进行逻辑处理。**\n\n\n> **消息队列的http接口比较简单，但是消息的重复率较高，达到了20%，官网提供的demo比较简单，只有发送，消费和删除，需要进程循环接收消息，比较消耗资源open API接口齐全，但是暂时没有支持PHP的SDK，综合考虑下选择了消息服务。**\n\n\n","source":"_posts/阿里云消息队列和消息服务的使用.md","raw":"---\ntitle: 阿里云消息队列和消息服务的使用\ndate: 2016-11-18 17:55:09\ntags: 消息队列 消息服务 阿里云\ncategories: PHP\n---\n\n---------------------\n\n### 应用场景\n\n#### 异步处理\n\n消息队列的一的特点之一就是异步处理，这就决定了对于实时返回的信息就没办法使用消息队列。经常使用的消息队列比如发送邮箱验证、短信验证。因为一般的逻辑是串行方式，消息队列采用的是并行的模式。\n\n> **串行方式**：串行方式基本上是在编程中最常见的方式了，也就是完全按照流程做事。举个例子，我早上起床后，先刷牙（5分钟），然后再吃早饭（20分钟），我使用的时间是20+5分钟\n\n![Alt text](/img/消息队列1.png)\n\n> **并行方式**：并行方式也可以是算是异步处理，这样处理的效率会更快。举个例子，我晚上下班回家，我一边泡脚(5分钟)，泡脚的同时，我还顺便吃了晚饭（20分钟），这个过程我花了20分钟，因为泡脚和吃饭是同时进行的。\n\n![Alt text](/img/消息队列2.png)\n\n消息队列实现方式：\n\n![Alt text](/img/消息队列4.png)\n\n\n#### 应用解耦\n\n用户在下单之后，账单系统把账单信息发给库存系统，库存系统进行发货。但是如果库存系统某次访问不了，可能会导致订单失败。\n\n![Alt text](/img/消息队列5.png)\n\n消息队列形式：\n\n![Alt text](/img/消息队列6.png)\n\n#### 流量削峰\n\n很多网站的访问瓶颈大多数都是出现在数据库上面，如果某个接口出现访问量太大，必然会增加压力。或者某个接口调用第三方API，很容易出现数据丢失的状况，这种情景可以使用消息队列。\n\n![Alt text](/img/消息队列7.png)\n\n\n### 阿里云消息队列和消息服务\n\n#### 消息服务和消息队列的对比\n\n|对比项目|消息服务(MNS,原MQS)|消息队列(ONS)|\n|:-:|:-:|:-:|\n|queue模型|Yes|Yes|\n|官方SDK|Java,C++,Python,C#,PHP,Node.js(非官方),Golang(非官方)|Java,C/C++,C#,PHP(http),Python(http)|\n|支持JMS|Yes|No|\n|协议支持|HTTP|TCP,HTTP,MQTT|\n|延时消息|Yes|Yes|\n|定时消息|No|Yes|\n|事务消息|Yes|Yes|\n|消息Batch操作|Yes|No|\n|保证消息至少消费一次|Yes|Yes|\n|支持RAM访问控制|Yes|Yes|\n|消息优先级|Yes|No|\n|消息推拉模式|Pull，Push|Pull，Push|\n|消息轨迹追踪|Yes|Yes|\n|服务端消息过滤|Yes|Yes|\n|qps性能|默认5000|默认5000|\n|数据可靠性|99.99999999%|99.99%|\n|数据堆积\t|不限|不限|\n|服务可用性|99.9%|99.9%|\n\n#### API对比\n\n[消息服务API地址](https://help.aliyun.com/document_detail/27473.html?spm=5176.doc27437.6.226.7LkW7O)\n\n[消息队列http API地址](https://help.aliyun.com/document_detail/29572.html)\n\n> **消息服务的接口相对齐全一些，支持的类型也相对齐全，topic和queue两种形式。不过开发起来比较费劲，因为涉及到[签名](https://help.aliyun.com/document_detail/27487.html?spm=5176.doc27473.6.241.4ffAlt)的过程，在接收的时候，为了保证消息的安全性，需要进行验签，验签通过或才能进行逻辑处理。**\n\n\n> **消息队列的http接口比较简单，但是消息的重复率较高，达到了20%，官网提供的demo比较简单，只有发送，消费和删除，需要进程循环接收消息，比较消耗资源open API接口齐全，但是暂时没有支持PHP的SDK，综合考虑下选择了消息服务。**\n\n\n","slug":"阿里云消息队列和消息服务的使用","published":1,"updated":"2016-11-18T10:00:20.611Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixv73cns0020ugqmnzt458th","content":"<hr>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h4 id=\"异步处理\"><a href=\"#异步处理\" class=\"headerlink\" title=\"异步处理\"></a>异步处理</h4><p>消息队列的一的特点之一就是异步处理，这就决定了对于实时返回的信息就没办法使用消息队列。经常使用的消息队列比如发送邮箱验证、短信验证。因为一般的逻辑是串行方式，消息队列采用的是并行的模式。</p>\n<blockquote>\n<p><strong>串行方式</strong>：串行方式基本上是在编程中最常见的方式了，也就是完全按照流程做事。举个例子，我早上起床后，先刷牙（5分钟），然后再吃早饭（20分钟），我使用的时间是20+5分钟</p>\n</blockquote>\n<p><img src=\"/img/消息队列1.png\" alt=\"Alt text\"></p>\n<blockquote>\n<p><strong>并行方式</strong>：并行方式也可以是算是异步处理，这样处理的效率会更快。举个例子，我晚上下班回家，我一边泡脚(5分钟)，泡脚的同时，我还顺便吃了晚饭（20分钟），这个过程我花了20分钟，因为泡脚和吃饭是同时进行的。</p>\n</blockquote>\n<p><img src=\"/img/消息队列2.png\" alt=\"Alt text\"></p>\n<p>消息队列实现方式：</p>\n<p><img src=\"/img/消息队列4.png\" alt=\"Alt text\"></p>\n<h4 id=\"应用解耦\"><a href=\"#应用解耦\" class=\"headerlink\" title=\"应用解耦\"></a>应用解耦</h4><p>用户在下单之后，账单系统把账单信息发给库存系统，库存系统进行发货。但是如果库存系统某次访问不了，可能会导致订单失败。</p>\n<p><img src=\"/img/消息队列5.png\" alt=\"Alt text\"></p>\n<p>消息队列形式：</p>\n<p><img src=\"/img/消息队列6.png\" alt=\"Alt text\"></p>\n<h4 id=\"流量削峰\"><a href=\"#流量削峰\" class=\"headerlink\" title=\"流量削峰\"></a>流量削峰</h4><p>很多网站的访问瓶颈大多数都是出现在数据库上面，如果某个接口出现访问量太大，必然会增加压力。或者某个接口调用第三方API，很容易出现数据丢失的状况，这种情景可以使用消息队列。</p>\n<p><img src=\"/img/消息队列7.png\" alt=\"Alt text\"></p>\n<h3 id=\"阿里云消息队列和消息服务\"><a href=\"#阿里云消息队列和消息服务\" class=\"headerlink\" title=\"阿里云消息队列和消息服务\"></a>阿里云消息队列和消息服务</h3><h4 id=\"消息服务和消息队列的对比\"><a href=\"#消息服务和消息队列的对比\" class=\"headerlink\" title=\"消息服务和消息队列的对比\"></a>消息服务和消息队列的对比</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">对比项目</th>\n<th style=\"text-align:center\">消息服务(MNS,原MQS)</th>\n<th style=\"text-align:center\">消息队列(ONS)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">queue模型</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">官方SDK</td>\n<td style=\"text-align:center\">Java,C++,Python,C#,PHP,Node.js(非官方),Golang(非官方)</td>\n<td style=\"text-align:center\">Java,C/C++,C#,PHP(http),Python(http)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">支持JMS</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">协议支持</td>\n<td style=\"text-align:center\">HTTP</td>\n<td style=\"text-align:center\">TCP,HTTP,MQTT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">延时消息</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">定时消息</td>\n<td style=\"text-align:center\">No</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">事务消息</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消息Batch操作</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">保证消息至少消费一次</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">支持RAM访问控制</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消息优先级</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消息推拉模式</td>\n<td style=\"text-align:center\">Pull，Push</td>\n<td style=\"text-align:center\">Pull，Push</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消息轨迹追踪</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">服务端消息过滤</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">qps性能</td>\n<td style=\"text-align:center\">默认5000</td>\n<td style=\"text-align:center\">默认5000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据可靠性</td>\n<td style=\"text-align:center\">99.99999999%</td>\n<td style=\"text-align:center\">99.99%</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据堆积</td>\n<td style=\"text-align:center\">不限</td>\n<td style=\"text-align:center\">不限</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">服务可用性</td>\n<td style=\"text-align:center\">99.9%</td>\n<td style=\"text-align:center\">99.9%</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"API对比\"><a href=\"#API对比\" class=\"headerlink\" title=\"API对比\"></a>API对比</h4><p><a href=\"https://help.aliyun.com/document_detail/27473.html?spm=5176.doc27437.6.226.7LkW7O\" target=\"_blank\" rel=\"external\">消息服务API地址</a></p>\n<p><a href=\"https://help.aliyun.com/document_detail/29572.html\" target=\"_blank\" rel=\"external\">消息队列http API地址</a></p>\n<blockquote>\n<p><strong>消息服务的接口相对齐全一些，支持的类型也相对齐全，topic和queue两种形式。不过开发起来比较费劲，因为涉及到<a href=\"https://help.aliyun.com/document_detail/27487.html?spm=5176.doc27473.6.241.4ffAlt\" target=\"_blank\" rel=\"external\">签名</a>的过程，在接收的时候，为了保证消息的安全性，需要进行验签，验签通过或才能进行逻辑处理。</strong></p>\n<p><strong>消息队列的http接口比较简单，但是消息的重复率较高，达到了20%，官网提供的demo比较简单，只有发送，消费和删除，需要进程循环接收消息，比较消耗资源open API接口齐全，但是暂时没有支持PHP的SDK，综合考虑下选择了消息服务。</strong></p>\n</blockquote>\n","excerpt":"","more":"<hr>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><h4 id=\"异步处理\"><a href=\"#异步处理\" class=\"headerlink\" title=\"异步处理\"></a>异步处理</h4><p>消息队列的一的特点之一就是异步处理，这就决定了对于实时返回的信息就没办法使用消息队列。经常使用的消息队列比如发送邮箱验证、短信验证。因为一般的逻辑是串行方式，消息队列采用的是并行的模式。</p>\n<blockquote>\n<p><strong>串行方式</strong>：串行方式基本上是在编程中最常见的方式了，也就是完全按照流程做事。举个例子，我早上起床后，先刷牙（5分钟），然后再吃早饭（20分钟），我使用的时间是20+5分钟</p>\n</blockquote>\n<p><img src=\"/img/消息队列1.png\" alt=\"Alt text\"></p>\n<blockquote>\n<p><strong>并行方式</strong>：并行方式也可以是算是异步处理，这样处理的效率会更快。举个例子，我晚上下班回家，我一边泡脚(5分钟)，泡脚的同时，我还顺便吃了晚饭（20分钟），这个过程我花了20分钟，因为泡脚和吃饭是同时进行的。</p>\n</blockquote>\n<p><img src=\"/img/消息队列2.png\" alt=\"Alt text\"></p>\n<p>消息队列实现方式：</p>\n<p><img src=\"/img/消息队列4.png\" alt=\"Alt text\"></p>\n<h4 id=\"应用解耦\"><a href=\"#应用解耦\" class=\"headerlink\" title=\"应用解耦\"></a>应用解耦</h4><p>用户在下单之后，账单系统把账单信息发给库存系统，库存系统进行发货。但是如果库存系统某次访问不了，可能会导致订单失败。</p>\n<p><img src=\"/img/消息队列5.png\" alt=\"Alt text\"></p>\n<p>消息队列形式：</p>\n<p><img src=\"/img/消息队列6.png\" alt=\"Alt text\"></p>\n<h4 id=\"流量削峰\"><a href=\"#流量削峰\" class=\"headerlink\" title=\"流量削峰\"></a>流量削峰</h4><p>很多网站的访问瓶颈大多数都是出现在数据库上面，如果某个接口出现访问量太大，必然会增加压力。或者某个接口调用第三方API，很容易出现数据丢失的状况，这种情景可以使用消息队列。</p>\n<p><img src=\"/img/消息队列7.png\" alt=\"Alt text\"></p>\n<h3 id=\"阿里云消息队列和消息服务\"><a href=\"#阿里云消息队列和消息服务\" class=\"headerlink\" title=\"阿里云消息队列和消息服务\"></a>阿里云消息队列和消息服务</h3><h4 id=\"消息服务和消息队列的对比\"><a href=\"#消息服务和消息队列的对比\" class=\"headerlink\" title=\"消息服务和消息队列的对比\"></a>消息服务和消息队列的对比</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">对比项目</th>\n<th style=\"text-align:center\">消息服务(MNS,原MQS)</th>\n<th style=\"text-align:center\">消息队列(ONS)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">queue模型</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">官方SDK</td>\n<td style=\"text-align:center\">Java,C++,Python,C#,PHP,Node.js(非官方),Golang(非官方)</td>\n<td style=\"text-align:center\">Java,C/C++,C#,PHP(http),Python(http)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">支持JMS</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">协议支持</td>\n<td style=\"text-align:center\">HTTP</td>\n<td style=\"text-align:center\">TCP,HTTP,MQTT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">延时消息</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">定时消息</td>\n<td style=\"text-align:center\">No</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">事务消息</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消息Batch操作</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">保证消息至少消费一次</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">支持RAM访问控制</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消息优先级</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">No</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消息推拉模式</td>\n<td style=\"text-align:center\">Pull，Push</td>\n<td style=\"text-align:center\">Pull，Push</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">消息轨迹追踪</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">服务端消息过滤</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">qps性能</td>\n<td style=\"text-align:center\">默认5000</td>\n<td style=\"text-align:center\">默认5000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据可靠性</td>\n<td style=\"text-align:center\">99.99999999%</td>\n<td style=\"text-align:center\">99.99%</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据堆积</td>\n<td style=\"text-align:center\">不限</td>\n<td style=\"text-align:center\">不限</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">服务可用性</td>\n<td style=\"text-align:center\">99.9%</td>\n<td style=\"text-align:center\">99.9%</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"API对比\"><a href=\"#API对比\" class=\"headerlink\" title=\"API对比\"></a>API对比</h4><p><a href=\"https://help.aliyun.com/document_detail/27473.html?spm=5176.doc27437.6.226.7LkW7O\">消息服务API地址</a></p>\n<p><a href=\"https://help.aliyun.com/document_detail/29572.html\">消息队列http API地址</a></p>\n<blockquote>\n<p><strong>消息服务的接口相对齐全一些，支持的类型也相对齐全，topic和queue两种形式。不过开发起来比较费劲，因为涉及到<a href=\"https://help.aliyun.com/document_detail/27487.html?spm=5176.doc27473.6.241.4ffAlt\">签名</a>的过程，在接收的时候，为了保证消息的安全性，需要进行验签，验签通过或才能进行逻辑处理。</strong></p>\n<p><strong>消息队列的http接口比较简单，但是消息的重复率较高，达到了20%，官网提供的demo比较简单，只有发送，消费和删除，需要进程循环接收消息，比较消耗资源open API接口齐全，但是暂时没有支持PHP的SDK，综合考虑下选择了消息服务。</strong></p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cixv73clf0000ugqm4zd6hcw9","category_id":"cixv73clp0003ugqmo90sjfyr","_id":"cixv73clt0007ugqmpqphe277"},{"post_id":"cixv73clk0001ugqmfe1t21gt","category_id":"cixv73clr0005ugqmbo2x9nyq","_id":"cixv73clt0009ugqmpe9ga6vc"},{"post_id":"cixv73cm3000augqmvc0yyu6u","category_id":"cixv73clp0003ugqmo90sjfyr","_id":"cixv73cmc000iugqmgpf0wxrm"},{"post_id":"cixv73cm6000cugqmlwc7c7bk","category_id":"cixv73cmc000hugqm3rgjbjam","_id":"cixv73cmu000rugqmm0buuzmh"},{"post_id":"cixv73cm8000fugqmbyjtud9h","category_id":"cixv73cmc000hugqm3rgjbjam","_id":"cixv73cmy000xugqmoifzktxs"},{"post_id":"cixv73cmv000tugqmsr9xlwjq","category_id":"cixv73clr0005ugqmbo2x9nyq","_id":"cixv73cn10011ugqmbw2ymufo"},{"post_id":"cixv73cmc000jugqmctkbgi1z","category_id":"cixv73cmc000hugqm3rgjbjam","_id":"cixv73cn30014ugqmwcyn2utv"},{"post_id":"cixv73cn20012ugqmm3cs2ahr","category_id":"cixv73clr0005ugqmbo2x9nyq","_id":"cixv73cn6001bugqmbutrxfsz"},{"post_id":"cixv73cmq000nugqmthv3rum6","category_id":"cixv73cn0000zugqmfuhzng7x","_id":"cixv73cn8001fugqm1t5hc2ge"},{"post_id":"cixv73cn30015ugqmkphk2god","category_id":"cixv73clr0005ugqmbo2x9nyq","_id":"cixv73cnc001hugqm762nb5tc"},{"post_id":"cixv73cmt000pugqmdtr6x3fc","category_id":"cixv73cn0000zugqmfuhzng7x","_id":"cixv73cnf001mugqmdaio1p64"},{"post_id":"cixv73cn9001gugqm1bbe63ub","category_id":"cixv73clp0003ugqmo90sjfyr","_id":"cixv73cnh001ougqmwrl6m3so"},{"post_id":"cixv73cmw000vugqm47aux5gn","category_id":"cixv73cn0000zugqmfuhzng7x","_id":"cixv73cnk001sugqme4xxe0je"},{"post_id":"cixv73cnc001jugqmfih8riir","category_id":"cixv73cmc000hugqm3rgjbjam","_id":"cixv73cnp001vugqmi6r50pil"},{"post_id":"cixv73cnf001nugqm19pat0kg","category_id":"cixv73clr0005ugqmbo2x9nyq","_id":"cixv73cnr001yugqmkiynhald"},{"post_id":"cixv73cmy000yugqm4uzmdvbf","category_id":"cixv73cne001kugqm4kq8nfwu","_id":"cixv73cnu0022ugqm326y6f2s"},{"post_id":"cixv73cn6001cugqm83ef37qy","category_id":"cixv73cnk001rugqm4nrl0mje","_id":"cixv73cnu0024ugqmt5vbmqmo"},{"post_id":"cixv73cns0020ugqmnzt458th","category_id":"cixv73clr0005ugqmbo2x9nyq","_id":"cixv73cnv0027ugqmckywll7q"},{"post_id":"cixv73cni001pugqm6wv787tl","category_id":"cixv73cns001zugqmms6hai4t","_id":"cixv73cnw0028ugqmpc89zmad"},{"post_id":"cixv73cnm001uugqmi2s6que8","category_id":"cixv73cnu0025ugqmx8rcd7al","_id":"cixv73cnw002cugqmp5pte4hb"},{"post_id":"cixv73cnp001wugqm1e0prupz","category_id":"cixv73cnu0025ugqmx8rcd7al","_id":"cixv73cnx002fugqm3r38kc8r"}],"PostTag":[{"post_id":"cixv73clf0000ugqm4zd6hcw9","tag_id":"cixv73clm0002ugqm68s4zeuh","_id":"cixv73cls0006ugqmr5znnpwq"},{"post_id":"cixv73clk0001ugqmfe1t21gt","tag_id":"cixv73clr0004ugqmwxt6xdry","_id":"cixv73clt0008ugqmc8swfxau"},{"post_id":"cixv73cm3000augqmvc0yyu6u","tag_id":"cixv73cm8000eugqms2ml2gam","_id":"cixv73cmo000mugqmyzykj6yn"},{"post_id":"cixv73cm8000fugqmbyjtud9h","tag_id":"cixv73cme000kugqmkxs2pyy1","_id":"cixv73cmu000sugqmk67d1mrw"},{"post_id":"cixv73cme000lugqm3c4n93pc","tag_id":"cixv73cmu000qugqm0mfx8ftg","_id":"cixv73cn10010ugqmtky8q2mg"},{"post_id":"cixv73cmq000nugqmthv3rum6","tag_id":"cixv73cmx000wugqma3suabjc","_id":"cixv73cn40017ugqmeiwdjsq7"},{"post_id":"cixv73cn20012ugqmm3cs2ahr","tag_id":"cixv73cmu000qugqm0mfx8ftg","_id":"cixv73cn50019ugqmcu97ukqo"},{"post_id":"cixv73cmt000pugqmdtr6x3fc","tag_id":"cixv73cmx000wugqma3suabjc","_id":"cixv73cn7001eugqmta34di9h"},{"post_id":"cixv73cmv000tugqmsr9xlwjq","tag_id":"cixv73cn6001augqmlpkad7i5","_id":"cixv73cne001lugqmc0iu8nmw"},{"post_id":"cixv73cmw000vugqm47aux5gn","tag_id":"cixv73cnc001iugqmuzuys1d1","_id":"cixv73cnl001tugqm53n1u0to"},{"post_id":"cixv73cmy000yugqm4uzmdvbf","tag_id":"cixv73cnj001qugqmigazratk","_id":"cixv73cnt0021ugqmznurudi6"},{"post_id":"cixv73cn6001cugqm83ef37qy","tag_id":"cixv73cnr001xugqmrkcot23s","_id":"cixv73cnv0026ugqme2zf8ymr"},{"post_id":"cixv73cn9001gugqm1bbe63ub","tag_id":"cixv73cnu0023ugqmr4i100hq","_id":"cixv73cnw002bugqmrf2nalv2"},{"post_id":"cixv73cnc001jugqmfih8riir","tag_id":"cixv73cnw0029ugqm9h25x74s","_id":"cixv73cnx002eugqmauliwfhy"},{"post_id":"cixv73cni001pugqm6wv787tl","tag_id":"cixv73cnx002dugqmz2bfb66b","_id":"cixv73cnx002hugqmi43l0o2r"},{"post_id":"cixv73cnm001uugqmi2s6que8","tag_id":"cixv73cnx002gugqm0tf993qo","_id":"cixv73cny002jugqm08o4p23o"},{"post_id":"cixv73cnp001wugqm1e0prupz","tag_id":"cixv73cnx002gugqm0tf993qo","_id":"cixv73cny002lugqmzey21xlz"},{"post_id":"cixv73cns0020ugqmnzt458th","tag_id":"cixv73cny002kugqmyt3n6u13","_id":"cixv73cny002mugqmofsxnd4m"}],"Tag":[{"name":"Git Push","_id":"cixv73clm0002ugqm68s4zeuh"},{"name":"正则表达式","_id":"cixv73clr0004ugqmwxt6xdry"},{"name":"git branch","_id":"cixv73cm8000eugqms2ml2gam"},{"name":"Nginx","_id":"cixv73cme000kugqmkxs2pyy1"},{"name":"PHP","_id":"cixv73cmu000qugqm0mfx8ftg"},{"name":"Nodejs","_id":"cixv73cmx000wugqma3suabjc"},{"name":"curl json","_id":"cixv73cn6001augqmlpkad7i5"},{"name":"NodeJs","_id":"cixv73cnc001iugqmuzuys1d1"},{"name":"Life Picture","_id":"cixv73cnj001qugqmigazratk"},{"name":"php linux nginx","_id":"cixv73cnr001xugqmrkcot23s"},{"name":"git ssh https","_id":"cixv73cnu0023ugqmr4i100hq"},{"name":"Linux","_id":"cixv73cnw0029ugqm9h25x74s"},{"name":"自我反思","_id":"cixv73cnx002dugqmz2bfb66b"},{"name":"随笔","_id":"cixv73cnx002gugqm0tf993qo"},{"name":"消息队列 消息服务 阿里云","_id":"cixv73cny002kugqmyt3n6u13"}]}}